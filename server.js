function delay(ms, options = {}) {
    const { signal  } = options;
    if (signal?.aborted) {
        return Promise.reject(new DOMException("Delay was aborted.", "AbortError"));
    }
    return new Promise((resolve3, reject)=>{
        const abort = ()=>{
            clearTimeout(i6);
            reject(new DOMException("Delay was aborted.", "AbortError"));
        };
        const done = ()=>{
            signal?.removeEventListener("abort", abort);
            resolve3();
        };
        const i6 = setTimeout(done, ms);
        signal?.addEventListener("abort", abort, {
            once: true
        });
    });
}
const ERROR_SERVER_CLOSED = "Server closed";
const INITIAL_ACCEPT_BACKOFF_DELAY = 5;
const MAX_ACCEPT_BACKOFF_DELAY = 1000;
class Server {
    #port;
    #host;
    #handler;
    #closed = false;
    #listeners = new Set();
    #httpConnections = new Set();
    #onError;
    constructor(serverInit){
        this.#port = serverInit.port;
        this.#host = serverInit.hostname;
        this.#handler = serverInit.handler;
        this.#onError = serverInit.onError ?? function(error) {
            console.error(error);
            return new Response("Internal Server Error", {
                status: 500
            });
        };
    }
    async serve(listener) {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        this.#trackListener(listener);
        try {
            return await this.#accept(listener);
        } finally{
            this.#untrackListener(listener);
            try {
                listener.close();
            } catch  {}
        }
    }
    async listenAndServe() {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        const listener = Deno.listen({
            port: this.#port ?? 80,
            hostname: this.#host ?? "0.0.0.0",
            transport: "tcp"
        });
        return await this.serve(listener);
    }
    async listenAndServeTls(certFile, keyFile) {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        const listener = Deno.listenTls({
            port: this.#port ?? 443,
            hostname: this.#host ?? "0.0.0.0",
            certFile,
            keyFile,
            transport: "tcp"
        });
        return await this.serve(listener);
    }
    close() {
        if (this.#closed) {
            throw new Deno.errors.Http(ERROR_SERVER_CLOSED);
        }
        this.#closed = true;
        for (const listener of this.#listeners){
            try {
                listener.close();
            } catch  {}
        }
        this.#listeners.clear();
        for (const httpConn of this.#httpConnections){
            this.#closeHttpConn(httpConn);
        }
        this.#httpConnections.clear();
    }
    get closed() {
        return this.#closed;
    }
    get addrs() {
        return Array.from(this.#listeners).map((listener)=>listener.addr
        );
    }
    async #respond(requestEvent, httpConn, connInfo) {
        let response;
        try {
            response = await this.#handler(requestEvent.request, connInfo);
        } catch (error) {
            response = await this.#onError(error);
        }
        try {
            await requestEvent.respondWith(response);
        } catch  {
            return this.#closeHttpConn(httpConn);
        }
    }
    async #serveHttp(httpConn1, connInfo1) {
        while(!this.#closed){
            let requestEvent;
            try {
                requestEvent = await httpConn1.nextRequest();
            } catch  {
                break;
            }
            if (requestEvent === null) {
                break;
            }
            this.#respond(requestEvent, httpConn1, connInfo1);
        }
        this.#closeHttpConn(httpConn1);
    }
    async #accept(listener) {
        let acceptBackoffDelay;
        while(!this.#closed){
            let conn;
            try {
                conn = await listener.accept();
            } catch (error) {
                if (error instanceof Deno.errors.BadResource || error instanceof Deno.errors.InvalidData || error instanceof Deno.errors.UnexpectedEof || error instanceof Deno.errors.ConnectionReset || error instanceof Deno.errors.NotConnected) {
                    if (!acceptBackoffDelay) {
                        acceptBackoffDelay = INITIAL_ACCEPT_BACKOFF_DELAY;
                    } else {
                        acceptBackoffDelay *= 2;
                    }
                    if (acceptBackoffDelay >= 1000) {
                        acceptBackoffDelay = MAX_ACCEPT_BACKOFF_DELAY;
                    }
                    await delay(acceptBackoffDelay);
                    continue;
                }
                throw error;
            }
            acceptBackoffDelay = undefined;
            let httpConn;
            try {
                httpConn = Deno.serveHttp(conn);
            } catch  {
                continue;
            }
            this.#trackHttpConnection(httpConn);
            const connInfo = {
                localAddr: conn.localAddr,
                remoteAddr: conn.remoteAddr
            };
            this.#serveHttp(httpConn, connInfo);
        }
    }
     #closeHttpConn(httpConn2) {
        this.#untrackHttpConnection(httpConn2);
        try {
            httpConn2.close();
        } catch  {}
    }
     #trackListener(listener1) {
        this.#listeners.add(listener1);
    }
     #untrackListener(listener2) {
        this.#listeners.delete(listener2);
    }
     #trackHttpConnection(httpConn3) {
        this.#httpConnections.add(httpConn3);
    }
     #untrackHttpConnection(httpConn4) {
        this.#httpConnections.delete(httpConn4);
    }
}
async function serve(handler, options = {}) {
    const server = new Server({
        port: options.port ?? 8000,
        hostname: options.hostname ?? "0.0.0.0",
        handler,
        onError: options.onError
    });
    if (options?.signal) {
        options.signal.onabort = ()=>server.close()
        ;
    }
    return await server.listenAndServe();
}
var t = {};
Object.defineProperty(t, "__esModule", {
    value: true
});
t.VERSION = void 0;
t.VERSION = "0.0.27";
var n = {};
Object.defineProperty(n, "__esModule", {
    value: true
});
n.printVersion = n.escapeHtml = n.onNodeRemove = n.detectSSR = n.nodeToString = n.task = void 0;
const r = t;
const task$1 = (e1)=>setTimeout(e1, 0)
;
n.task = task$1;
const nodeToString$1 = (e2)=>{
    const t1 = document.createElement("div");
    t1.appendChild(e2.cloneNode(true));
    return t1.innerHTML;
};
n.nodeToString = nodeToString$1;
const detectSSR = ()=>{
    const e3 = "undefined" !== typeof Deno;
    const t2 = "undefined" !== typeof window;
    return "undefined" !== typeof _nano && _nano.isSSR || e3 || !t2;
};
n.detectSSR = detectSSR;
function isDescendant(e4, t3) {
    return !!e4 && (e4 === t3 || isDescendant(e4.parentNode, t3));
}
const onNodeRemove = (e5, t4)=>{
    let n1 = new MutationObserver((r1)=>{
        r1.forEach((r2)=>{
            r2.removedNodes.forEach((r3)=>{
                if (isDescendant(e5, r3)) {
                    t4();
                    if (n1) {
                        n1.disconnect();
                        n1 = void 0;
                    }
                }
            });
        });
    });
    n1.observe(document, {
        childList: true,
        subtree: true
    });
    return n1;
};
n.onNodeRemove = onNodeRemove;
const escapeHtml = (e6)=>e6 && "string" === typeof e6 ? e6.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;") : e6
;
n.escapeHtml = escapeHtml;
const printVersion$1 = ()=>{
    const e7 = `Powered by nano JSX v${r.VERSION}`;
    console.log(`%c %c %c %c %c ${e7} %c http://nanojsx.io`, "background: #ff0000", "background: #ffff00", "background: #00ff00", "background: #00ffff", "color: #fff; background: #000000;", "background: none");
};
n.printVersion = printVersion$1;
var s = {};
Object.defineProperty(s, "__esModule", {
    value: true
});
s.documentSSR = s.DocumentSSR = s.HTMLElementSSR = void 0;
const o = n;
class HTMLElementSSR {
    constructor(e8){
        this.isSelfClosing = false;
        this.nodeType = null;
        this.tagName = e8;
        const t5 = [
            "area",
            "base",
            "br",
            "col",
            "embed",
            "hr",
            "img",
            "input",
            "link",
            "meta",
            "param",
            "source",
            "track",
            "wbr"
        ];
        this.nodeType = 1;
        if (t5.indexOf(e8) >= 0) {
            this._ssr = `<${e8} />`;
            this.isSelfClosing = true;
        } else this._ssr = `<${e8}></${e8}>`;
    }
    get outerHTML() {
        return this.toString();
    }
    get innerHTML() {
        return this.innerText;
    }
    set innerHTML(e9) {
        this.innerText = e9;
    }
    get innerText() {
        var e10;
        const t6 = /(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm;
        return (null === (e10 = t6.exec(this._ssr)) || void 0 === e10 ? void 0 : e10[2]) || "";
    }
    set innerText(e11) {
        const t7 = /(^<[^>]+>)(.+)?(<\/[a-z]+>$|\/>$)/gm;
        this._ssr = this._ssr.replace(t7, `$1${e11}$3`);
    }
    getAttribute(e) {
        return null;
    }
    get classList() {
        const e12 = this._ssr;
        const t8 = /^<\w+.+(\sclass=")([^"]+)"/gm;
        return {
            add: (e13)=>{
                this.setAttribute("class", e13);
            },
            entries: {
                get length () {
                    const n2 = t8.exec(e12);
                    return n2 && n2[2] ? n2[2].split(" ").length : 0;
                }
            }
        };
    }
    toString() {
        return this._ssr;
    }
    setAttributeNS(e, t9, n3) {
        this.setAttribute(t9, n3);
    }
    setAttribute(e14, t10) {
        this.isSelfClosing ? this._ssr = this._ssr.replace(/(^<[a-z]+ )(.+)/gm, `$1${(0, o.escapeHtml)(e14)}="${(0, o.escapeHtml)(t10)}" $2`) : this._ssr = this._ssr.replace(/(^<[^>]+)(.+)/gm, `$1 ${(0, o.escapeHtml)(e14)}="${(0, o.escapeHtml)(t10)}"$2`);
    }
    append(e15) {
        this.appendChild(e15);
    }
    appendChild(e16) {
        const t11 = this._ssr.lastIndexOf("</");
        this._ssr = this._ssr.substring(0, t11) + e16 + this._ssr.substring(t11);
    }
    get children() {
        const e17 = /<([a-z]+)((?!<\/\1).)*<\/\1>/gms;
        const t12 = [];
        let n4;
        while(null !== (n4 = e17.exec(this.innerHTML)))t12.push(n4[0].replace(/[\s]+/gm, " "));
        return t12;
    }
    addEventListener(e, t, n) {}
}
s.HTMLElementSSR = HTMLElementSSR;
class DocumentSSR {
    constructor(){
        this.body = this.createElement("body");
        this.head = this.createElement("head");
    }
    createElement(e18) {
        return new HTMLElementSSR(e18);
    }
    createElementNS(e, t13) {
        return this.createElement(t13);
    }
    createTextNode(e19) {
        return (0, o.escapeHtml)(e19);
    }
    querySelector(e) {}
}
s.DocumentSSR = DocumentSSR;
const documentSSR = ()=>new DocumentSSR
;
s.documentSSR = documentSSR;
var i7 = {};
Object.defineProperty(i7, "__esModule", {
    value: true
});
i7.h = i7._render = i7.render = i7.hydrate = i7.appendChildren = i7.strToHash = i7.removeAllChildNodes = i7.tick = i7.isSSR = void 0;
const a8 = s;
const isSSR = ()=>"undefined" !== typeof _nano && true === _nano.isSSR
;
i7.isSSR = isSSR;
i7.tick = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout;
const removeAllChildNodes = (e20)=>{
    while(e20.firstChild)e20.removeChild(e20.firstChild);
};
i7.removeAllChildNodes = removeAllChildNodes;
const strToHash = (e21)=>{
    let t14 = 0;
    for(let n5 = 0; n5 < e21.length; n5++){
        const r4 = e21.charCodeAt(n5);
        t14 = (t14 << 5) - t14 + r4;
        t14 |= 0;
    }
    return Math.abs(t14).toString(32);
};
i7.strToHash = strToHash;
const appendChildren = (e22, t15, n6 = true)=>{
    if (Array.isArray(t15)) {
        "object" === typeof t15 && (t15 = Array.prototype.slice.call(t15));
        t15.forEach((t16)=>{
            if (Array.isArray(t16)) (0, i7.appendChildren)(e22, t16, n6);
            else {
                const r5 = (0, i7._render)(t16);
                "undefined" !== typeof r5 && (Array.isArray(r5) ? (0, i7.appendChildren)(e22, r5, n6) : (0, i7.isSSR)() && !n6 ? e22.appendChild(null == r5.nodeType ? r5.toString() : r5) : e22.appendChild(null == r5.nodeType ? document.createTextNode(r5.toString()) : r5));
            }
        });
    } else (0, i7.appendChildren)(e22, [
        t15
    ], n6);
};
i7.appendChildren = appendChildren;
const SVG = (e24)=>{
    const t17 = e24.children[0];
    const n7 = t17.attributes;
    if ((0, i7.isSSR)()) return t17;
    const r6 = hNS("svg");
    for(let e23 = n7.length - 1; e23 >= 0; e23--)r6.setAttribute(n7[e23].name, n7[e23].value);
    r6.innerHTML = t17.innerHTML;
    return r6;
};
const hydrate$1 = (e25, t18 = null, n8 = true)=>(0, i7.render)(e25, t18, n8)
;
i7.hydrate = hydrate$1;
const render$1 = (e26, t19 = null, n9 = true)=>{
    let r7 = (0, i7._render)(e26);
    if (Array.isArray(r7)) {
        r7 = r7.map((e27)=>(0, i7._render)(e27)
        );
        1 === r7.length && (r7 = r7[0]);
    }
    if (t19) {
        n9 && (0, i7.removeAllChildNodes)(t19);
        r7 && t19.id && t19.id === r7.id && t19.parentElement ? t19.parentElement.replaceChild(r7, t19) : Array.isArray(r7) ? r7.forEach((e28)=>{
            (0, i7.appendChildren)(t19, (0, i7._render)(e28));
        }) : (0, i7.appendChildren)(t19, (0, i7._render)(r7));
        return t19;
    }
    return (0, i7.isSSR)() && !Array.isArray(r7) ? [
        r7
    ] : r7;
};
i7.render = render$1;
const _render = (e29)=>{
    if ("undefined" === typeof e29) return [];
    if (null == e29) return [];
    if (false === e29) return [];
    if ("string" === typeof e29) return e29;
    if ("number" === typeof e29) return e29.toString();
    if (e29.tagName && "svg" === e29.tagName.toLowerCase()) return SVG({
        children: [
            e29
        ]
    });
    if (e29.tagName) return e29;
    if (e29 && e29.component && e29.component.isClass) return renderClassComponent(e29);
    if (e29.isClass) return renderClassComponent({
        component: e29,
        props: {}
    });
    if (e29.component && "function" === typeof e29.component) return renderFunctionalComponent(e29);
    if (Array.isArray(e29)) return e29.map((e30)=>(0, i7._render)(e30)
    ).flat();
    if ("function" === typeof e29 && !e29.isClass) return (0, i7._render)(e29());
    if (e29.component && e29.component.tagName && "string" === typeof e29.component.tagName) return (0, i7._render)(e29.component);
    if (Array.isArray(e29.component)) return (0, i7._render)(e29.component);
    if (e29.component) return (0, i7._render)(e29.component);
    if ("object" === typeof e29) return [];
    console.warn("Something unexpected happened with:", e29);
};
i7._render = _render;
const renderFunctionalComponent = (e31)=>{
    const { component: t20 , props: n10  } = e31;
    return (0, i7._render)(t20(n10));
};
const renderClassComponent = (e32)=>{
    const { component: t21 , props: n11  } = e32;
    const r8 = (0, i7.strToHash)(t21.toString());
    t21.prototype._getHash = ()=>r8
    ;
    const s1 = new t21(n11);
    (0, i7.isSSR)() || s1.willMount();
    let o1 = s1.render();
    o1 = (0, i7._render)(o1);
    s1.elements = o1;
    n11 && n11.ref && n11.ref(s1);
    (0, i7.isSSR)() || (0, i7.tick)(()=>{
        s1._didMount();
    });
    return o1;
};
const hNS = (e33)=>document.createElementNS("http://www.w3.org/2000/svg", e33)
;
const h$1 = (e35, t22, ...n12)=>{
    if ((0, i7.isSSR)() && "string" === typeof e35 && e35.includes("-") && _nano.customElements.has(e35)) {
        const r9 = _nano.customElements.get(e35);
        const s2 = (0, i7._render)({
            component: r9,
            props: Object.assign(Object.assign({}, t22), {
                children: n12
            })
        });
        const o2 = s2.toString().match(/^<(?<tag>[a-z]+)>(.*)<\/\k<tag>>$/);
        if (o2) {
            const e36 = new a8.HTMLElementSSR(o2[1]);
            e36.innerText = o2[2];
            function replacer(e37, t23, n, r) {
                return e37.replace(t23, "");
            }
            e36.innerText = e36.innerText.replace(/<\w+[^>]*(\s(on\w*)="[^"]*")/gm, replacer);
            return e36;
        }
        return "COULD NOT RENDER WEB-COMPONENT";
    }
    if ("string" !== typeof e35) return {
        component: e35,
        props: Object.assign(Object.assign({}, t22), {
            children: n12
        })
    };
    let r10;
    const s3 = "svg" === e35 ? hNS("svg") : document.createElement(e35);
    const isEvent = (e38, t24)=>0 === t24.indexOf("on") && (!!e38.ssr || "object" === typeof e38[t24] || "function" === typeof e38[t24])
    ;
    for(const e34 in t22){
        if ("style" === e34 && "object" === typeof t22[e34]) {
            const n13 = Object.keys(t22[e34]).map((n16)=>`${n16}:${t22[e34][n16]}`
            ).join(";").replace(/[A-Z]/g, (e39)=>`-${e39.toLowerCase()}`
            );
            t22[e34] = `${n13};`;
        }
        if ("ref" === e34) r10 = t22[e34];
        else if (isEvent(s3, e34.toLowerCase())) s3.addEventListener(e34.toLowerCase().substring(2), (n17)=>t22[e34](n17)
        );
        else if ("dangerouslySetInnerHTML" === e34 && t22[e34].__html) if ((0, i7.isSSR)()) s3.innerHTML = t22[e34].__html;
        else {
            const n18 = document.createElement("fragment");
            n18.innerHTML = t22[e34].__html;
            s3.appendChild(n18);
        }
        else if ("innerHTML" === e34 && t22[e34].__dangerousHtml) if ((0, i7.isSSR)()) s3.innerHTML = t22[e34].__dangerousHtml;
        else {
            const n19 = document.createElement("fragment");
            n19.innerHTML = t22[e34].__dangerousHtml;
            s3.appendChild(n19);
        }
        else /className/i.test(e34) ? console.warn('You can use "class" instead of "className".') : "undefined" !== typeof t22[e34] && s3.setAttribute(e34, t22[e34]);
    }
    const o3 = ![
        "noscript",
        "script",
        "style"
    ].includes(e35);
    (0, i7.appendChildren)(s3, n12, o3);
    r10 && r10(s3);
    return s3;
};
i7.h = h$1;
var c = {};
Object.defineProperty(c, "__esModule", {
    value: true
});
c._clearState = c._state = void 0;
c._state = new Map;
const _clearState = ()=>{
    c._state.clear();
};
c._clearState = _clearState;
var l = {};
Object.defineProperty(l, "__esModule", {
    value: true
});
l.Component = void 0;
const u = n;
const d = i7;
const h = c;
class Component$1 {
    constructor(e40){
        this._elements = [];
        this._skipUnmount = false;
        this._hasUnmounted = false;
        this.props = e40 || {};
        this.id = this._getHash();
    }
    static get isClass() {
        return true;
    }
    get isClass() {
        return true;
    }
    setState(e41, t25 = false) {
        const n20 = "object" === typeof e41 && null !== e41;
        n20 && void 0 !== this.state ? this.state = Object.assign(Object.assign({}, this.state), e41) : this.state = e41;
        t25 && this.update();
    }
    set state(e42) {
        h._state.set(this.id, e42);
    }
    get state() {
        return h._state.get(this.id);
    }
    set initState(e43) {
        void 0 === this.state && (this.state = e43);
    }
    get elements() {
        return this._elements || [];
    }
    set elements(e44) {
        Array.isArray(e44) || (e44 = [
            e44
        ]);
        e44.forEach((e45)=>{
            this._elements.push(e45);
        });
    }
    _addNodeRemoveListener() {
        /^[^{]+{\s+}$/gm.test(this.didUnmount.toString()) || (0, u.onNodeRemove)(this.elements[0], ()=>{
            this._skipUnmount || this._didUnmount();
        });
    }
    _didMount() {
        this._addNodeRemoveListener();
        this.didMount();
    }
    _didUnmount() {
        if (!this._hasUnmounted) {
            this.didUnmount();
            this._hasUnmounted = true;
        }
    }
    willMount() {}
    didMount() {}
    didUnmount() {}
    render(e) {}
    update(e46) {
        this._skipUnmount = true;
        const t26 = [
            ...this.elements
        ];
        this._elements = [];
        let n21 = this.render(e46);
        n21 = (0, d._render)(n21);
        this.elements = n21;
        const r11 = t26[0].parentElement;
        r11 || console.warn("Component needs a parent element to get updated!");
        this.elements.forEach((e47)=>{
            r11 && r11.insertBefore(e47, t26[0]);
        });
        t26.forEach((e48)=>{
            e48.remove();
            e48 = null;
        });
        this._addNodeRemoveListener();
        (0, d.tick)(()=>{
            this._skipUnmount = false;
            this.elements[0].isConnected || this._didUnmount();
        });
    }
    _getHash() {}
}
l.Component = Component$1;
var p = {};
Object.defineProperty(p, "__esModule", {
    value: true
});
p.Helmet = void 0;
const f = l;
const m = i7;
class Helmet$1 extends f.Component {
    static SSR(e50) {
        const t28 = /(<helmet\b[^>]*>)((.|\n)*?)(<\/helmet>)/gm;
        const n22 = [];
        const r12 = [];
        if ("undefined" !== typeof document && document.head) {
            let e49 = [];
            e49 = [].slice.call(document.head.children);
            for(let t27 = 0; t27 < e49.length; t27++)-1 === n22.indexOf(e49[t27]) && n22.push(e49[t27]);
        }
        let s4;
        while(null !== (s4 = t28.exec(e50))){
            const e51 = s4[1];
            const t29 = s4[2];
            const o4 = e51.includes('data-placement="head"');
            o4 && !n22.includes(t29) ? n22.push(t29) : o4 || r12.includes(t29) || r12.push(t29);
        }
        const o5 = e50.replace(t28, "");
        return {
            body: o5,
            head: n22,
            footer: r12
        };
    }
    didMount() {
        this.props.children.forEach((e53)=>{
            var t30, n23, r14, s5;
            const o6 = this.props.footer ? document.body : document.head;
            const i1 = e53.tagName;
            let a1 = [];
            a1.push(e53.innerText);
            for(let r13 = 0; r13 < e53.attributes.length; r13++){
                a1.push(null === (t30 = e53.attributes.item(r13)) || void 0 === t30 ? void 0 : t30.name.toLowerCase());
                a1.push(null === (n23 = e53.attributes.item(r13)) || void 0 === n23 ? void 0 : n23.value.toLowerCase());
            }
            if ("HTML" === i1 || "BODY" === i1) {
                const e54 = document.getElementsByTagName(i1)[0];
                for(let t31 = 1; t31 < a1.length; t31 += 2)e54.setAttribute(a1[t31], a1[t31 + 1]);
                return;
            }
            if ("TITLE" === i1) {
                const t32 = document.getElementsByTagName("TITLE");
                if (t32.length > 0) {
                    const n24 = e53;
                    t32[0].text = n24.text;
                } else {
                    const t33 = (0, m.h)("title", null, e53.innerHTML);
                    (0, m.appendChildren)(o6, [
                        t33
                    ], false);
                }
                return;
            }
            let c1 = false;
            a1 = a1.sort();
            const l1 = document.getElementsByTagName(i1);
            for(let e52 = 0; e52 < l1.length; e52++){
                let t34 = [];
                t34.push(l1[e52].innerText);
                for(let n25 = 0; n25 < l1[e52].attributes.length; n25++){
                    t34.push(null === (r14 = l1[e52].attributes.item(n25)) || void 0 === r14 ? void 0 : r14.name.toLowerCase());
                    t34.push(null === (s5 = l1[e52].attributes.item(n25)) || void 0 === s5 ? void 0 : s5.value.toLowerCase());
                }
                t34 = t34.sort();
                a1.length > 0 && t34.length > 0 && JSON.stringify(a1) === JSON.stringify(t34) && (c1 = true);
            }
            c1 || (0, m.appendChildren)(o6, [
                e53
            ], false);
        });
    }
    render() {
        const e55 = this.props.footer ? "footer" : "head";
        return (0, m.isSSR)() ? (0, m.h)("helmet", {
            "data-ssr": true,
            "data-placement": e55
        }, this.props.children) : [];
    }
}
p.Helmet = Helmet$1;
var g = {};
var b = g && g.__rest || function(e56, t35) {
    var n26 = {};
    for(var r15 in e56)Object.prototype.hasOwnProperty.call(e56, r15) && t35.indexOf(r15) < 0 && (n26[r15] = e56[r15]);
    if (null != e56 && "function" === typeof Object.getOwnPropertySymbols) {
        var s6 = 0;
        for(r15 = Object.getOwnPropertySymbols(e56); s6 < r15.length; s6++)t35.indexOf(r15[s6]) < 0 && Object.prototype.propertyIsEnumerable.call(e56, r15[s6]) && (n26[r15[s6]] = e56[r15[s6]]);
    }
    return n26;
};
Object.defineProperty(g, "__esModule", {
    value: true
});
g.Img = void 0;
const y = l;
const v = i7;
class Img$1 extends y.Component {
    constructor(e57){
        super(e57);
        const { src: t36 , key: n27  } = e57;
        this.id = `${(0, v.strToHash)(t36)}-${(0, v.strToHash)(JSON.stringify(e57))}`;
        n27 && (this.id += `key-${n27}`);
        this.state || this.setState({
            isLoaded: false,
            image: void 0
        });
    }
    didMount() {
        const e58 = this.props, { lazy: t37 = true , placeholder: n , children: r , key: s , ref: o  } = e58, i2 = b(e58, [
            "lazy",
            "placeholder",
            "children",
            "key",
            "ref"
        ]);
        if ("boolean" === typeof t37 && false === t37) return;
        const a2 = new IntersectionObserver((e59, t38)=>{
            e59.forEach((e60)=>{
                if (e60.isIntersecting) {
                    t38.disconnect();
                    this.state.image = (0, v.h)("img", Object.assign({}, i2));
                    if (this.state.image.complete) {
                        this.state.isLoaded = true;
                        this.update();
                    } else this.state.image.onload = ()=>{
                        this.state.isLoaded = true;
                        this.update();
                    };
                }
            });
        }, {
            threshold: [
                0,
                1
            ]
        });
        a2.observe(this.elements[0]);
    }
    render() {
        const e61 = this.props, { src: t39 , placeholder: n28 , children: r , lazy: s7 = true , key: o , ref: i  } = e61, a31 = b(e61, [
            "src",
            "placeholder",
            "children",
            "lazy",
            "key",
            "ref"
        ]);
        if ("boolean" === typeof s7 && false === s7) {
            this.state.image = (0, v.h)("img", Object.assign({
                src: t39
            }, a31));
            return this.state.image;
        }
        if (this.state.isLoaded) return this.state.image;
        if (n28 && "string" === typeof n28) return (0, v.h)("img", Object.assign({
            src: n28
        }, a31));
        if (n28 && "function" === typeof n28) return n28();
        {
            const e62 = {};
            a31.width && (e62.width = `${a31.width}px`);
            a31.height && (e62.height = `${a31.height}px`);
            const { width: t , height: n  } = a31, r16 = b(a31, [
                "width",
                "height"
            ]);
            return (0, v.h)("div", Object.assign({
                style: e62
            }, r16));
        }
    }
}
g.Img = Img$1;
var _ = {};
Object.defineProperty(_, "__esModule", {
    value: true
});
_.Fragment = void 0;
const Fragment$1 = (e63)=>e63.children
;
_.Fragment = Fragment$1;
var S = {};
var O = S && S.__rest || function(e64, t40) {
    var n29 = {};
    for(var r17 in e64)Object.prototype.hasOwnProperty.call(e64, r17) && t40.indexOf(r17) < 0 && (n29[r17] = e64[r17]);
    if (null != e64 && "function" === typeof Object.getOwnPropertySymbols) {
        var s8 = 0;
        for(r17 = Object.getOwnPropertySymbols(e64); s8 < r17.length; s8++)t40.indexOf(r17[s8]) < 0 && Object.prototype.propertyIsEnumerable.call(e64, r17[s8]) && (n29[r17[s8]] = e64[r17[s8]]);
    }
    return n29;
};
Object.defineProperty(S, "__esModule", {
    value: true
});
S.Link = void 0;
const j = l;
const w = p;
const C = i7;
const x = _;
class Link$2 extends j.Component {
    prefetchOnHover() {
        this.elements[0].addEventListener("mouseover", ()=>this.addPrefetch()
        , {
            once: true
        });
    }
    prefetchOnVisible() {
        const e65 = new IntersectionObserver((e66, t41)=>{
            e66.forEach((e67)=>{
                if (e67.isIntersecting) {
                    t41.disconnect();
                    this.addPrefetch();
                }
            });
        }, {
            threshold: [
                0,
                1
            ]
        });
        e65.observe(this.elements[0]);
    }
    addPrefetch() {
        let e68 = false;
        const t42 = document.getElementsByTagName("link");
        for(let n30 = 0; n30 < t42.length; n30++)"prefetch" === t42[n30].getAttribute("rel") && t42[n30].getAttribute("href") === this.props.href && (e68 = true);
        if (!e68) {
            const e69 = (0, C.h)("link", {
                rel: "prefetch",
                href: this.props.href,
                as: "document"
            });
            document.head.appendChild(e69);
        }
    }
    didMount() {
        const { href: e70 , prefetch: t43 , delay: n31 = 0 , back: r18 = false  } = this.props;
        r18 && this.elements[0].addEventListener("click", (e71)=>{
            e71.preventDefault();
            const t44 = e71.target;
            t44.href === document.referrer ? window.history.back() : window.location.href = t44.href;
        });
        n31 > 0 && this.elements[0].addEventListener("click", (t45)=>{
            t45.preventDefault();
            setTimeout(()=>window.location.href = e70
            , n31);
        });
        t43 && ("hover" === t43 ? this.prefetchOnHover() : "visible" === t43 ? this.prefetchOnVisible() : this.addPrefetch());
    }
    render() {
        const e72 = this.props, { children: t46 , prefetch: n32 , back: r , ref: s  } = e72, o7 = O(e72, [
            "children",
            "prefetch",
            "back",
            "ref"
        ]);
        this.props.href || console.warn('Please add "href" to <Link>');
        1 !== t46.length && console.warn("Please add ONE child to <Link> (<Link>child</Link>)");
        const i3 = (0, C.h)("a", Object.assign({}, o7), ...t46);
        if (true !== n32 || "undefined" !== typeof window && window.document) return i3;
        {
            const e73 = (0, C.h)("link", {
                rel: "prefetch",
                href: this.props.href,
                as: "document"
            });
            const t47 = (0, C.h)(w.Helmet, null, e73);
            return (0, C.h)(x.Fragment, null, [
                t47,
                i3
            ]);
        }
    }
}
S.Link = Link$2;
var P = {};
var E = P && P.__rest || function(e74, t48) {
    var n33 = {};
    for(var r19 in e74)Object.prototype.hasOwnProperty.call(e74, r19) && t48.indexOf(r19) < 0 && (n33[r19] = e74[r19]);
    if (null != e74 && "function" === typeof Object.getOwnPropertySymbols) {
        var s9 = 0;
        for(r19 = Object.getOwnPropertySymbols(e74); s9 < r19.length; s9++)t48.indexOf(r19[s9]) < 0 && Object.prototype.propertyIsEnumerable.call(e74, r19[s9]) && (n33[r19[s9]] = e74[r19[s9]]);
    }
    return n33;
};
Object.defineProperty(P, "__esModule", {
    value: true
});
P.Listener = P.Link = P.to = P.Route = P.Routes = P.Switch = P.matchPath = void 0;
const M = l;
const R = i7;
const L = [];
const register = (e75)=>L.push(e75)
;
const unregister = (e76)=>L.splice(L.indexOf(e76), 1)
;
const historyPush = (e77)=>{
    window.history.pushState({}, "", e77);
    L.forEach((e78)=>e78.handleChanges()
    );
    window.dispatchEvent(new Event("pushstate"));
};
const historyReplace = (e79)=>{
    window.history.replaceState({}, "", e79);
    L.forEach((e80)=>e80.handleChanges()
    );
    window.dispatchEvent(new Event("replacestate"));
};
const matchPath = (e81, t49)=>{
    const { exact: n35 = false , regex: r20  } = t49;
    let { path: s10  } = t49;
    if (!s10) return {
        path: null,
        url: e81,
        isExact: true
    };
    let o8;
    let i4 = {};
    if (s10.includes("/:")) {
        const t50 = s10.split("/");
        const n34 = e81.split("/");
        t50.forEach((e82, s)=>{
            if (/^:/.test(e82)) {
                const o9 = e82.slice(1);
                const a5 = n34[s];
                if (r20 && r20[o9]) {
                    const e83 = r20[o9].test(a5);
                    if (!e83) return null;
                }
                i4 = Object.assign(Object.assign({}, i4), {
                    [o9]: a5
                });
                t50[s] = n34[s];
            }
        });
        s10 = t50.join("/");
    }
    "*" === s10 && (o8 = [
        e81
    ]);
    o8 || (o8 = new RegExp(`^${s10}`).exec(e81));
    if (!o8) return null;
    const a4 = o8[0];
    const c2 = e81 === a4;
    return n35 && !c2 ? null : {
        path: s10,
        url: a4,
        isExact: c2,
        params: i4
    };
};
P.matchPath = matchPath;
class Switch extends M.Component {
    constructor(){
        super(...arguments);
        this.index = 0;
        this.path = "";
        this.match = {
            index: -1,
            path: ""
        };
    }
    didMount() {
        window.addEventListener("popstate", this.handleChanges.bind(this));
        register(this);
    }
    didUnmount() {
        window.removeEventListener("popstate", this.handleChanges.bind(this));
        unregister(this);
    }
    handleChanges() {
        this.findChild();
        this.shouldUpdate() && this.update();
    }
    findChild() {
        this.match = {
            index: -1,
            path: ""
        };
        for(let e84 = 0; e84 < this.props.children.length; e84++){
            const t51 = this.props.children[e84];
            const { path: n36 , exact: r21 , regex: s11  } = t51.props;
            const o10 = (0, P.matchPath)((0, R.isSSR)() ? _nano.location.pathname : window.location.pathname, {
                path: n36,
                exact: r21,
                regex: s11
            });
            if (o10) {
                this.match.index = e84;
                this.match.path = n36;
                return;
            }
        }
    }
    shouldUpdate() {
        return this.path !== this.match.path || this.index !== this.match.index;
    }
    render() {
        this.findChild();
        const e85 = this.props.children[this.match.index];
        if (-1 === this.match.index) {
            this.path = "";
            this.index = 0;
        }
        if (e85) {
            const { path: t52  } = e85.props;
            this.path = t52;
            this.index = this.match.index;
            const n37 = (0, R._render)(e85);
            return (0, R.h)("div", {}, (0, R._render)(n37));
        }
        return this.props.fallback ? (0, R.h)("div", {}, (0, R._render)(this.props.fallback)) : (0, R.h)("div", {}, "not found");
    }
}
P.Switch = Switch;
class Routes extends Switch {
}
P.Routes = Routes;
const Route = ({ path: e86 , regex: t53 , children: n38  })=>{
    n38.forEach((n39)=>{
        n39.props && (n39.props = Object.assign(Object.assign({}, n39.props), {
            route: {
                path: e86,
                regex: t53
            }
        }));
    });
    return n38;
};
P.Route = Route;
const to = (e87, t54 = false)=>{
    t54 ? historyReplace(e87) : historyPush(e87);
};
P.to = to;
const Link$1 = (e88)=>{
    var { to: t55 , replace: n40 , children: r22  } = e88, s12 = E(e88, [
        "to",
        "replace",
        "children"
    ]);
    const handleClick = (e89)=>{
        e89.preventDefault();
        n40 ? historyReplace(t55) : historyPush(t55);
    };
    return (0, R.h)("a", Object.assign({
        href: t55,
        onClick: (e90)=>handleClick(e90)
    }, s12), r22);
};
P.Link = Link$1;
class CListener {
    constructor(){
        this._listeners = new Map;
        if ((0, R.isSSR)()) return;
        this._route = window.location.pathname;
        const event = ()=>{
            const e91 = window.location.pathname;
            this._listeners.forEach((t56)=>{
                t56(e91, this._route);
            });
            this._route = e91;
        };
        window.addEventListener("pushstate", event);
        window.addEventListener("replacestate", event);
    }
    use() {
        const e92 = Math.random().toString(36).substring(2);
        return {
            subscribe: (t57)=>{
                this._listeners.set(e92, t57);
            },
            cancel: ()=>{
                this._listeners.has(e92) && this._listeners.delete(e92);
            }
        };
    }
}
let k;
const Listener = ()=>{
    k || (k = new CListener);
    return k;
};
P.Listener = Listener;
var T = {};
var N = T && T.__awaiter || function(e93, t58, n41, r23) {
    function adopt(e94) {
        return e94 instanceof n41 ? e94 : new n41(function(t59) {
            t59(e94);
        });
    }
    return new (n41 || (n41 = Promise))(function(n42, s13) {
        function fulfilled(e95) {
            try {
                step(r23.next(e95));
            } catch (e96) {
                s13(e96);
            }
        }
        function rejected(e97) {
            try {
                step(r23.throw(e97));
            } catch (e98) {
                s13(e98);
            }
        }
        function step(e99) {
            e99.done ? n42(e99.value) : adopt(e99.value).then(fulfilled, rejected);
        }
        step((r23 = r23.apply(e93, t58 || [])).next());
    });
};
var I = T && T.__rest || function(e100, t60) {
    var n43 = {};
    for(var r24 in e100)Object.prototype.hasOwnProperty.call(e100, r24) && t60.indexOf(r24) < 0 && (n43[r24] = e100[r24]);
    if (null != e100 && "function" === typeof Object.getOwnPropertySymbols) {
        var s14 = 0;
        for(r24 = Object.getOwnPropertySymbols(e100); s14 < r24.length; s14++)t60.indexOf(r24[s14]) < 0 && Object.prototype.propertyIsEnumerable.call(e100, r24[s14]) && (n43[r24[s14]] = e100[r24[s14]]);
    }
    return n43;
};
Object.defineProperty(T, "__esModule", {
    value: true
});
T.Suspense = void 0;
const H = l;
const $ = i7;
class Suspense$1 extends H.Component {
    constructor(e101){
        super(e101);
        this.ready = false;
        const t61 = this.props, { children: n , fallback: r , cache: s = false  } = t61, o11 = I(t61, [
            "children",
            "fallback",
            "cache"
        ]);
        const i5 = JSON.stringify(o11, function(e, t62) {
            return "function" === typeof t62 ? `${t62}` : t62;
        });
        this.id = (0, $.strToHash)(JSON.stringify(i5));
    }
    didMount() {
        return N(this, void 0, void 0, function*() {
            const e102 = this.props, { children: t , fallback: n , cache: r25 = false  } = e102, s15 = I(e102, [
                "children",
                "fallback",
                "cache"
            ]);
            r25 && (this.initState = {});
            if (this.loadFromCache(r25)) return;
            const o12 = Object.values(s15).map((e103)=>e103()
            );
            const i6 = yield Promise.all(o12);
            const a6 = this.prepareData(s15, i6, r25);
            this.addDataToChildren(a6);
            this.ready = true;
            this.update();
        });
    }
    ssr() {
        const e104 = this.props, { children: t , fallback: n , cache: r = false  } = e104, s16 = I(e104, [
            "children",
            "fallback",
            "cache"
        ]);
        const o13 = Object.values(s16).map((e105)=>e105()
        );
        const i7 = this.prepareData(s16, o13, false);
        this.addDataToChildren(i7);
    }
    loadFromCache(e106) {
        const t63 = this.state && e106 && Object.keys(this.state).length > 0;
        if (t63) {
            this.addDataToChildren(this.state);
            this.ready = true;
        }
        return t63;
    }
    prepareData(e107, t64, n44) {
        const r26 = Object.keys(e107).reduce((e108, r27, s)=>{
            n44 && (this.state = Object.assign(Object.assign({}, this.state), {
                [r27]: t64[s]
            }));
            return Object.assign(Object.assign({}, e108), {
                [r27]: t64[s]
            });
        }, {});
        return r26;
    }
    addDataToChildren(e109) {
        this.props.children.forEach((t65)=>{
            t65.props && (t65.props = Object.assign(Object.assign({}, t65.props), e109));
        });
    }
    render() {
        if ((0, $.isSSR)()) {
            this.ssr();
            return this.props.children;
        }
        {
            const { cache: e110 = false  } = this.props;
            this.loadFromCache(e110);
            return this.ready ? this.props.children : this.props.fallback;
        }
    }
}
T.Suspense = Suspense$1;
var A = {};
Object.defineProperty(A, "__esModule", {
    value: true
});
A.Visible = void 0;
const V = i7;
const D = l;
class Visible$1 extends D.Component {
    constructor(){
        super(...arguments);
        this.isVisible = false;
    }
    didMount() {
        const e111 = new IntersectionObserver((e112, t66)=>{
            e112.forEach((e113)=>{
                if (e113.isIntersecting) {
                    t66.disconnect();
                    this.isVisible = true;
                    this.update();
                }
            });
        }, {
            threshold: [
                0,
                1
            ]
        });
        e111.observe(this.elements[0]);
    }
    render() {
        if (this.isVisible) {
            this.props.onVisible && this.props.onVisible();
            return (0, V.render)(this.props.component || this.props.children[0]);
        }
        return (0, V.h)("div", {
            "data-visible": false,
            visibility: "hidden"
        });
    }
}
A.Visible = Visible$1;
var z = {};
var U = z && z.__createBinding || (Object.create ? function(e114, t67, n45, r28) {
    void 0 === r28 && (r28 = n45);
    Object.defineProperty(e114, r28, {
        enumerable: true,
        get: function() {
            return t67[n45];
        }
    });
} : function(e115, t68, n46, r29) {
    void 0 === r29 && (r29 = n46);
    e115[r29] = t68[n46];
});
var F = z && z.__setModuleDefault || (Object.create ? function(e116, t69) {
    Object.defineProperty(e116, "default", {
        enumerable: true,
        value: t69
    });
} : function(e117, t70) {
    e117.default = t70;
});
var B = z && z.__importStar || function(e118) {
    if (e118 && e118.__esModule) return e118;
    var t71 = {};
    if (null != e118) for(var n47 in e118)"default" !== n47 && Object.prototype.hasOwnProperty.call(e118, n47) && U(t71, e118, n47);
    F(t71, e118);
    return t71;
};
Object.defineProperty(z, "__esModule", {
    value: true
});
z.Visible = z.Suspense = z.Router = z.Link = z.Img = z.Helmet = void 0;
var J = p;
Object.defineProperty(z, "Helmet", {
    enumerable: true,
    get: function() {
        return J.Helmet;
    }
});
var Z = g;
Object.defineProperty(z, "Img", {
    enumerable: true,
    get: function() {
        return Z.Img;
    }
});
var q = S;
Object.defineProperty(z, "Link", {
    enumerable: true,
    get: function() {
        return q.Link;
    }
});
z.Router = B(P);
var W = T;
Object.defineProperty(z, "Suspense", {
    enumerable: true,
    get: function() {
        return W.Suspense;
    }
});
var Y = A;
Object.defineProperty(z, "Visible", {
    enumerable: true,
    get: function() {
        return Y.Visible;
    }
});
var X = {};
Object.defineProperty(X, "__esModule", {
    value: true
});
X.clearState = X.renderSSR = X.initSSR = void 0;
const G = i7;
const K = s;
const Q = c;
const ee = n;
const initGlobalVar = ()=>{
    const e119 = true === (0, ee.detectSSR)() || void 0;
    const t72 = {
        pathname: "/"
    };
    const n48 = e119 ? (0, K.documentSSR)() : window.document;
    globalThis._nano = {
        isSSR: e119,
        location: t72,
        document: n48,
        customElements: new Map
    };
};
initGlobalVar();
const initSSR = (e120 = "/")=>{
    _nano.location = {
        pathname: e120
    };
    globalThis.document = _nano.document = (0, G.isSSR)() ? (0, K.documentSSR)() : window.document;
};
X.initSSR = initSSR;
const renderSSR$1 = (e121, t73 = {})=>{
    const { pathname: n49 , clearState: r30 = true  } = t73;
    (0, X.initSSR)(n49);
    r30 && Q._state.clear();
    return (0, G.render)(e121, null, true).join("");
};
X.renderSSR = renderSSR$1;
const clearState = ()=>{
    Q._state.clear();
};
X.clearState = clearState;
var te = {};
Object.defineProperty(te, "__esModule", {
    value: true
});
te.MINI = void 0;
te.MINI = false;
var ne = {};
Object.defineProperty(ne, "__esModule", {
    value: true
});
ne.build = ne.evaluate = ne.treeify = void 0;
const re = te;
const se = 0;
const oe = 1;
const ie = 2;
const ae = 3;
const ce = 4;
const le = 5;
const ue = 6;
const de = 0;
const treeify = (e122, t74)=>{
    const _treeify = (e123)=>{
        let n51 = "";
        let r31 = null;
        const s17 = [];
        const o14 = [];
        for(let i8 = 1; i8 < e123.length; i8++){
            const a7 = e123[i8++];
            const c3 = e123[i8] ? t74[e123[i8++] - 1] : e123[++i8];
            if (a7 === 3) n51 = c3;
            else if (a7 === 4) {
                s17.push(c3);
                r31 = null;
            } else if (a7 === 5) {
                if (!r31) {
                    r31 = Object.create(null);
                    s17.push(r31);
                }
                r31[e123[++i8]] = [
                    c3
                ];
            } else a7 === 6 ? r31[e123[++i8]].push(c3) : a7 === 2 ? o14.push(_treeify(c3)) : a7 === 0 && o14.push(c3);
        }
        return {
            tag: n51,
            props: s17,
            children: o14
        };
    };
    const { children: n50  } = _treeify(e122);
    return n50.length > 1 ? n50 : n50[0];
};
ne.treeify = treeify;
const evaluate = (e124, t75, n52, r32)=>{
    let s18;
    t75[0] = 0;
    for(let o15 = 1; o15 < t75.length; o15++){
        const i9 = t75[o15++];
        const a8 = t75[o15] ? (t75[0] |= i9 ? 1 : 2, n52[t75[o15++]]) : t75[++o15];
        if (i9 === 3) r32[0] = a8;
        else if (i9 === 4) r32[1] = Object.assign(r32[1] || {}, a8);
        else if (i9 === 5) (r32[1] = r32[1] || {})[t75[++o15]] = a8;
        else if (i9 === 6) r32[1][t75[++o15]] += `${a8}`;
        else if (i9) {
            s18 = e124.apply(a8, (0, ne.evaluate)(e124, a8, n52, [
                "",
                null
            ]));
            r32.push(s18);
            if (a8[0]) t75[0] |= 2;
            else {
                t75[o15 - 2] = de;
                t75[o15] = s18;
            }
        } else r32.push(a8);
    }
    return r32;
};
ne.evaluate = evaluate;
const build = function(e125, ...t77) {
    const n53 = [
        e125,
        ...t77
    ];
    const r33 = this;
    let s19 = 1;
    let o16 = "";
    let i10 = "";
    let a9 = [
        0
    ];
    let c4;
    let l2;
    const commit = (e126)=>{
        if (s19 === 1 && (e126 || (o16 = o16.replace(/^\s*\n\s*|\s*\n\s*$/g, "")))) re.MINI ? a9.push(e126 ? n53[e126] : o16) : a9.push(0, e126, o16);
        else if (s19 === 3 && (e126 || o16)) {
            re.MINI ? a9[1] = e126 ? n53[e126] : o16 : a9.push(3, e126, o16);
            s19 = ie;
        } else if (s19 === 2 && "..." === o16 && e126) re.MINI ? a9[2] = Object.assign(a9[2] || {}, n53[e126]) : a9.push(4, e126, 0);
        else if (s19 === 2 && o16 && !e126) re.MINI ? (a9[2] = a9[2] || {})[o16] = true : a9.push(5, 0, true, o16);
        else if (s19 >= 5) if (re.MINI) if (s19 === 5) {
            (a9[2] = a9[2] || {})[l2] = e126 ? o16 ? o16 + n53[e126] : n53[e126] : o16;
            s19 = ue;
        } else (e126 || o16) && (a9[2][l2] += e126 ? o16 + n53[e126] : o16);
        else {
            if (o16 || !e126 && s19 === 5) {
                a9.push(s19, 0, o16, l2);
                s19 = ue;
            }
            if (e126) {
                a9.push(s19, e126, 0, l2);
                s19 = ue;
            }
        }
        o16 = "";
    };
    for(let t76 = 0; t76 < e125.length; t76++){
        if (t76) {
            s19 === 1 && commit();
            commit(t76);
        }
        for(let n54 = 0; n54 < e125[t76].length; n54++){
            c4 = e125[t76][n54];
            if (s19 === 1) if ("<" === c4) {
                commit();
                a9 = re.MINI ? [
                    a9,
                    "",
                    null
                ] : [
                    a9
                ];
                s19 = ae;
            } else o16 += c4;
            else if (s19 === 4) if ("--" === o16 && ">" === c4) {
                s19 = oe;
                o16 = "";
            } else o16 = c4 + o16[0];
            else if (i10) c4 === i10 ? i10 = "" : o16 += c4;
            else if ('"' === c4 || "'" === c4) i10 = c4;
            else if (">" === c4) {
                commit();
                s19 = oe;
            } else if (s19) if ("=" === c4) {
                s19 = le;
                l2 = o16;
                o16 = "";
            } else if ("/" === c4 && (s19 < 5 || ">" === e125[t76][n54 + 1])) {
                commit();
                s19 === 3 && (a9 = a9[0]);
                s19 = a9;
                re.MINI ? (a9 = a9[0]).push(r33(...s19.slice(1))) : (a9 = a9[0]).push(2, 0, s19);
                s19 = se;
            } else if (" " === c4 || "\t" === c4 || "\n" === c4 || "\r" === c4) {
                commit();
                s19 = ie;
            } else o16 += c4;
            else ;
            if (s19 === 3 && "!--" === o16) {
                s19 = ce;
                a9 = a9[0];
            }
        }
    }
    commit();
    return re.MINI ? a9.length > 2 ? a9.slice(1) : a9[1] : a9;
};
ne.build = build;
var be = {};
Object.defineProperty(be, "__esModule", {
    value: true
});
const ye = te;
const ve = ne;
const _e = new Map;
const regular = function(e127) {
    let t78 = _e.get(this);
    if (!t78) {
        t78 = new Map;
        _e.set(this, t78);
    }
    t78 = (0, ve.evaluate)(this, t78.get(e127) || (t78.set(e127, t78 = (0, ve.build)(e127)), t78), arguments, []);
    return t78.length > 1 ? t78 : t78[0];
};
be.default = ye.MINI ? ve.build : regular;
var Se = {};
var Oe = Se && Se.__importDefault || function(e128) {
    return e128 && e128.__esModule ? e128 : {
        default: e128
    };
};
Object.defineProperty(Se, "__esModule", {
    value: true
});
const je = Oe(be);
Se.default = je.default;
var we = {};
var Ce = we && we.__importDefault || function(e129) {
    return e129 && e129.__esModule ? e129 : {
        default: e129
    };
};
Object.defineProperty(we, "__esModule", {
    value: true
});
we.jsx = void 0;
const xe = i7;
const Pe = Ce(Se);
const Ee = Pe.default.bind(xe.h);
we.jsx = Ee;
var Me = {};
Object.defineProperty(Me, "__esModule", {
    value: true
});
Me.hydrateLazy = void 0;
const Re = i7;
const Le = A;
const hydrateLazy$1 = (e130, t79 = null, n55 = true)=>{
    const r34 = (0, Re.h)(Le.Visible, null, e130);
    return (0, Re.hydrate)(r34, t79, n55);
};
Me.hydrateLazy = hydrateLazy$1;
var ke = {};
Object.defineProperty(ke, "__esModule", {
    value: true
});
ke.Store = void 0;
const Te = i7;
class Store$1 {
    constructor(e131, t80 = "", n56 = "memory"){
        this._listeners = new Map;
        (0, Te.isSSR)() && (n56 = "memory");
        this._id = t80;
        this._storage = n56;
        this._state = this._prevState = e131;
        if ("memory" === n56 || !n56) return;
        const r35 = "local" === n56 ? localStorage : sessionStorage;
        const s20 = r35.getItem(this._id);
        s20 ? this._state = this._prevState = JSON.parse(s20) : r35.setItem(this._id, JSON.stringify(e131));
    }
    persist(e132) {
        if ("memory" === this._storage) return;
        const t81 = "local" === this._storage ? localStorage : sessionStorage;
        t81.setItem(this._id, JSON.stringify(e132));
    }
    clear() {
        this._state = this._prevState = void 0;
        "local" === this._storage ? localStorage.removeItem(this._id) : "session" === this._storage && sessionStorage.removeItem(this._id);
    }
    setState(e133) {
        this.state = e133;
    }
    set state(e134) {
        this._prevState = this._state;
        this._state = e134;
        this.persist(e134);
        this._listeners.forEach((e135)=>{
            e135(this._state, this._prevState);
        });
    }
    get state() {
        return this._state;
    }
    use() {
        const e136 = Math.random().toString(36).substring(2, 9);
        const t82 = this;
        return {
            get state () {
                return t82.state;
            },
            setState: (e137)=>{
                this.state = e137;
            },
            subscribe: (t83)=>{
                this._listeners.set(e136, t83);
            },
            cancel: ()=>{
                this._listeners.has(e136) && this._listeners.delete(e136);
            }
        };
    }
}
ke.Store = Store$1;
var Ne = {};
Object.defineProperty(Ne, "__esModule", {
    value: true
});
Ne.useContext = Ne.createContext = void 0;
const createContext$1 = (e138)=>{
    let t84 = e138;
    return {
        Provider: (e139)=>{
            e139.value && (t84 = e139.value);
            return e139.children;
        },
        Consumer: (e140)=>({
                component: e140.children[0](t84),
                props: Object.assign(Object.assign({}, e140), {
                    context: t84
                })
            })
        ,
        get: ()=>t84
        ,
        set: (e141)=>t84 = e141
    };
};
Ne.createContext = createContext$1;
const useContext$1 = (e142)=>{
    const t85 = e142;
    if (t85 && "function" === typeof t85.get) return t85.get();
};
Ne.useContext = useContext$1;
var Ie = {};
var He = Ie && Ie.__rest || function(e143, t86) {
    var n57 = {};
    for(var r36 in e143)Object.prototype.hasOwnProperty.call(e143, r36) && t86.indexOf(r36) < 0 && (n57[r36] = e143[r36]);
    if (null != e143 && "function" === typeof Object.getOwnPropertySymbols) {
        var s21 = 0;
        for(r36 = Object.getOwnPropertySymbols(e143); s21 < r36.length; s21++)t86.indexOf(r36[s21]) < 0 && Object.prototype.propertyIsEnumerable.call(e143, r36[s21]) && (n57[r36[s21]] = e143[r36[s21]]);
    }
    return n57;
};
Object.defineProperty(Ie, "__esModule", {
    value: true
});
Ie.withStyles = void 0;
const $e = i7;
const Ae = l;
const Ve = _;
const De = p;
const withStyles$1 = (...e144)=>(t87)=>{
        class _class extends Ae.Component {
            render() {
                const n58 = this.props, { children: r37  } = n58, s22 = He(n58, [
                    "children"
                ]);
                const o17 = [];
                e144.forEach((e145)=>{
                    var t89;
                    if ("string" === typeof e145) o17.push((0, $e.h)(De.Helmet, null, (0, $e.h)("style", null, e145)));
                    else if ("function" === typeof e145) {
                        const t88 = e145();
                        "string" === typeof t88 && o17.push((0, $e.h)(De.Helmet, null, (0, $e.h)("style", null, t88)));
                    } else if ("object" === typeof e145) {
                        const n59 = null === (t89 = e145.toString) || void 0 === t89 ? void 0 : t89.call(e145);
                        "string" === typeof n59 && o17.push((0, $e.h)(De.Helmet, null, (0, $e.h)("style", null, n59)));
                    }
                });
                const i11 = r37 && r37.length > 0 ? (0, $e.h)(t87, Object.assign({}, s22), r37) : (0, $e.h)(t87, Object.assign({}, this.props));
                return (0, $e.h)(Ve.Fragment, null, ...o17, i11);
            }
        }
        return _class;
    }
;
Ie.withStyles = withStyles$1;
var ze = {};
Object.defineProperty(ze, "__esModule", {
    value: true
});
ze.defineAsCustomElements = void 0;
const Ue = i7;
const defineAsCustomElementsSSR = (e146, t90, n = [], r = {})=>{
    /^[a-zA-Z0-9]+-[a-zA-Z0-9]+$/.test(t90) ? _nano.customElements.set(t90, e146) : console.log(`Error: WebComponent name "${t90}" is invalid.`);
};
const defineAsCustomElements$1 = function(e147, t91, n60, { mode: r38 = "closed" , delegatesFocus: s23 = false  } = {}) {
    (0, Ue.isSSR)() ? defineAsCustomElementsSSR(e147, t91, n60) : customElements.define(t91, class extends HTMLElement {
        constructor(){
            super();
            const t92 = this.attachShadow({
                mode: r38,
                delegatesFocus: s23
            });
            let n61;
            const o18 = Array.from(this.children).map((e148)=>(0, Ue.render)(e148)
            );
            const i12 = (0, Ue.h)("div", null, (0, Ue._render)({
                component: e147,
                props: {
                    children: o18,
                    ref: (e149)=>n61 = e149
                }
            }));
            this.component = n61;
            this.isFunctionalComponent = !e147.isClass;
            this.functionalComponentsProps = {};
            t92.append(i12);
            this.isFunctionalComponent || (this.component.updatePropsValue = (e, t93)=>{
                this.component.props || (this.component.props = {});
                this.component.props[e] = t93;
                this.component[e] = t93;
            });
        }
        static get observedAttributes() {
            return n60;
        }
        removeChildren() {
            var e151;
            if (this.shadowRoot) {
                const t94 = Array.from(null === (e151 = this.shadowRoot) || void 0 === e151 ? void 0 : e151.children) || [];
                for (const e150 of t94)e150.remove();
            }
        }
        attributeChangedCallback(t95, n, r39) {
            if (this.isFunctionalComponent) {
                this.removeChildren();
                this.functionalComponentsProps[t95] = r39;
                const n62 = (0, Ue.h)("div", null, (0, Ue._render)({
                    component: e147,
                    props: Object.assign({
                        children: [],
                        ref: (e152)=>this.component = e152
                    }, this.functionalComponentsProps)
                }));
                this.shadowRoot.append(n62);
            } else {
                this.component.updatePropsValue(t95, r39);
                this.component.update();
            }
        }
    });
};
ze.defineAsCustomElements = defineAsCustomElements$1;
var Fe = {};
var Be = Fe && Fe.__createBinding || (Object.create ? function(e153, t96, n63, r40) {
    void 0 === r40 && (r40 = n63);
    Object.defineProperty(e153, r40, {
        enumerable: true,
        get: function() {
            return t96[n63];
        }
    });
} : function(e154, t97, n64, r41) {
    void 0 === r41 && (r41 = n64);
    e154[r41] = t97[n64];
});
var Je = Fe && Fe.__exportStar || function(e155, t98) {
    for(var n65 in e155)"default" === n65 || Object.prototype.hasOwnProperty.call(t98, n65) || Be(t98, e155, n65);
};
Object.defineProperty(Fe, "__esModule", {
    value: true
});
Fe.VERSION = Fe.printVersion = Fe.defineAsCustomElements = Fe.withStyles = Fe.useContext = Fe.createContext = Fe.Store = Fe.Fragment = Fe.renderSSR = Fe.task = Fe.nodeToString = Fe.hydrateLazy = Fe.jsx = Fe.Component = Fe.tick = Fe.hydrate = Fe.render = Fe.h = void 0;
var Ze = i7;
Object.defineProperty(Fe, "h", {
    enumerable: true,
    get: function() {
        return Ze.h;
    }
});
Object.defineProperty(Fe, "render", {
    enumerable: true,
    get: function() {
        return Ze.render;
    }
});
Object.defineProperty(Fe, "hydrate", {
    enumerable: true,
    get: function() {
        return Ze.hydrate;
    }
});
Object.defineProperty(Fe, "tick", {
    enumerable: true,
    get: function() {
        return Ze.tick;
    }
});
var qe = l;
Object.defineProperty(Fe, "Component", {
    enumerable: true,
    get: function() {
        return qe.Component;
    }
});
Je(z, Fe);
const We = i7;
const Ye = X;
Fe.default = {
    h: We.h,
    render: We.render,
    hydrate: We.hydrate,
    renderSSR: Ye.renderSSR
};
var Xe = we;
Object.defineProperty(Fe, "jsx", {
    enumerable: true,
    get: function() {
        return Xe.jsx;
    }
});
var Ge = Me;
Object.defineProperty(Fe, "hydrateLazy", {
    enumerable: true,
    get: function() {
        return Ge.hydrateLazy;
    }
});
var Ke = n;
Object.defineProperty(Fe, "nodeToString", {
    enumerable: true,
    get: function() {
        return Ke.nodeToString;
    }
});
Object.defineProperty(Fe, "task", {
    enumerable: true,
    get: function() {
        return Ke.task;
    }
});
var Qe = X;
Object.defineProperty(Fe, "renderSSR", {
    enumerable: true,
    get: function() {
        return Qe.renderSSR;
    }
});
var et = _;
Object.defineProperty(Fe, "Fragment", {
    enumerable: true,
    get: function() {
        return et.Fragment;
    }
});
var tt = ke;
Object.defineProperty(Fe, "Store", {
    enumerable: true,
    get: function() {
        return tt.Store;
    }
});
var nt = Ne;
Object.defineProperty(Fe, "createContext", {
    enumerable: true,
    get: function() {
        return nt.createContext;
    }
});
Object.defineProperty(Fe, "useContext", {
    enumerable: true,
    get: function() {
        return nt.useContext;
    }
});
var rt = Ie;
Object.defineProperty(Fe, "withStyles", {
    enumerable: true,
    get: function() {
        return rt.withStyles;
    }
});
var st = ze;
Object.defineProperty(Fe, "defineAsCustomElements", {
    enumerable: true,
    get: function() {
        return st.defineAsCustomElements;
    }
});
var ot = n;
Object.defineProperty(Fe, "printVersion", {
    enumerable: true,
    get: function() {
        return ot.printVersion;
    }
});
var it = t;
Object.defineProperty(Fe, "VERSION", {
    enumerable: true,
    get: function() {
        return it.VERSION;
    }
});
const at = Fe.__esModule, ct = Fe.VERSION, lt = Fe.printVersion, ut = Fe.defineAsCustomElements, dt = Fe.withStyles, ht = Fe.useContext, pt = Fe.createContext, ft = Fe.Store, mt = Fe.Fragment, gt = Fe.renderSSR, bt = Fe.task, yt = Fe.nodeToString, vt = Fe.hydrateLazy, _t = Fe.jsx, St = Fe.Component, Ot = Fe.tick, jt = Fe.hydrate, wt = Fe.render, Ct = Fe.h, xt = Fe.Visible, Pt = Fe.Suspense, Et = Fe.Router, Mt = Fe.Link, Rt = Fe.Img, Lt = Fe.Helmet;
function Readme(param) {
    var __html = param.__html;
    return Ct("jspm-package-readme", null, Ct("div", {
        innerHTML: {
            __dangerousHtml: __html
        }
    }), Ct(Lt, null, Ct("style", {
        "data-page-name": "jspm-package-readme"
    }, "\n            jspm-package-readme img {\n              max-width: 100%;\n            }\n          ")));
}
function Seperator() {
    return Ct("div", null, Ct("div", {
        class: "seperator-seperator"
    }, Ct("div", {
        class: "seperator-container"
    }), Ct("div", {
        class: "seperator-container1"
    }), Ct("div", {
        class: "seperator-container2"
    }), Ct("div", {
        class: "seperator-container3"
    })), Ct(Lt, null, Ct("style", {
        "data-page-name": "seperator"
    }, "\n        .seperator-seperator {\n            flex: 0 0 auto;\n            width: 100%;\n            height: auto;\n            display: flex;\n            margin-top: var(--dl-space-space-unit);\n            align-items: center;\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .seperator-container {\n            flex: 0 0 auto;\n            width: 50px;\n            height: 8px;\n            display: flex;\n            align-items: flex-start;\n            background-color: var(--dl-color-jspm-500);\n            border-top-left-radius: var(--dl-radius-radius-radius8);\n            border-bottom-left-radius: var(--dl-radius-radius-radius8);\n          }\n          .seperator-container1 {\n            flex: 0 0 auto;\n            width: 50px;\n            height: 8px;\n            display: flex;\n            align-items: flex-start;\n            background-color: var(--dl-color-jspm-400);\n          }\n          .seperator-container2 {\n            flex: 0 0 auto;\n            width: 50px;\n            height: 8px;\n            display: flex;\n            align-items: flex-start;\n            background-color: var(--dl-color-jspm-300);\n          }\n          .seperator-container3 {\n            flex: 0 0 auto;\n            width: 50px;\n            height: 8px;\n            display: flex;\n            align-items: flex-start;\n            background-color: var(--dl-color-jspm-200);\n            border-top-right-radius: var(--dl-radius-radius-radius8);\n            border-bottom-right-radius: var(--dl-radius-radius-radius8);\n          }\n        ")));
}
var t1 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var e = {};
var r1 = function(e1) {
    var r11 = Object.prototype;
    var n1 = r11.hasOwnProperty;
    var o1;
    var i1 = "function" === typeof Symbol ? Symbol : {};
    var a1 = i1.iterator || "@@iterator";
    var c1 = i1.asyncIterator || "@@asyncIterator";
    var u1 = i1.toStringTag || "@@toStringTag";
    function define(t11, e2, r2) {
        Object.defineProperty(t11, e2, {
            value: r2,
            enumerable: true,
            configurable: true,
            writable: true
        });
        return t11[e2];
    }
    try {
        define({}, "");
    } catch (t2) {
        define = function(t3, e, r3) {
            return t3[e] = r3;
        };
    }
    function wrap(t4, e3, r4, n2) {
        var o2 = e3 && e3.prototype instanceof Generator1 ? e3 : Generator1;
        var i2 = Object.create(o2.prototype);
        var a2 = new Context(n2 || []);
        i2._invoke = makeInvokeMethod(t4, r4, a2);
        return i2;
    }
    e1.wrap = wrap;
    function tryCatch(t5, e4, r5) {
        try {
            return {
                type: "normal",
                arg: t5.call(e4, r5)
            };
        } catch (t6) {
            return {
                type: "throw",
                arg: t6
            };
        }
    }
    var h1 = "suspendedStart";
    var l1 = "suspendedYield";
    var f7 = "executing";
    var s5 = "completed";
    var y3 = {};
    function Generator1() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var v3 = {};
    define(v3, a1, function() {
        return this || t1;
    });
    var p5 = Object.getPrototypeOf;
    var d5 = p5 && p5(p5(values([])));
    d5 && d5 !== r11 && n1.call(d5, a1) && (v3 = d5);
    var g5 = GeneratorFunctionPrototype.prototype = Generator1.prototype = Object.create(v3);
    GeneratorFunction.prototype = GeneratorFunctionPrototype;
    define(g5, "constructor", GeneratorFunctionPrototype);
    define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u1, "GeneratorFunction");
    function defineIteratorMethods(t7) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(e5) {
            define(t7, e5, function(t8) {
                return this._invoke(e5, t8);
            });
        });
    }
    e1.isGeneratorFunction = function(t9) {
        var e6 = "function" === typeof t9 && t9.constructor;
        return !!e6 && (e6 === GeneratorFunction || "GeneratorFunction" === (e6.displayName || e6.name));
    };
    e1.mark = function(t10) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(t10, GeneratorFunctionPrototype);
        else {
            t10.__proto__ = GeneratorFunctionPrototype;
            define(t10, u1, "GeneratorFunction");
        }
        t10.prototype = Object.create(g5);
        return t10;
    };
    e1.awrap = function(t11) {
        return {
            __await: t11
        };
    };
    function AsyncIterator(e7, r6) {
        function invoke(t12, o4, i3, a32) {
            var c2 = tryCatch(e7[t12], e7, o4);
            if ("throw" !== c2.type) {
                var u2 = c2.arg;
                var h2 = u2.value;
                return h2 && "object" === typeof h2 && n1.call(h2, "__await") ? r6.resolve(h2.__await).then(function(t13) {
                    invoke("next", t13, i3, a32);
                }, function(t14) {
                    invoke("throw", t14, i3, a32);
                }) : r6.resolve(h2).then(function(t15) {
                    u2.value = t15;
                    i3(u2);
                }, function(t16) {
                    return invoke("throw", t16, i3, a32);
                });
            }
            a32(c2.arg);
        }
        var o3;
        function enqueue(t17, e8) {
            function callInvokeWithMethodAndArg() {
                return new r6(function(r7, n3) {
                    invoke(t17, e8, r7, n3);
                });
            }
            return o3 = o3 ? o3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        (this || t1)._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    define(AsyncIterator.prototype, c1, function() {
        return this || t1;
    });
    e1.AsyncIterator = AsyncIterator;
    e1.async = function(t18, r8, n4, o5, i4) {
        void 0 === i4 && (i4 = Promise);
        var a4 = new AsyncIterator(wrap(t18, r8, n4, o5), i4);
        return e1.isGeneratorFunction(r8) ? a4 : a4.next().then(function(t19) {
            return t19.done ? t19.value : a4.next();
        });
    };
    function makeInvokeMethod(t20, e9, r9) {
        var n5 = h1;
        return function invoke(o6, i5) {
            if (n5 === f7) throw new Error("Generator is already running");
            if (n5 === s5) {
                if ("throw" === o6) throw i5;
                return doneResult();
            }
            r9.method = o6;
            r9.arg = i5;
            while(true){
                var a5 = r9.delegate;
                if (a5) {
                    var c3 = maybeInvokeDelegate(a5, r9);
                    if (c3) {
                        if (c3 === y3) continue;
                        return c3;
                    }
                }
                if ("next" === r9.method) r9.sent = r9._sent = r9.arg;
                else if ("throw" === r9.method) {
                    if (n5 === h1) {
                        n5 = s5;
                        throw r9.arg;
                    }
                    r9.dispatchException(r9.arg);
                } else "return" === r9.method && r9.abrupt("return", r9.arg);
                n5 = f7;
                var u3 = tryCatch(t20, e9, r9);
                if ("normal" === u3.type) {
                    n5 = r9.done ? s5 : l1;
                    if (u3.arg === y3) continue;
                    return {
                        value: u3.arg,
                        done: r9.done
                    };
                }
                if ("throw" === u3.type) {
                    n5 = s5;
                    r9.method = "throw";
                    r9.arg = u3.arg;
                }
            }
        };
    }
    function maybeInvokeDelegate(t21, e10) {
        var r10 = t21.iterator[e10.method];
        if (r10 === o1) {
            e10.delegate = null;
            if ("throw" === e10.method) {
                if (t21.iterator.return) {
                    e10.method = "return";
                    e10.arg = o1;
                    maybeInvokeDelegate(t21, e10);
                    if ("throw" === e10.method) return y3;
                }
                e10.method = "throw";
                e10.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return y3;
        }
        var n6 = tryCatch(r10, t21.iterator, e10.arg);
        if ("throw" === n6.type) {
            e10.method = "throw";
            e10.arg = n6.arg;
            e10.delegate = null;
            return y3;
        }
        var i6 = n6.arg;
        if (!i6) {
            e10.method = "throw";
            e10.arg = new TypeError("iterator result is not an object");
            e10.delegate = null;
            return y3;
        }
        if (!i6.done) return i6;
        e10[t21.resultName] = i6.value;
        e10.next = t21.nextLoc;
        if ("return" !== e10.method) {
            e10.method = "next";
            e10.arg = o1;
        }
        e10.delegate = null;
        return y3;
    }
    defineIteratorMethods(g5);
    define(g5, u1, "Generator");
    define(g5, a1, function() {
        return this || t1;
    });
    define(g5, "toString", function() {
        return "[object Generator]";
    });
    function pushTryEntry(e11) {
        var r11 = {
            tryLoc: e11[0]
        };
        1 in e11 && (r11.catchLoc = e11[1]);
        if (2 in e11) {
            r11.finallyLoc = e11[2];
            r11.afterLoc = e11[3];
        }
        (this || t1).tryEntries.push(r11);
    }
    function resetTryEntry(t22) {
        var e12 = t22.completion || {};
        e12.type = "normal";
        delete e12.arg;
        t22.completion = e12;
    }
    function Context(e13) {
        (this || t1).tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        e13.forEach(pushTryEntry, this || t1);
        this.reset(true);
    }
    e1.keys = function(t23) {
        var e14 = [];
        for(var r12 in t23)e14.push(r12);
        e14.reverse();
        return function next() {
            while(e14.length){
                var r13 = e14.pop();
                if (r13 in t23) {
                    next.value = r13;
                    next.done = false;
                    return next;
                }
            }
            next.done = true;
            return next;
        };
    };
    function values(t24) {
        if (t24) {
            var e15 = t24[a1];
            if (e15) return e15.call(t24);
            if ("function" === typeof t24.next) return t24;
            if (!isNaN(t24.length)) {
                var r14 = -1, i7 = function next() {
                    while(++r14 < t24.length)if (n1.call(t24, r14)) {
                        next.value = t24[r14];
                        next.done = false;
                        return next;
                    }
                    next.value = o1;
                    next.done = true;
                    return next;
                };
                return i7.next = i7;
            }
        }
        return {
            next: doneResult
        };
    }
    e1.values = values;
    function doneResult() {
        return {
            value: o1,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(e16) {
            (this || t1).prev = 0;
            (this || t1).next = 0;
            (this || t1).sent = (this || t1)._sent = o1;
            (this || t1).done = false;
            (this || t1).delegate = null;
            (this || t1).method = "next";
            (this || t1).arg = o1;
            (this || t1).tryEntries.forEach(resetTryEntry);
            if (!e16) for(var r15 in this || t1)"t" === r15.charAt(0) && n1.call(this || t1, r15) && !isNaN(+r15.slice(1)) && ((this || t1)[r15] = o1);
        },
        stop: function() {
            (this || t1).done = true;
            var e17 = (this || t1).tryEntries[0];
            var r16 = e17.completion;
            if ("throw" === r16.type) throw r16.arg;
            return (this || t1).rval;
        },
        dispatchException: function(e18) {
            if ((this || t1).done) throw e18;
            var r17 = this || t1;
            function handle(t25, n7) {
                c4.type = "throw";
                c4.arg = e18;
                r17.next = t25;
                if (n7) {
                    r17.method = "next";
                    r17.arg = o1;
                }
                return !!n7;
            }
            for(var i8 = (this || t1).tryEntries.length - 1; i8 >= 0; --i8){
                var a6 = (this || t1).tryEntries[i8];
                var c4 = a6.completion;
                if ("root" === a6.tryLoc) return handle("end");
                if (a6.tryLoc <= (this || t1).prev) {
                    var u4 = n1.call(a6, "catchLoc");
                    var h3 = n1.call(a6, "finallyLoc");
                    if (u4 && h3) {
                        if ((this || t1).prev < a6.catchLoc) return handle(a6.catchLoc, true);
                        if ((this || t1).prev < a6.finallyLoc) return handle(a6.finallyLoc);
                    } else if (u4) {
                        if ((this || t1).prev < a6.catchLoc) return handle(a6.catchLoc, true);
                    } else {
                        if (!h3) throw new Error("try statement without catch or finally");
                        if ((this || t1).prev < a6.finallyLoc) return handle(a6.finallyLoc);
                    }
                }
            }
        },
        abrupt: function(e19, r18) {
            for(var o7 = (this || t1).tryEntries.length - 1; o7 >= 0; --o7){
                var i9 = (this || t1).tryEntries[o7];
                if (i9.tryLoc <= (this || t1).prev && n1.call(i9, "finallyLoc") && (this || t1).prev < i9.finallyLoc) {
                    var a = i9;
                    break;
                }
            }
            a && ("break" === e19 || "continue" === e19) && a.tryLoc <= r18 && r18 <= a.finallyLoc && (a = null);
            var c5 = a ? a.completion : {};
            c5.type = e19;
            c5.arg = r18;
            if (a) {
                (this || t1).method = "next";
                (this || t1).next = a.finallyLoc;
                return y3;
            }
            return this.complete(c5);
        },
        complete: function(e20, r19) {
            if ("throw" === e20.type) throw e20.arg;
            if ("break" === e20.type || "continue" === e20.type) (this || t1).next = e20.arg;
            else if ("return" === e20.type) {
                (this || t1).rval = (this || t1).arg = e20.arg;
                (this || t1).method = "return";
                (this || t1).next = "end";
            } else "normal" === e20.type && r19 && ((this || t1).next = r19);
            return y3;
        },
        finish: function(e21) {
            for(var r20 = (this || t1).tryEntries.length - 1; r20 >= 0; --r20){
                var n8 = (this || t1).tryEntries[r20];
                if (n8.finallyLoc === e21) {
                    this.complete(n8.completion, n8.afterLoc);
                    resetTryEntry(n8);
                    return y3;
                }
            }
        },
        catch: function(e22) {
            for(var r21 = (this || t1).tryEntries.length - 1; r21 >= 0; --r21){
                var n9 = (this || t1).tryEntries[r21];
                if (n9.tryLoc === e22) {
                    var o8 = n9.completion;
                    if ("throw" === o8.type) {
                        var i = o8.arg;
                        resetTryEntry(n9);
                    }
                    return i;
                }
            }
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(e23, r22, n10) {
            (this || t1).delegate = {
                iterator: values(e23),
                resultName: r22,
                nextLoc: n10
            };
            "next" === (this || t1).method && ((this || t1).arg = o1);
            return y3;
        }
    };
    return e1;
}(e);
try {
    t1.regeneratorRuntime = r1;
} catch (t26) {
    "object" === typeof globalThis ? globalThis.regeneratorRuntime = r1 : Function("r", "regeneratorRuntime = r")(r1);
}
e.wrap, e.isGeneratorFunction, e.mark, e.awrap, e.AsyncIterator, e.async, e.keys, e.values;
var e1 = {};
const t2 = /^([~\^])?(0|[1-9]\d*)(?:\.(0|[1-9]\d*))?$/;
const r2 = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-([\da-z-]+(?:\.[\da-z-]+)*))?(\+[\da-z-]+)?$/i;
e1.semverRegEx = r2;
e1.shortSemverRegEx = t2;
const s1 = Symbol("major");
const i1 = Symbol("minor");
const n1 = Symbol("patch");
const h1 = Symbol("pre");
const a1 = Symbol("build");
const o1 = Symbol("tag");
let m1 = /^\d+$/;
class Semver {
    constructor(e11){
        let t12 = e11.match(r2);
        if (t12) {
            this[s1] = parseInt(t12[1], 10);
            this[i1] = parseInt(t12[2], 10);
            this[n1] = parseInt(t12[3], 10);
            this[h1] = t12[4] && t12[4].split(".");
            this[a1] = t12[5];
        } else this[o1] = e11;
    }
    get major() {
        return this[s1];
    }
    get minor() {
        return this[i1];
    }
    get patch() {
        return this[n1];
    }
    get pre() {
        return this[h1];
    }
    get build() {
        return this[a1];
    }
    get tag() {
        return this[o1];
    }
    gt(e2) {
        return 1 === Semver.compare(this, e2);
    }
    lt(e3) {
        return -1 === Semver.compare(this, e3);
    }
    eq(e4) {
        e4 instanceof Semver || (e4 = new Semver(e4));
        if (this[o1] && e4[o1]) return this[o1] === e4[o1];
        if (this[o1] || e4[o1]) return false;
        if (this[s1] !== e4[s1]) return false;
        if (this[i1] !== e4[i1]) return false;
        if (this[n1] !== e4[n1]) return false;
        if (void 0 === this[h1] && void 0 === e4[h1]) return true;
        if (void 0 === this[h1] || void 0 === e4[h1]) return false;
        if (this[h1].length !== e4[h1].length) return false;
        for(let t21 = 0; t21 < this[h1].length; t21++)if (this[h1][t21] !== e4[h1][t21]) return false;
        return this[a1] === e4[a1];
    }
    matches(e5, t3 = false) {
        e5 instanceof SemverRange || (e5 = new SemverRange(e5));
        return e5.has(this, t3);
    }
    toString() {
        return this[o1] ? this[o1] : this[s1] + "." + this[i1] + "." + this[n1] + (this[h1] ? "-" + this[h1].join(".") : "") + (this[a1] ? this[a1] : "");
    }
    static isValid(e6) {
        let t4 = e6.match(r2);
        return t4 && void 0 !== t4[2] && void 0 !== t4[3];
    }
    static compare(e7, t5) {
        e7 instanceof Semver || (e7 = new Semver(e7));
        t5 instanceof Semver || (t5 = new Semver(t5));
        return e7[o1] && t5[o1] ? 0 : e7[o1] ? -1 : t5[o1] ? 1 : e7[s1] !== t5[s1] ? e7[s1] > t5[s1] ? 1 : -1 : e7[i1] !== t5[i1] ? e7[i1] > t5[i1] ? 1 : -1 : e7[n1] !== t5[n1] ? e7[n1] > t5[n1] ? 1 : -1 : e7[h1] || t5[h1] ? e7[h1] ? t5[h1] ? prereleaseCompare(e7[h1], t5[h1]) : -1 : 1 : 0;
    }
}
e1.Semver = Semver;
function prereleaseCompare(e8, t6) {
    for(let r12 = 0, s11 = Math.min(e8.length, t6.length); r12 < s11; r12++)if (e8[r12] !== t6[r12]) {
        let s2 = e8[r12].match(m1);
        let i11 = t6[r12].match(m1);
        return s2 && !i11 ? -1 : i11 && !s2 ? 1 : s2 && i11 ? parseInt(e8[r12], 10) > parseInt(t6[r12], 10) ? 1 : -1 : e8[r12] > t6[r12] ? 1 : -1;
    }
    return e8.length === t6.length ? 0 : e8.length > t6.length ? 1 : -1;
}
const c1 = 0;
const u1 = 1;
const v1 = 2;
const l1 = 3;
const S1 = Symbol("type");
const g1 = Symbol("version");
class SemverRange {
    constructor(e9){
        if ("*" === e9 || "" === e9) {
            this[S1] = c1;
            return;
        }
        let r21 = e9.match(t2);
        if (r21) {
            r21[1] && (e9 = e9.substr(1));
            if (void 0 === r21[3]) {
                this[g1] = new Semver(e9 + ".0.0");
                this[S1] = u1;
            } else {
                this[g1] = new Semver(e9 + ".0");
                "^" === r21[1] && "0" !== r21[2] ? this[S1] = u1 : this[S1] = v1;
            }
            this[g1][h1] = this[g1][h1] || [];
        } else if (e9.startsWith("^^")) {
            this[g1] = new Semver(e9.substr(2));
            this[S1] = u1;
        } else if ("^" === e9[0]) {
            this[g1] = new Semver(e9.substr(1));
            0 === this[g1][s1] ? 0 === this[g1][i1] ? this[S1] = l1 : this[S1] = v1 : this[S1] = u1;
        } else if ("~" === e9[0]) {
            this[g1] = new Semver(e9.substr(1));
            this[S1] = v1;
        } else {
            this[g1] = new Semver(e9);
            this[S1] = l1;
        }
        this[g1][o1] && this[S1] !== 3 && (this[S1] = l1);
    }
    get isExact() {
        return this[S1] === 3;
    }
    get isExactSemver() {
        return this[S1] === 3 && void 0 === this.version[o1];
    }
    get isExactTag() {
        return this[S1] === 3 && void 0 !== this.version[o1];
    }
    get isStable() {
        return this[S1] === 2;
    }
    get isMajor() {
        return this[S1] === 1;
    }
    get isWildcard() {
        return this[S1] === 0;
    }
    get type() {
        switch(this[S1]){
            case 0:
                return "wildcard";
            case 1:
                return "major";
            case 2:
                return "stable";
            case 3:
                return "exact";
        }
    }
    get version() {
        return this[g1];
    }
    gt(e10) {
        return 1 === SemverRange.compare(this, e10);
    }
    lt(e11) {
        return -1 === SemverRange.compare(this, e11);
    }
    eq(e12) {
        return 0 === SemverRange.compare(this, e12);
    }
    has(e13, t7 = false) {
        e13 instanceof Semver || (e13 = new Semver(e13));
        return this[S1] === 0 ? t7 || !e13[h1] && !e13[o1] : this[S1] === 3 ? this[g1].eq(e13) : !e13[o1] && this[g1][s1] === e13[s1] && !(this[S1] === 1 ? this[g1][i1] > e13[i1] : this[g1][i1] !== e13[i1]) && (this[S1] === 1 && this[g1][i1] !== e13[i1] || !(this[g1][n1] > e13[n1])) && (void 0 === e13[h1] || 0 === e13[h1].length || (void 0 === this[g1][h1] || 0 === this[g1][h1].length ? t7 : (false !== t7 || this[g1][i1] === e13[i1] && this[g1][n1] === e13[n1]) && 1 !== prereleaseCompare(this[g1][h1], e13[h1])));
    }
    contains(e14) {
        e14 instanceof SemverRange || (e14 = new SemverRange(e14));
        return this[S1] === 0 || e14[S1] !== 0 && e14[S1] >= this[S1] && this.has(e14[g1], true);
    }
    intersect(e15) {
        e15 instanceof SemverRange || (e15 = new SemverRange(e15));
        if (this[S1] === 0 && e15[S1] === 0) return this;
        if (this[S1] === 0) return e15;
        if (e15[S1] === 0) return this;
        if (this[S1] === 3) return e15.has(this[g1], true) ? this : void 0;
        if (e15[S1] === 3) return this.has(e15[g1], true) ? e15 : void 0;
        let t8, r3, s3;
        if (e15[g1].gt(this[g1])) {
            t8 = e15;
            r3 = this;
            s3 = true;
        } else {
            t8 = this;
            r3 = e15;
            s3 = false;
        }
        if (!r3.has(t8[g1], true)) return;
        if (r3[S1] === 1) return s3 ? e15 : this;
        let i2 = new SemverRange(t8[g1].toString());
        i2[S1] = v1;
        return i2;
    }
    bestMatch(e16, t9 = false) {
        let r4;
        e16.forEach((e17)=>{
            e17 instanceof Semver || (e17 = new Semver(e17));
            this.has(e17, t9) && (r4 ? 1 === Semver.compare(e17, r4) && (r4 = e17) : r4 = e17);
        });
        return r4;
    }
    toString() {
        let e18 = this[g1];
        switch(this[S1]){
            case 0:
                return "*";
            case 1:
                return 0 === e18[s1] && 0 === e18[i1] && 0 === e18[n1] ? "0" : e18[h1] && 0 === e18[h1].length && 0 === e18[n1] ? "^" + e18[s1] + "." + e18[i1] : "^" + e18.toString();
            case 2:
                return e18[h1] && 0 === e18[h1].length && 0 === e18[n1] || 0 === e18[s1] && 0 === e18[i1] ? e18[s1] + "." + e18[i1] : "~" + e18.toString();
            case 3:
                return e18.toString();
        }
    }
    static match(e19, t10, r5 = false) {
        t10 instanceof Semver || (t10 = new Semver(t10));
        return t10.matches(e19, r5);
    }
    static isValid(e20) {
        let t11 = new SemverRange(e20);
        return t11[S1] !== 3 || void 0 === t11[g1][o1];
    }
    static compare(e21, t12) {
        e21 instanceof SemverRange || (e21 = new SemverRange(e21));
        t12 instanceof SemverRange || (t12 = new SemverRange(t12));
        if (e21[S1] === 0 && t12[S1] === 0) return 0;
        if (e21[S1] === 0) return 1;
        if (t12[S1] === 0) return -1;
        let r6 = Semver.compare(e21[g1], t12[g1]);
        return 0 !== r6 ? r6 : e21[S1] === t12[S1] ? 0 : e21[S1] > t12[S1] ? 1 : -1;
    }
}
e1.SemverRange = SemverRange;
const f1 = e1.semverRegEx, d1 = e1.shortSemverRegEx, p1 = e1.Semver, R1 = e1.SemverRange;
const { Deno: Deno1  } = globalThis;
typeof Deno1?.noColor === "boolean" ? Deno1.noColor : true;
new RegExp([
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))", 
].join("|"), "g");
var DiffType;
(function(DiffType1) {
    DiffType1["removed"] = "removed";
    DiffType1["common"] = "common";
    DiffType1["added"] = "added";
})(DiffType || (DiffType = {}));
class AssertionError extends Error {
    name = "AssertionError";
    constructor(message){
        super(message);
    }
}
function unreachable() {
    throw new AssertionError("unreachable");
}
class DenoStdInternalError extends Error {
    constructor(message){
        super(message);
        this.name = "DenoStdInternalError";
    }
}
function assert(expr, msg = "") {
    if (!expr) {
        throw new DenoStdInternalError(msg);
    }
}
function copy(src, dst, off = 0) {
    off = Math.max(0, Math.min(off, dst.byteLength));
    const dstBytesAvailable = dst.byteLength - off;
    if (src.byteLength > dstBytesAvailable) {
        src = src.subarray(0, dstBytesAvailable);
    }
    dst.set(src, off);
    return src.byteLength;
}
const DEFAULT_BUF_SIZE = 4096;
const MIN_BUF_SIZE = 16;
const CR = "\r".charCodeAt(0);
const LF = "\n".charCodeAt(0);
class BufferFullError extends Error {
    partial;
    name = "BufferFullError";
    constructor(partial){
        super("Buffer full");
        this.partial = partial;
    }
}
class PartialReadError extends Error {
    name = "PartialReadError";
    partial;
    constructor(){
        super("Encountered UnexpectedEof, data only partially read");
    }
}
class BufReader {
    buf;
    rd;
    r = 0;
    w = 0;
    eof = false;
    static create(r9, size = 4096) {
        return r9 instanceof BufReader ? r9 : new BufReader(r9, size);
    }
    constructor(rd, size = 4096){
        if (size < 16) {
            size = MIN_BUF_SIZE;
        }
        this._reset(new Uint8Array(size), rd);
    }
    size() {
        return this.buf.byteLength;
    }
    buffered() {
        return this.w - this.r;
    }
    async _fill() {
        if (this.r > 0) {
            this.buf.copyWithin(0, this.r, this.w);
            this.w -= this.r;
            this.r = 0;
        }
        if (this.w >= this.buf.byteLength) {
            throw Error("bufio: tried to fill full buffer");
        }
        for(let i = 100; i > 0; i--){
            const rr = await this.rd.read(this.buf.subarray(this.w));
            if (rr === null) {
                this.eof = true;
                return;
            }
            assert(rr >= 0, "negative read");
            this.w += rr;
            if (rr > 0) {
                return;
            }
        }
        throw new Error(`No progress after ${100} read() calls`);
    }
    reset(r10) {
        this._reset(this.buf, r10);
    }
    _reset(buf, rd) {
        this.buf = buf;
        this.rd = rd;
        this.eof = false;
    }
    async read(p6) {
        let rr = p6.byteLength;
        if (p6.byteLength === 0) return rr;
        if (this.r === this.w) {
            if (p6.byteLength >= this.buf.byteLength) {
                const rr = await this.rd.read(p6);
                const nread = rr ?? 0;
                assert(nread >= 0, "negative read");
                return rr;
            }
            this.r = 0;
            this.w = 0;
            rr = await this.rd.read(this.buf);
            if (rr === 0 || rr === null) return rr;
            assert(rr >= 0, "negative read");
            this.w += rr;
        }
        const copied = copy(this.buf.subarray(this.r, this.w), p6, 0);
        this.r += copied;
        return copied;
    }
    async readFull(p7) {
        let bytesRead = 0;
        while(bytesRead < p7.length){
            try {
                const rr = await this.read(p7.subarray(bytesRead));
                if (rr === null) {
                    if (bytesRead === 0) {
                        return null;
                    } else {
                        throw new PartialReadError();
                    }
                }
                bytesRead += rr;
            } catch (err) {
                if (err instanceof PartialReadError) {
                    err.partial = p7.subarray(0, bytesRead);
                } else if (err instanceof Error) {
                    const e7 = new PartialReadError();
                    e7.partial = p7.subarray(0, bytesRead);
                    e7.stack = err.stack;
                    e7.message = err.message;
                    e7.cause = err.cause;
                    throw err;
                }
                throw err;
            }
        }
        return p7;
    }
    async readByte() {
        while(this.r === this.w){
            if (this.eof) return null;
            await this._fill();
        }
        const c6 = this.buf[this.r];
        this.r++;
        return c6;
    }
    async readString(delim) {
        if (delim.length !== 1) {
            throw new Error("Delimiter should be a single character");
        }
        const buffer = await this.readSlice(delim.charCodeAt(0));
        if (buffer === null) return null;
        return new TextDecoder().decode(buffer);
    }
    async readLine() {
        let line = null;
        try {
            line = await this.readSlice(LF);
        } catch (err) {
            if (err instanceof Deno.errors.BadResource) {
                throw err;
            }
            let partial;
            if (err instanceof PartialReadError) {
                partial = err.partial;
                assert(partial instanceof Uint8Array, "bufio: caught error from `readSlice()` without `partial` property");
            }
            if (!(err instanceof BufferFullError)) {
                throw err;
            }
            partial = err.partial;
            if (!this.eof && partial && partial.byteLength > 0 && partial[partial.byteLength - 1] === CR) {
                assert(this.r > 0, "bufio: tried to rewind past start of buffer");
                this.r--;
                partial = partial.subarray(0, partial.byteLength - 1);
            }
            if (partial) {
                return {
                    line: partial,
                    more: !this.eof
                };
            }
        }
        if (line === null) {
            return null;
        }
        if (line.byteLength === 0) {
            return {
                line,
                more: false
            };
        }
        if (line[line.byteLength - 1] == LF) {
            let drop = 1;
            if (line.byteLength > 1 && line[line.byteLength - 2] === CR) {
                drop = 2;
            }
            line = line.subarray(0, line.byteLength - drop);
        }
        return {
            line,
            more: false
        };
    }
    async readSlice(delim) {
        let s6 = 0;
        let slice;
        while(true){
            let i = this.buf.subarray(this.r + s6, this.w).indexOf(delim);
            if (i >= 0) {
                i += s6;
                slice = this.buf.subarray(this.r, this.r + i + 1);
                this.r += i + 1;
                break;
            }
            if (this.eof) {
                if (this.r === this.w) {
                    return null;
                }
                slice = this.buf.subarray(this.r, this.w);
                this.r = this.w;
                break;
            }
            if (this.buffered() >= this.buf.byteLength) {
                this.r = this.w;
                const oldbuf = this.buf;
                const newbuf = this.buf.slice(0);
                this.buf = newbuf;
                throw new BufferFullError(oldbuf);
            }
            s6 = this.w - this.r;
            try {
                await this._fill();
            } catch (err) {
                if (err instanceof PartialReadError) {
                    err.partial = slice;
                } else if (err instanceof Error) {
                    const e8 = new PartialReadError();
                    e8.partial = slice;
                    e8.stack = err.stack;
                    e8.message = err.message;
                    e8.cause = err.cause;
                    throw err;
                }
                throw err;
            }
        }
        return slice;
    }
    async peek(n6) {
        if (n6 < 0) {
            throw Error("negative count");
        }
        let avail = this.w - this.r;
        while(avail < n6 && avail < this.buf.byteLength && !this.eof){
            try {
                await this._fill();
            } catch (err) {
                if (err instanceof PartialReadError) {
                    err.partial = this.buf.subarray(this.r, this.w);
                } else if (err instanceof Error) {
                    const e9 = new PartialReadError();
                    e9.partial = this.buf.subarray(this.r, this.w);
                    e9.stack = err.stack;
                    e9.message = err.message;
                    e9.cause = err.cause;
                    throw err;
                }
                throw err;
            }
            avail = this.w - this.r;
        }
        if (avail === 0 && this.eof) {
            return null;
        } else if (avail < n6 && this.eof) {
            return this.buf.subarray(this.r, this.r + avail);
        } else if (avail < n6) {
            throw new BufferFullError(this.buf.subarray(this.r, this.w));
        }
        return this.buf.subarray(this.r, this.r + n6);
    }
}
class AbstractBufBase {
    buf;
    usedBufferBytes = 0;
    err = null;
    size() {
        return this.buf.byteLength;
    }
    available() {
        return this.buf.byteLength - this.usedBufferBytes;
    }
    buffered() {
        return this.usedBufferBytes;
    }
}
class BufWriter extends AbstractBufBase {
    writer;
    static create(writer, size = 4096) {
        return writer instanceof BufWriter ? writer : new BufWriter(writer, size);
    }
    constructor(writer, size = 4096){
        super();
        this.writer = writer;
        if (size <= 0) {
            size = DEFAULT_BUF_SIZE;
        }
        this.buf = new Uint8Array(size);
    }
    reset(w2) {
        this.err = null;
        this.usedBufferBytes = 0;
        this.writer = w2;
    }
    async flush() {
        if (this.err !== null) throw this.err;
        if (this.usedBufferBytes === 0) return;
        try {
            const p8 = this.buf.subarray(0, this.usedBufferBytes);
            let nwritten = 0;
            while(nwritten < p8.length){
                nwritten += await this.writer.write(p8.subarray(nwritten));
            }
        } catch (e10) {
            if (e10 instanceof Error) {
                this.err = e10;
            }
            throw e10;
        }
        this.buf = new Uint8Array(this.buf.length);
        this.usedBufferBytes = 0;
    }
    async write(data) {
        if (this.err !== null) throw this.err;
        if (data.length === 0) return 0;
        let totalBytesWritten = 0;
        let numBytesWritten = 0;
        while(data.byteLength > this.available()){
            if (this.buffered() === 0) {
                try {
                    numBytesWritten = await this.writer.write(data);
                } catch (e12) {
                    if (e12 instanceof Error) {
                        this.err = e12;
                    }
                    throw e12;
                }
            } else {
                numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
                this.usedBufferBytes += numBytesWritten;
                await this.flush();
            }
            totalBytesWritten += numBytesWritten;
            data = data.subarray(numBytesWritten);
        }
        numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
        this.usedBufferBytes += numBytesWritten;
        totalBytesWritten += numBytesWritten;
        return totalBytesWritten;
    }
}
class BufWriterSync extends AbstractBufBase {
    writer;
    static create(writer, size = 4096) {
        return writer instanceof BufWriterSync ? writer : new BufWriterSync(writer, size);
    }
    constructor(writer, size = 4096){
        super();
        this.writer = writer;
        if (size <= 0) {
            size = DEFAULT_BUF_SIZE;
        }
        this.buf = new Uint8Array(size);
    }
    reset(w3) {
        this.err = null;
        this.usedBufferBytes = 0;
        this.writer = w3;
    }
    flush() {
        if (this.err !== null) throw this.err;
        if (this.usedBufferBytes === 0) return;
        try {
            const p9 = this.buf.subarray(0, this.usedBufferBytes);
            let nwritten = 0;
            while(nwritten < p9.length){
                nwritten += this.writer.writeSync(p9.subarray(nwritten));
            }
        } catch (e13) {
            if (e13 instanceof Error) {
                this.err = e13;
            }
            throw e13;
        }
        this.buf = new Uint8Array(this.buf.length);
        this.usedBufferBytes = 0;
    }
    writeSync(data) {
        if (this.err !== null) throw this.err;
        if (data.length === 0) return 0;
        let totalBytesWritten = 0;
        let numBytesWritten = 0;
        while(data.byteLength > this.available()){
            if (this.buffered() === 0) {
                try {
                    numBytesWritten = this.writer.writeSync(data);
                } catch (e14) {
                    if (e14 instanceof Error) {
                        this.err = e14;
                    }
                    throw e14;
                }
            } else {
                numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
                this.usedBufferBytes += numBytesWritten;
                this.flush();
            }
            totalBytesWritten += numBytesWritten;
            data = data.subarray(numBytesWritten);
        }
        numBytesWritten = copy(data, this.buf, this.usedBufferBytes);
        this.usedBufferBytes += numBytesWritten;
        totalBytesWritten += numBytesWritten;
        return totalBytesWritten;
    }
}
function notImplemented(msg) {
    const message = msg ? `Not implemented: ${msg}` : "Not implemented";
    throw new Error(message);
}
function normalizeEncoding(enc) {
    if (enc == null || enc === "utf8" || enc === "utf-8") return "utf8";
    return slowCases(enc);
}
function slowCases(enc) {
    switch(enc.length){
        case 4:
            if (enc === "UTF8") return "utf8";
            if (enc === "ucs2" || enc === "UCS2") return "utf16le";
            enc = `${enc}`.toLowerCase();
            if (enc === "utf8") return "utf8";
            if (enc === "ucs2") return "utf16le";
            break;
        case 3:
            if (enc === "hex" || enc === "HEX" || `${enc}`.toLowerCase() === "hex") {
                return "hex";
            }
            break;
        case 5:
            if (enc === "ascii") return "ascii";
            if (enc === "ucs-2") return "utf16le";
            if (enc === "UTF-8") return "utf8";
            if (enc === "ASCII") return "ascii";
            if (enc === "UCS-2") return "utf16le";
            enc = `${enc}`.toLowerCase();
            if (enc === "utf-8") return "utf8";
            if (enc === "ascii") return "ascii";
            if (enc === "ucs-2") return "utf16le";
            break;
        case 6:
            if (enc === "base64") return "base64";
            if (enc === "latin1" || enc === "binary") return "latin1";
            if (enc === "BASE64") return "base64";
            if (enc === "LATIN1" || enc === "BINARY") return "latin1";
            enc = `${enc}`.toLowerCase();
            if (enc === "base64") return "base64";
            if (enc === "latin1" || enc === "binary") return "latin1";
            break;
        case 7:
            if (enc === "utf16le" || enc === "UTF16LE" || `${enc}`.toLowerCase() === "utf16le") {
                return "utf16le";
            }
            break;
        case 8:
            if (enc === "utf-16le" || enc === "UTF-16LE" || `${enc}`.toLowerCase() === "utf-16le") {
                return "utf16le";
            }
            break;
        default:
            if (enc === "") return "utf8";
    }
}
function once(callback) {
    let called = false;
    return function(...args) {
        if (called) return;
        called = true;
        callback.apply(this, args);
    };
}
const CHAR_FORWARD_SLASH = 47;
const osType = (()=>{
    const { Deno  } = globalThis;
    if (typeof Deno?.build?.os === "string") {
        return Deno.build.os;
    }
    const { navigator  } = globalThis;
    if (navigator?.appVersion?.includes?.("Win") ?? false) {
        return "windows";
    }
    return "linux";
})();
const isWindows = osType === "windows";
function assertPath(path2) {
    if (typeof path2 !== "string") {
        throw new TypeError(`Path must be a string. Received ${JSON.stringify(path2)}`);
    }
}
function isPosixPathSeparator(code) {
    return code === 47;
}
function isPathSeparator(code) {
    return isPosixPathSeparator(code) || code === 92;
}
function isWindowsDeviceRoot(code) {
    return code >= 97 && code <= 122 || code >= 65 && code <= 90;
}
function normalizeString(path3, allowAboveRoot, separator, isPathSeparator1) {
    let res = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let code;
    for(let i = 0, len = path3.length; i <= len; ++i){
        if (i < len) code = path3.charCodeAt(i);
        else if (isPathSeparator1(code)) break;
        else code = CHAR_FORWARD_SLASH;
        if (isPathSeparator1(code)) {
            if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                    if (res.length > 2) {
                        const lastSlashIndex = res.lastIndexOf(separator);
                        if (lastSlashIndex === -1) {
                            res = "";
                            lastSegmentLength = 0;
                        } else {
                            res = res.slice(0, lastSlashIndex);
                            lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
                        }
                        lastSlash = i;
                        dots = 0;
                        continue;
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += `${separator}..`;
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += separator + path3.slice(lastSlash + 1, i);
                else res = path3.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 && dots !== -1) {
            ++dots;
        } else {
            dots = -1;
        }
    }
    return res;
}
function _format(sep3, pathObject) {
    const dir = pathObject.dir || pathObject.root;
    const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep3 + base;
}
const WHITESPACE_ENCODINGS = {
    "\u0009": "%09",
    "\u000A": "%0A",
    "\u000B": "%0B",
    "\u000C": "%0C",
    "\u000D": "%0D",
    "\u0020": "%20"
};
function encodeWhitespace(string) {
    return string.replaceAll(/[\s]/g, (c7)=>{
        return WHITESPACE_ENCODINGS[c7] ?? c7;
    });
}
const sep = "\\";
const delimiter = ";";
function resolve(...pathSegments) {
    let resolvedDevice = "";
    let resolvedTail = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1; i--){
        let path4;
        const { Deno  } = globalThis;
        if (i >= 0) {
            path4 = pathSegments[i];
        } else if (!resolvedDevice) {
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a drive-letter-less path without a CWD.");
            }
            path4 = Deno.cwd();
        } else {
            if (typeof Deno?.env?.get !== "function" || typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path4 = Deno.cwd();
            if (path4 === undefined || path4.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
                path4 = `${resolvedDevice}\\`;
            }
        }
        assertPath(path4);
        const len = path4.length;
        if (len === 0) continue;
        let rootEnd = 0;
        let device = "";
        let isAbsolute1 = false;
        const code = path4.charCodeAt(0);
        if (len > 1) {
            if (isPathSeparator(code)) {
                isAbsolute1 = true;
                if (isPathSeparator(path4.charCodeAt(1))) {
                    let j3 = 2;
                    let last = j3;
                    for(; j3 < len; ++j3){
                        if (isPathSeparator(path4.charCodeAt(j3))) break;
                    }
                    if (j3 < len && j3 !== last) {
                        const firstPart = path4.slice(last, j3);
                        last = j3;
                        for(; j3 < len; ++j3){
                            if (!isPathSeparator(path4.charCodeAt(j3))) break;
                        }
                        if (j3 < len && j3 !== last) {
                            last = j3;
                            for(; j3 < len; ++j3){
                                if (isPathSeparator(path4.charCodeAt(j3))) break;
                            }
                            if (j3 === len) {
                                device = `\\\\${firstPart}\\${path4.slice(last)}`;
                                rootEnd = j3;
                            } else if (j3 !== last) {
                                device = `\\\\${firstPart}\\${path4.slice(last, j3)}`;
                                rootEnd = j3;
                            }
                        }
                    }
                } else {
                    rootEnd = 1;
                }
            } else if (isWindowsDeviceRoot(code)) {
                if (path4.charCodeAt(1) === 58) {
                    device = path4.slice(0, 2);
                    rootEnd = 2;
                    if (len > 2) {
                        if (isPathSeparator(path4.charCodeAt(2))) {
                            isAbsolute1 = true;
                            rootEnd = 3;
                        }
                    }
                }
            }
        } else if (isPathSeparator(code)) {
            rootEnd = 1;
            isAbsolute1 = true;
        }
        if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
            continue;
        }
        if (resolvedDevice.length === 0 && device.length > 0) {
            resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
            resolvedTail = `${path4.slice(rootEnd)}\\${resolvedTail}`;
            resolvedAbsolute = isAbsolute1;
        }
        if (resolvedAbsolute && resolvedDevice.length > 0) break;
    }
    resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, "\\", isPathSeparator);
    return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path5) {
    assertPath(path5);
    const len = path5.length;
    if (len === 0) return ".";
    let rootEnd = 0;
    let device;
    let isAbsolute2 = false;
    const code = path5.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            isAbsolute2 = true;
            if (isPathSeparator(path5.charCodeAt(1))) {
                let j4 = 2;
                let last = j4;
                for(; j4 < len; ++j4){
                    if (isPathSeparator(path5.charCodeAt(j4))) break;
                }
                if (j4 < len && j4 !== last) {
                    const firstPart = path5.slice(last, j4);
                    last = j4;
                    for(; j4 < len; ++j4){
                        if (!isPathSeparator(path5.charCodeAt(j4))) break;
                    }
                    if (j4 < len && j4 !== last) {
                        last = j4;
                        for(; j4 < len; ++j4){
                            if (isPathSeparator(path5.charCodeAt(j4))) break;
                        }
                        if (j4 === len) {
                            return `\\\\${firstPart}\\${path5.slice(last)}\\`;
                        } else if (j4 !== last) {
                            device = `\\\\${firstPart}\\${path5.slice(last, j4)}`;
                            rootEnd = j4;
                        }
                    }
                }
            } else {
                rootEnd = 1;
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path5.charCodeAt(1) === 58) {
                device = path5.slice(0, 2);
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path5.charCodeAt(2))) {
                        isAbsolute2 = true;
                        rootEnd = 3;
                    }
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return "\\";
    }
    let tail;
    if (rootEnd < len) {
        tail = normalizeString(path5.slice(rootEnd), !isAbsolute2, "\\", isPathSeparator);
    } else {
        tail = "";
    }
    if (tail.length === 0 && !isAbsolute2) tail = ".";
    if (tail.length > 0 && isPathSeparator(path5.charCodeAt(len - 1))) {
        tail += "\\";
    }
    if (device === undefined) {
        if (isAbsolute2) {
            if (tail.length > 0) return `\\${tail}`;
            else return "\\";
        } else if (tail.length > 0) {
            return tail;
        } else {
            return "";
        }
    } else if (isAbsolute2) {
        if (tail.length > 0) return `${device}\\${tail}`;
        else return `${device}\\`;
    } else if (tail.length > 0) {
        return device + tail;
    } else {
        return device;
    }
}
function isAbsolute(path6) {
    assertPath(path6);
    const len = path6.length;
    if (len === 0) return false;
    const code = path6.charCodeAt(0);
    if (isPathSeparator(code)) {
        return true;
    } else if (isWindowsDeviceRoot(code)) {
        if (len > 2 && path6.charCodeAt(1) === 58) {
            if (isPathSeparator(path6.charCodeAt(2))) return true;
        }
    }
    return false;
}
function join(...paths) {
    const pathsCount = paths.length;
    if (pathsCount === 0) return ".";
    let joined;
    let firstPart = null;
    for(let i = 0; i < pathsCount; ++i){
        const path7 = paths[i];
        assertPath(path7);
        if (path7.length > 0) {
            if (joined === undefined) joined = firstPart = path7;
            else joined += `\\${path7}`;
        }
    }
    if (joined === undefined) return ".";
    let needsReplace = true;
    let slashCount = 0;
    assert(firstPart != null);
    if (isPathSeparator(firstPart.charCodeAt(0))) {
        ++slashCount;
        const firstLen = firstPart.length;
        if (firstLen > 1) {
            if (isPathSeparator(firstPart.charCodeAt(1))) {
                ++slashCount;
                if (firstLen > 2) {
                    if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
                    else {
                        needsReplace = false;
                    }
                }
            }
        }
    }
    if (needsReplace) {
        for(; slashCount < joined.length; ++slashCount){
            if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
        }
        if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
    }
    return normalize(joined);
}
function relative(from1, to1) {
    assertPath(from1);
    assertPath(to1);
    if (from1 === to1) return "";
    const fromOrig = resolve(from1);
    const toOrig = resolve(to1);
    if (fromOrig === toOrig) return "";
    from1 = fromOrig.toLowerCase();
    to1 = toOrig.toLowerCase();
    if (from1 === to1) return "";
    let fromStart = 0;
    let fromEnd = from1.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from1.charCodeAt(fromStart) !== 92) break;
    }
    for(; fromEnd - 1 > fromStart; --fromEnd){
        if (from1.charCodeAt(fromEnd - 1) !== 92) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 0;
    let toEnd = to1.length;
    for(; toStart < toEnd; ++toStart){
        if (to1.charCodeAt(toStart) !== 92) break;
    }
    for(; toEnd - 1 > toStart; --toEnd){
        if (to1.charCodeAt(toEnd - 1) !== 92) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to1.charCodeAt(toStart + i) === 92) {
                    return toOrig.slice(toStart + i + 1);
                } else if (i === 2) {
                    return toOrig.slice(toStart + i);
                }
            }
            if (fromLen > length) {
                if (from1.charCodeAt(fromStart + i) === 92) {
                    lastCommonSep = i;
                } else if (i === 2) {
                    lastCommonSep = 3;
                }
            }
            break;
        }
        const fromCode = from1.charCodeAt(fromStart + i);
        const toCode = to1.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 92) lastCommonSep = i;
    }
    if (i !== length && lastCommonSep === -1) {
        return toOrig;
    }
    let out = "";
    if (lastCommonSep === -1) lastCommonSep = 0;
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from1.charCodeAt(i) === 92) {
            if (out.length === 0) out += "..";
            else out += "\\..";
        }
    }
    if (out.length > 0) {
        return out + toOrig.slice(toStart + lastCommonSep, toEnd);
    } else {
        toStart += lastCommonSep;
        if (toOrig.charCodeAt(toStart) === 92) ++toStart;
        return toOrig.slice(toStart, toEnd);
    }
}
function toNamespacedPath(path8) {
    if (typeof path8 !== "string") return path8;
    if (path8.length === 0) return "";
    const resolvedPath = resolve(path8);
    if (resolvedPath.length >= 3) {
        if (resolvedPath.charCodeAt(0) === 92) {
            if (resolvedPath.charCodeAt(1) === 92) {
                const code = resolvedPath.charCodeAt(2);
                if (code !== 63 && code !== 46) {
                    return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
                }
            }
        } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
            if (resolvedPath.charCodeAt(1) === 58 && resolvedPath.charCodeAt(2) === 92) {
                return `\\\\?\\${resolvedPath}`;
            }
        }
    }
    return path8;
}
function dirname(path9) {
    assertPath(path9);
    const len = path9.length;
    if (len === 0) return ".";
    let rootEnd = -1;
    let end = -1;
    let matchedSlash = true;
    let offset = 0;
    const code = path9.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = offset = 1;
            if (isPathSeparator(path9.charCodeAt(1))) {
                let j5 = 2;
                let last = j5;
                for(; j5 < len; ++j5){
                    if (isPathSeparator(path9.charCodeAt(j5))) break;
                }
                if (j5 < len && j5 !== last) {
                    last = j5;
                    for(; j5 < len; ++j5){
                        if (!isPathSeparator(path9.charCodeAt(j5))) break;
                    }
                    if (j5 < len && j5 !== last) {
                        last = j5;
                        for(; j5 < len; ++j5){
                            if (isPathSeparator(path9.charCodeAt(j5))) break;
                        }
                        if (j5 === len) {
                            return path9;
                        }
                        if (j5 !== last) {
                            rootEnd = offset = j5 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path9.charCodeAt(1) === 58) {
                rootEnd = offset = 2;
                if (len > 2) {
                    if (isPathSeparator(path9.charCodeAt(2))) rootEnd = offset = 3;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        return path9;
    }
    for(let i = len - 1; i >= offset; --i){
        if (isPathSeparator(path9.charCodeAt(i))) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) {
        if (rootEnd === -1) return ".";
        else end = rootEnd;
    }
    return path9.slice(0, end);
}
function basename(path10, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path10);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (path10.length >= 2) {
        const drive = path10.charCodeAt(0);
        if (isWindowsDeviceRoot(drive)) {
            if (path10.charCodeAt(1) === 58) start = 2;
        }
    }
    if (ext !== undefined && ext.length > 0 && ext.length <= path10.length) {
        if (ext.length === path10.length && ext === path10) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path10.length - 1; i >= start; --i){
            const code = path10.charCodeAt(i);
            if (isPathSeparator(code)) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path10.length;
        return path10.slice(start, end);
    } else {
        for(i = path10.length - 1; i >= start; --i){
            if (isPathSeparator(path10.charCodeAt(i))) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path10.slice(start, end);
    }
}
function extname(path11) {
    assertPath(path11);
    let start = 0;
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    if (path11.length >= 2 && path11.charCodeAt(1) === 58 && isWindowsDeviceRoot(path11.charCodeAt(0))) {
        start = startPart = 2;
    }
    for(let i = path11.length - 1; i >= start; --i){
        const code = path11.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path11.slice(startDot, end);
}
function format(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("\\", pathObject);
}
function parse(path12) {
    assertPath(path12);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    const len = path12.length;
    if (len === 0) return ret;
    let rootEnd = 0;
    let code = path12.charCodeAt(0);
    if (len > 1) {
        if (isPathSeparator(code)) {
            rootEnd = 1;
            if (isPathSeparator(path12.charCodeAt(1))) {
                let j6 = 2;
                let last = j6;
                for(; j6 < len; ++j6){
                    if (isPathSeparator(path12.charCodeAt(j6))) break;
                }
                if (j6 < len && j6 !== last) {
                    last = j6;
                    for(; j6 < len; ++j6){
                        if (!isPathSeparator(path12.charCodeAt(j6))) break;
                    }
                    if (j6 < len && j6 !== last) {
                        last = j6;
                        for(; j6 < len; ++j6){
                            if (isPathSeparator(path12.charCodeAt(j6))) break;
                        }
                        if (j6 === len) {
                            rootEnd = j6;
                        } else if (j6 !== last) {
                            rootEnd = j6 + 1;
                        }
                    }
                }
            }
        } else if (isWindowsDeviceRoot(code)) {
            if (path12.charCodeAt(1) === 58) {
                rootEnd = 2;
                if (len > 2) {
                    if (isPathSeparator(path12.charCodeAt(2))) {
                        if (len === 3) {
                            ret.root = ret.dir = path12;
                            return ret;
                        }
                        rootEnd = 3;
                    }
                } else {
                    ret.root = ret.dir = path12;
                    return ret;
                }
            }
        }
    } else if (isPathSeparator(code)) {
        ret.root = ret.dir = path12;
        return ret;
    }
    if (rootEnd > 0) ret.root = path12.slice(0, rootEnd);
    let startDot = -1;
    let startPart = rootEnd;
    let end = -1;
    let matchedSlash = true;
    let i = path12.length - 1;
    let preDotState = 0;
    for(; i >= rootEnd; --i){
        code = path12.charCodeAt(i);
        if (isPathSeparator(code)) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            ret.base = ret.name = path12.slice(startPart, end);
        }
    } else {
        ret.name = path12.slice(startPart, startDot);
        ret.base = path12.slice(startPart, end);
        ret.ext = path12.slice(startDot, end);
    }
    if (startPart > 0 && startPart !== rootEnd) {
        ret.dir = path12.slice(0, startPart - 1);
    } else ret.dir = ret.root;
    return ret;
}
function fromFileUrl(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    let path13 = decodeURIComponent(url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
    if (url.hostname != "") {
        path13 = `\\\\${url.hostname}${path13}`;
    }
    return path13;
}
function toFileUrl(path14) {
    if (!isAbsolute(path14)) {
        throw new TypeError("Must be an absolute path.");
    }
    const [, hostname, pathname] = path14.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/);
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
    if (hostname != null && hostname != "localhost") {
        url.hostname = hostname;
        if (!url.hostname) {
            throw new TypeError("Invalid hostname.");
        }
    }
    return url;
}
const mod = {
    sep: sep,
    delimiter: delimiter,
    resolve: resolve,
    normalize: normalize,
    isAbsolute: isAbsolute,
    join: join,
    relative: relative,
    toNamespacedPath: toNamespacedPath,
    dirname: dirname,
    basename: basename,
    extname: extname,
    format: format,
    parse: parse,
    fromFileUrl: fromFileUrl,
    toFileUrl: toFileUrl
};
const sep1 = "/";
const delimiter1 = ":";
function resolve1(...pathSegments) {
    let resolvedPath = "";
    let resolvedAbsolute = false;
    for(let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--){
        let path15;
        if (i >= 0) path15 = pathSegments[i];
        else {
            const { Deno  } = globalThis;
            if (typeof Deno?.cwd !== "function") {
                throw new TypeError("Resolved a relative path without a CWD.");
            }
            path15 = Deno.cwd();
        }
        assertPath(path15);
        if (path15.length === 0) {
            continue;
        }
        resolvedPath = `${path15}/${resolvedPath}`;
        resolvedAbsolute = path15.charCodeAt(0) === CHAR_FORWARD_SLASH;
    }
    resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
    if (resolvedAbsolute) {
        if (resolvedPath.length > 0) return `/${resolvedPath}`;
        else return "/";
    } else if (resolvedPath.length > 0) return resolvedPath;
    else return ".";
}
function normalize1(path16) {
    assertPath(path16);
    if (path16.length === 0) return ".";
    const isAbsolute1 = path16.charCodeAt(0) === 47;
    const trailingSeparator = path16.charCodeAt(path16.length - 1) === 47;
    path16 = normalizeString(path16, !isAbsolute1, "/", isPosixPathSeparator);
    if (path16.length === 0 && !isAbsolute1) path16 = ".";
    if (path16.length > 0 && trailingSeparator) path16 += "/";
    if (isAbsolute1) return `/${path16}`;
    return path16;
}
function isAbsolute1(path17) {
    assertPath(path17);
    return path17.length > 0 && path17.charCodeAt(0) === 47;
}
function join1(...paths) {
    if (paths.length === 0) return ".";
    let joined;
    for(let i = 0, len = paths.length; i < len; ++i){
        const path18 = paths[i];
        assertPath(path18);
        if (path18.length > 0) {
            if (!joined) joined = path18;
            else joined += `/${path18}`;
        }
    }
    if (!joined) return ".";
    return normalize1(joined);
}
function relative1(from2, to2) {
    assertPath(from2);
    assertPath(to2);
    if (from2 === to2) return "";
    from2 = resolve1(from2);
    to2 = resolve1(to2);
    if (from2 === to2) return "";
    let fromStart = 1;
    const fromEnd = from2.length;
    for(; fromStart < fromEnd; ++fromStart){
        if (from2.charCodeAt(fromStart) !== 47) break;
    }
    const fromLen = fromEnd - fromStart;
    let toStart = 1;
    const toEnd = to2.length;
    for(; toStart < toEnd; ++toStart){
        if (to2.charCodeAt(toStart) !== 47) break;
    }
    const toLen = toEnd - toStart;
    const length = fromLen < toLen ? fromLen : toLen;
    let lastCommonSep = -1;
    let i = 0;
    for(; i <= length; ++i){
        if (i === length) {
            if (toLen > length) {
                if (to2.charCodeAt(toStart + i) === 47) {
                    return to2.slice(toStart + i + 1);
                } else if (i === 0) {
                    return to2.slice(toStart + i);
                }
            } else if (fromLen > length) {
                if (from2.charCodeAt(fromStart + i) === 47) {
                    lastCommonSep = i;
                } else if (i === 0) {
                    lastCommonSep = 0;
                }
            }
            break;
        }
        const fromCode = from2.charCodeAt(fromStart + i);
        const toCode = to2.charCodeAt(toStart + i);
        if (fromCode !== toCode) break;
        else if (fromCode === 47) lastCommonSep = i;
    }
    let out = "";
    for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
        if (i === fromEnd || from2.charCodeAt(i) === 47) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
    }
    if (out.length > 0) return out + to2.slice(toStart + lastCommonSep);
    else {
        toStart += lastCommonSep;
        if (to2.charCodeAt(toStart) === 47) ++toStart;
        return to2.slice(toStart);
    }
}
function toNamespacedPath1(path19) {
    return path19;
}
function dirname1(path20) {
    assertPath(path20);
    if (path20.length === 0) return ".";
    const hasRoot = path20.charCodeAt(0) === 47;
    let end = -1;
    let matchedSlash = true;
    for(let i = path20.length - 1; i >= 1; --i){
        if (path20.charCodeAt(i) === 47) {
            if (!matchedSlash) {
                end = i;
                break;
            }
        } else {
            matchedSlash = false;
        }
    }
    if (end === -1) return hasRoot ? "/" : ".";
    if (hasRoot && end === 1) return "//";
    return path20.slice(0, end);
}
function basename1(path21, ext = "") {
    if (ext !== undefined && typeof ext !== "string") {
        throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path21);
    let start = 0;
    let end = -1;
    let matchedSlash = true;
    let i;
    if (ext !== undefined && ext.length > 0 && ext.length <= path21.length) {
        if (ext.length === path21.length && ext === path21) return "";
        let extIdx = ext.length - 1;
        let firstNonSlashEnd = -1;
        for(i = path21.length - 1; i >= 0; --i){
            const code = path21.charCodeAt(i);
            if (code === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else {
                if (firstNonSlashEnd === -1) {
                    matchedSlash = false;
                    firstNonSlashEnd = i + 1;
                }
                if (extIdx >= 0) {
                    if (code === ext.charCodeAt(extIdx)) {
                        if (--extIdx === -1) {
                            end = i;
                        }
                    } else {
                        extIdx = -1;
                        end = firstNonSlashEnd;
                    }
                }
            }
        }
        if (start === end) end = firstNonSlashEnd;
        else if (end === -1) end = path21.length;
        return path21.slice(start, end);
    } else {
        for(i = path21.length - 1; i >= 0; --i){
            if (path21.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                    start = i + 1;
                    break;
                }
            } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
            }
        }
        if (end === -1) return "";
        return path21.slice(start, end);
    }
}
function extname1(path22) {
    assertPath(path22);
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let preDotState = 0;
    for(let i = path22.length - 1; i >= 0; --i){
        const code = path22.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        return "";
    }
    return path22.slice(startDot, end);
}
function format1(pathObject) {
    if (pathObject === null || typeof pathObject !== "object") {
        throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
    }
    return _format("/", pathObject);
}
function parse1(path23) {
    assertPath(path23);
    const ret = {
        root: "",
        dir: "",
        base: "",
        ext: "",
        name: ""
    };
    if (path23.length === 0) return ret;
    const isAbsolute2 = path23.charCodeAt(0) === 47;
    let start;
    if (isAbsolute2) {
        ret.root = "/";
        start = 1;
    } else {
        start = 0;
    }
    let startDot = -1;
    let startPart = 0;
    let end = -1;
    let matchedSlash = true;
    let i = path23.length - 1;
    let preDotState = 0;
    for(; i >= start; --i){
        const code = path23.charCodeAt(i);
        if (code === 47) {
            if (!matchedSlash) {
                startPart = i + 1;
                break;
            }
            continue;
        }
        if (end === -1) {
            matchedSlash = false;
            end = i + 1;
        }
        if (code === 46) {
            if (startDot === -1) startDot = i;
            else if (preDotState !== 1) preDotState = 1;
        } else if (startDot !== -1) {
            preDotState = -1;
        }
    }
    if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
        if (end !== -1) {
            if (startPart === 0 && isAbsolute2) {
                ret.base = ret.name = path23.slice(1, end);
            } else {
                ret.base = ret.name = path23.slice(startPart, end);
            }
        }
    } else {
        if (startPart === 0 && isAbsolute2) {
            ret.name = path23.slice(1, startDot);
            ret.base = path23.slice(1, end);
        } else {
            ret.name = path23.slice(startPart, startDot);
            ret.base = path23.slice(startPart, end);
        }
        ret.ext = path23.slice(startDot, end);
    }
    if (startPart > 0) ret.dir = path23.slice(0, startPart - 1);
    else if (isAbsolute2) ret.dir = "/";
    return ret;
}
function fromFileUrl1(url) {
    url = url instanceof URL ? url : new URL(url);
    if (url.protocol != "file:") {
        throw new TypeError("Must be a file URL.");
    }
    return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl1(path24) {
    if (!isAbsolute1(path24)) {
        throw new TypeError("Must be an absolute path.");
    }
    const url = new URL("file:///");
    url.pathname = encodeWhitespace(path24.replace(/%/g, "%25").replace(/\\/g, "%5C"));
    return url;
}
const mod1 = {
    sep: sep1,
    delimiter: delimiter1,
    resolve: resolve1,
    normalize: normalize1,
    isAbsolute: isAbsolute1,
    join: join1,
    relative: relative1,
    toNamespacedPath: toNamespacedPath1,
    dirname: dirname1,
    basename: basename1,
    extname: extname1,
    format: format1,
    parse: parse1,
    fromFileUrl: fromFileUrl1,
    toFileUrl: toFileUrl1
};
const path = isWindows ? mod : mod1;
const { join: join2 , normalize: normalize2  } = path;
const path1 = isWindows ? mod : mod1;
const { basename: basename2 , delimiter: delimiter2 , dirname: dirname2 , extname: extname2 , format: format2 , fromFileUrl: fromFileUrl2 , isAbsolute: isAbsolute2 , join: join3 , normalize: normalize3 , parse: parse2 , relative: relative2 , resolve: resolve2 , sep: sep2 , toFileUrl: toFileUrl2 , toNamespacedPath: toNamespacedPath2 ,  } = path1;
const kCustomPromisifiedSymbol = Symbol.for("nodejs.util.promisify.custom");
const kCustomPromisifyArgsSymbol = Symbol.for("nodejs.util.promisify.customArgs");
class NodeInvalidArgTypeError extends TypeError {
    code = "ERR_INVALID_ARG_TYPE";
    constructor(argumentName, type, received){
        super(`The "${argumentName}" argument must be of type ${type}. Received ${typeof received}`);
    }
}
function promisify(original) {
    if (typeof original !== "function") {
        throw new NodeInvalidArgTypeError("original", "Function", original);
    }
    if (original[kCustomPromisifiedSymbol]) {
        const fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
            throw new NodeInvalidArgTypeError("util.promisify.custom", "Function", fn);
        }
        return Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    const argumentNames = original[kCustomPromisifyArgsSymbol];
    function fn(...args) {
        return new Promise((resolve4, reject)=>{
            original.call(this, ...args, (err, ...values)=>{
                if (err) {
                    return reject(err);
                }
                if (argumentNames !== undefined && values.length > 1) {
                    const obj = {};
                    for(let i = 0; i < argumentNames.length; i++){
                        obj[argumentNames[i]] = values[i];
                    }
                    resolve4(obj);
                } else {
                    resolve4(values[0]);
                }
            });
        });
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, Object.getOwnPropertyDescriptors(original));
}
promisify.custom = kCustomPromisifiedSymbol;
const _toString = Object.prototype.toString;
const _isObjectLike = (value)=>value !== null && typeof value === "object"
;
const _isFunctionLike = (value)=>value !== null && typeof value === "function"
;
function isAnyArrayBuffer(value) {
    return _isObjectLike(value) && (_toString.call(value) === "[object ArrayBuffer]" || _toString.call(value) === "[object SharedArrayBuffer]");
}
function isArrayBufferView(value) {
    return ArrayBuffer.isView(value);
}
function isArgumentsObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Arguments]";
}
function isArrayBuffer(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object ArrayBuffer]";
}
function isAsyncFunction(value) {
    return _isFunctionLike(value) && _toString.call(value) === "[object AsyncFunction]";
}
function isBigInt64Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object BigInt64Array]";
}
function isBigUint64Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object BigUint64Array]";
}
function isBooleanObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Boolean]";
}
function isBoxedPrimitive(value) {
    return isBooleanObject(value) || isStringObject(value) || isNumberObject(value) || isSymbolObject(value) || isBigIntObject(value);
}
function isDataView(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object DataView]";
}
function isDate(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Date]";
}
function isFloat32Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Float32Array]";
}
function isFloat64Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Float64Array]";
}
function isGeneratorFunction(value) {
    return _isFunctionLike(value) && _toString.call(value) === "[object GeneratorFunction]";
}
function isGeneratorObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Generator]";
}
function isInt8Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Int8Array]";
}
function isInt16Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Int16Array]";
}
function isInt32Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Int32Array]";
}
function isMap(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Map]";
}
function isMapIterator(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Map Iterator]";
}
function isModuleNamespaceObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Module]";
}
function isNativeError(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Error]";
}
function isNumberObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Number]";
}
function isBigIntObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object BigInt]";
}
function isPromise(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Promise]";
}
function isRegExp(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object RegExp]";
}
function isSet(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Set]";
}
function isSetIterator(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Set Iterator]";
}
function isSharedArrayBuffer(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object SharedArrayBuffer]";
}
function isStringObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object String]";
}
function isSymbolObject(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Symbol]";
}
function isTypedArray(value) {
    const reTypedTag = /^\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\]$/;
    return _isObjectLike(value) && reTypedTag.test(_toString.call(value));
}
function isUint8Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Uint8Array]";
}
function isUint8ClampedArray(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Uint8ClampedArray]";
}
function isUint16Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Uint16Array]";
}
function isUint32Array(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object Uint32Array]";
}
function isWeakMap(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object WeakMap]";
}
function isWeakSet(value) {
    return _isObjectLike(value) && _toString.call(value) === "[object WeakSet]";
}
const mod2 = {
    isAnyArrayBuffer: isAnyArrayBuffer,
    isArrayBufferView: isArrayBufferView,
    isArgumentsObject: isArgumentsObject,
    isArrayBuffer: isArrayBuffer,
    isAsyncFunction: isAsyncFunction,
    isBigInt64Array: isBigInt64Array,
    isBigUint64Array: isBigUint64Array,
    isBooleanObject: isBooleanObject,
    isBoxedPrimitive: isBoxedPrimitive,
    isDataView: isDataView,
    isDate: isDate,
    isFloat32Array: isFloat32Array,
    isFloat64Array: isFloat64Array,
    isGeneratorFunction: isGeneratorFunction,
    isGeneratorObject: isGeneratorObject,
    isInt8Array: isInt8Array,
    isInt16Array: isInt16Array,
    isInt32Array: isInt32Array,
    isMap: isMap,
    isMapIterator: isMapIterator,
    isModuleNamespaceObject: isModuleNamespaceObject,
    isNativeError: isNativeError,
    isNumberObject: isNumberObject,
    isBigIntObject: isBigIntObject,
    isPromise: isPromise,
    isRegExp: isRegExp,
    isSet: isSet,
    isSetIterator: isSetIterator,
    isSharedArrayBuffer: isSharedArrayBuffer,
    isStringObject: isStringObject,
    isSymbolObject: isSymbolObject,
    isTypedArray: isTypedArray,
    isUint8Array: isUint8Array,
    isUint8ClampedArray: isUint8ClampedArray,
    isUint16Array: isUint16Array,
    isUint32Array: isUint32Array,
    isWeakMap: isWeakMap,
    isWeakSet: isWeakSet
};
const codeToErrorWindows = [
    [
        -4093,
        [
            "E2BIG",
            "argument list too long"
        ]
    ],
    [
        -4092,
        [
            "EACCES",
            "permission denied"
        ]
    ],
    [
        -4091,
        [
            "EADDRINUSE",
            "address already in use"
        ]
    ],
    [
        -4090,
        [
            "EADDRNOTAVAIL",
            "address not available"
        ]
    ],
    [
        -4089,
        [
            "EAFNOSUPPORT",
            "address family not supported"
        ]
    ],
    [
        -4088,
        [
            "EAGAIN",
            "resource temporarily unavailable"
        ]
    ],
    [
        -3000,
        [
            "EAI_ADDRFAMILY",
            "address family not supported"
        ]
    ],
    [
        -3001,
        [
            "EAI_AGAIN",
            "temporary failure"
        ]
    ],
    [
        -3002,
        [
            "EAI_BADFLAGS",
            "bad ai_flags value"
        ]
    ],
    [
        -3013,
        [
            "EAI_BADHINTS",
            "invalid value for hints"
        ]
    ],
    [
        -3003,
        [
            "EAI_CANCELED",
            "request canceled"
        ]
    ],
    [
        -3004,
        [
            "EAI_FAIL",
            "permanent failure"
        ]
    ],
    [
        -3005,
        [
            "EAI_FAMILY",
            "ai_family not supported"
        ]
    ],
    [
        -3006,
        [
            "EAI_MEMORY",
            "out of memory"
        ]
    ],
    [
        -3007,
        [
            "EAI_NODATA",
            "no address"
        ]
    ],
    [
        -3008,
        [
            "EAI_NONAME",
            "unknown node or service"
        ]
    ],
    [
        -3009,
        [
            "EAI_OVERFLOW",
            "argument buffer overflow"
        ]
    ],
    [
        -3014,
        [
            "EAI_PROTOCOL",
            "resolved protocol is unknown"
        ]
    ],
    [
        -3010,
        [
            "EAI_SERVICE",
            "service not available for socket type"
        ]
    ],
    [
        -3011,
        [
            "EAI_SOCKTYPE",
            "socket type not supported"
        ]
    ],
    [
        -4084,
        [
            "EALREADY",
            "connection already in progress"
        ]
    ],
    [
        -4083,
        [
            "EBADF",
            "bad file descriptor"
        ]
    ],
    [
        -4082,
        [
            "EBUSY",
            "resource busy or locked"
        ]
    ],
    [
        -4081,
        [
            "ECANCELED",
            "operation canceled"
        ]
    ],
    [
        -4080,
        [
            "ECHARSET",
            "invalid Unicode character"
        ]
    ],
    [
        -4079,
        [
            "ECONNABORTED",
            "software caused connection abort"
        ]
    ],
    [
        -4078,
        [
            "ECONNREFUSED",
            "connection refused"
        ]
    ],
    [
        -4077,
        [
            "ECONNRESET",
            "connection reset by peer"
        ]
    ],
    [
        -4076,
        [
            "EDESTADDRREQ",
            "destination address required"
        ]
    ],
    [
        -4075,
        [
            "EEXIST",
            "file already exists"
        ]
    ],
    [
        -4074,
        [
            "EFAULT",
            "bad address in system call argument"
        ]
    ],
    [
        -4036,
        [
            "EFBIG",
            "file too large"
        ]
    ],
    [
        -4073,
        [
            "EHOSTUNREACH",
            "host is unreachable"
        ]
    ],
    [
        -4072,
        [
            "EINTR",
            "interrupted system call"
        ]
    ],
    [
        -4071,
        [
            "EINVAL",
            "invalid argument"
        ]
    ],
    [
        -4070,
        [
            "EIO",
            "i/o error"
        ]
    ],
    [
        -4069,
        [
            "EISCONN",
            "socket is already connected"
        ]
    ],
    [
        -4068,
        [
            "EISDIR",
            "illegal operation on a directory"
        ]
    ],
    [
        -4067,
        [
            "ELOOP",
            "too many symbolic links encountered"
        ]
    ],
    [
        -4066,
        [
            "EMFILE",
            "too many open files"
        ]
    ],
    [
        -4065,
        [
            "EMSGSIZE",
            "message too long"
        ]
    ],
    [
        -4064,
        [
            "ENAMETOOLONG",
            "name too long"
        ]
    ],
    [
        -4063,
        [
            "ENETDOWN",
            "network is down"
        ]
    ],
    [
        -4062,
        [
            "ENETUNREACH",
            "network is unreachable"
        ]
    ],
    [
        -4061,
        [
            "ENFILE",
            "file table overflow"
        ]
    ],
    [
        -4060,
        [
            "ENOBUFS",
            "no buffer space available"
        ]
    ],
    [
        -4059,
        [
            "ENODEV",
            "no such device"
        ]
    ],
    [
        -4058,
        [
            "ENOENT",
            "no such file or directory"
        ]
    ],
    [
        -4057,
        [
            "ENOMEM",
            "not enough memory"
        ]
    ],
    [
        -4056,
        [
            "ENONET",
            "machine is not on the network"
        ]
    ],
    [
        -4035,
        [
            "ENOPROTOOPT",
            "protocol not available"
        ]
    ],
    [
        -4055,
        [
            "ENOSPC",
            "no space left on device"
        ]
    ],
    [
        -4054,
        [
            "ENOSYS",
            "function not implemented"
        ]
    ],
    [
        -4053,
        [
            "ENOTCONN",
            "socket is not connected"
        ]
    ],
    [
        -4052,
        [
            "ENOTDIR",
            "not a directory"
        ]
    ],
    [
        -4051,
        [
            "ENOTEMPTY",
            "directory not empty"
        ]
    ],
    [
        -4050,
        [
            "ENOTSOCK",
            "socket operation on non-socket"
        ]
    ],
    [
        -4049,
        [
            "ENOTSUP",
            "operation not supported on socket"
        ]
    ],
    [
        -4048,
        [
            "EPERM",
            "operation not permitted"
        ]
    ],
    [
        -4047,
        [
            "EPIPE",
            "broken pipe"
        ]
    ],
    [
        -4046,
        [
            "EPROTO",
            "protocol error"
        ]
    ],
    [
        -4045,
        [
            "EPROTONOSUPPORT",
            "protocol not supported"
        ]
    ],
    [
        -4044,
        [
            "EPROTOTYPE",
            "protocol wrong type for socket"
        ]
    ],
    [
        -4034,
        [
            "ERANGE",
            "result too large"
        ]
    ],
    [
        -4043,
        [
            "EROFS",
            "read-only file system"
        ]
    ],
    [
        -4042,
        [
            "ESHUTDOWN",
            "cannot send after transport endpoint shutdown"
        ]
    ],
    [
        -4041,
        [
            "ESPIPE",
            "invalid seek"
        ]
    ],
    [
        -4040,
        [
            "ESRCH",
            "no such process"
        ]
    ],
    [
        -4039,
        [
            "ETIMEDOUT",
            "connection timed out"
        ]
    ],
    [
        -4038,
        [
            "ETXTBSY",
            "text file is busy"
        ]
    ],
    [
        -4037,
        [
            "EXDEV",
            "cross-device link not permitted"
        ]
    ],
    [
        -4094,
        [
            "UNKNOWN",
            "unknown error"
        ]
    ],
    [
        -4095,
        [
            "EOF",
            "end of file"
        ]
    ],
    [
        -4033,
        [
            "ENXIO",
            "no such device or address"
        ]
    ],
    [
        -4032,
        [
            "EMLINK",
            "too many links"
        ]
    ],
    [
        -4031,
        [
            "EHOSTDOWN",
            "host is down"
        ]
    ],
    [
        -4030,
        [
            "EREMOTEIO",
            "remote I/O error"
        ]
    ],
    [
        -4029,
        [
            "ENOTTY",
            "inappropriate ioctl for device"
        ]
    ],
    [
        -4028,
        [
            "EFTYPE",
            "inappropriate file type or format"
        ]
    ],
    [
        -4027,
        [
            "EILSEQ",
            "illegal byte sequence"
        ]
    ], 
];
const errorToCodeWindows = codeToErrorWindows.map(([status, [error]])=>[
        error,
        status
    ]
);
const codeToErrorDarwin = [
    [
        -7,
        [
            "E2BIG",
            "argument list too long"
        ]
    ],
    [
        -13,
        [
            "EACCES",
            "permission denied"
        ]
    ],
    [
        -48,
        [
            "EADDRINUSE",
            "address already in use"
        ]
    ],
    [
        -49,
        [
            "EADDRNOTAVAIL",
            "address not available"
        ]
    ],
    [
        -47,
        [
            "EAFNOSUPPORT",
            "address family not supported"
        ]
    ],
    [
        -35,
        [
            "EAGAIN",
            "resource temporarily unavailable"
        ]
    ],
    [
        -3000,
        [
            "EAI_ADDRFAMILY",
            "address family not supported"
        ]
    ],
    [
        -3001,
        [
            "EAI_AGAIN",
            "temporary failure"
        ]
    ],
    [
        -3002,
        [
            "EAI_BADFLAGS",
            "bad ai_flags value"
        ]
    ],
    [
        -3013,
        [
            "EAI_BADHINTS",
            "invalid value for hints"
        ]
    ],
    [
        -3003,
        [
            "EAI_CANCELED",
            "request canceled"
        ]
    ],
    [
        -3004,
        [
            "EAI_FAIL",
            "permanent failure"
        ]
    ],
    [
        -3005,
        [
            "EAI_FAMILY",
            "ai_family not supported"
        ]
    ],
    [
        -3006,
        [
            "EAI_MEMORY",
            "out of memory"
        ]
    ],
    [
        -3007,
        [
            "EAI_NODATA",
            "no address"
        ]
    ],
    [
        -3008,
        [
            "EAI_NONAME",
            "unknown node or service"
        ]
    ],
    [
        -3009,
        [
            "EAI_OVERFLOW",
            "argument buffer overflow"
        ]
    ],
    [
        -3014,
        [
            "EAI_PROTOCOL",
            "resolved protocol is unknown"
        ]
    ],
    [
        -3010,
        [
            "EAI_SERVICE",
            "service not available for socket type"
        ]
    ],
    [
        -3011,
        [
            "EAI_SOCKTYPE",
            "socket type not supported"
        ]
    ],
    [
        -37,
        [
            "EALREADY",
            "connection already in progress"
        ]
    ],
    [
        -9,
        [
            "EBADF",
            "bad file descriptor"
        ]
    ],
    [
        -16,
        [
            "EBUSY",
            "resource busy or locked"
        ]
    ],
    [
        -89,
        [
            "ECANCELED",
            "operation canceled"
        ]
    ],
    [
        -4080,
        [
            "ECHARSET",
            "invalid Unicode character"
        ]
    ],
    [
        -53,
        [
            "ECONNABORTED",
            "software caused connection abort"
        ]
    ],
    [
        -61,
        [
            "ECONNREFUSED",
            "connection refused"
        ]
    ],
    [
        -54,
        [
            "ECONNRESET",
            "connection reset by peer"
        ]
    ],
    [
        -39,
        [
            "EDESTADDRREQ",
            "destination address required"
        ]
    ],
    [
        -17,
        [
            "EEXIST",
            "file already exists"
        ]
    ],
    [
        -14,
        [
            "EFAULT",
            "bad address in system call argument"
        ]
    ],
    [
        -27,
        [
            "EFBIG",
            "file too large"
        ]
    ],
    [
        -65,
        [
            "EHOSTUNREACH",
            "host is unreachable"
        ]
    ],
    [
        -4,
        [
            "EINTR",
            "interrupted system call"
        ]
    ],
    [
        -22,
        [
            "EINVAL",
            "invalid argument"
        ]
    ],
    [
        -5,
        [
            "EIO",
            "i/o error"
        ]
    ],
    [
        -56,
        [
            "EISCONN",
            "socket is already connected"
        ]
    ],
    [
        -21,
        [
            "EISDIR",
            "illegal operation on a directory"
        ]
    ],
    [
        -62,
        [
            "ELOOP",
            "too many symbolic links encountered"
        ]
    ],
    [
        -24,
        [
            "EMFILE",
            "too many open files"
        ]
    ],
    [
        -40,
        [
            "EMSGSIZE",
            "message too long"
        ]
    ],
    [
        -63,
        [
            "ENAMETOOLONG",
            "name too long"
        ]
    ],
    [
        -50,
        [
            "ENETDOWN",
            "network is down"
        ]
    ],
    [
        -51,
        [
            "ENETUNREACH",
            "network is unreachable"
        ]
    ],
    [
        -23,
        [
            "ENFILE",
            "file table overflow"
        ]
    ],
    [
        -55,
        [
            "ENOBUFS",
            "no buffer space available"
        ]
    ],
    [
        -19,
        [
            "ENODEV",
            "no such device"
        ]
    ],
    [
        -2,
        [
            "ENOENT",
            "no such file or directory"
        ]
    ],
    [
        -12,
        [
            "ENOMEM",
            "not enough memory"
        ]
    ],
    [
        -4056,
        [
            "ENONET",
            "machine is not on the network"
        ]
    ],
    [
        -42,
        [
            "ENOPROTOOPT",
            "protocol not available"
        ]
    ],
    [
        -28,
        [
            "ENOSPC",
            "no space left on device"
        ]
    ],
    [
        -78,
        [
            "ENOSYS",
            "function not implemented"
        ]
    ],
    [
        -57,
        [
            "ENOTCONN",
            "socket is not connected"
        ]
    ],
    [
        -20,
        [
            "ENOTDIR",
            "not a directory"
        ]
    ],
    [
        -66,
        [
            "ENOTEMPTY",
            "directory not empty"
        ]
    ],
    [
        -38,
        [
            "ENOTSOCK",
            "socket operation on non-socket"
        ]
    ],
    [
        -45,
        [
            "ENOTSUP",
            "operation not supported on socket"
        ]
    ],
    [
        -1,
        [
            "EPERM",
            "operation not permitted"
        ]
    ],
    [
        -32,
        [
            "EPIPE",
            "broken pipe"
        ]
    ],
    [
        -100,
        [
            "EPROTO",
            "protocol error"
        ]
    ],
    [
        -43,
        [
            "EPROTONOSUPPORT",
            "protocol not supported"
        ]
    ],
    [
        -41,
        [
            "EPROTOTYPE",
            "protocol wrong type for socket"
        ]
    ],
    [
        -34,
        [
            "ERANGE",
            "result too large"
        ]
    ],
    [
        -30,
        [
            "EROFS",
            "read-only file system"
        ]
    ],
    [
        -58,
        [
            "ESHUTDOWN",
            "cannot send after transport endpoint shutdown"
        ]
    ],
    [
        -29,
        [
            "ESPIPE",
            "invalid seek"
        ]
    ],
    [
        -3,
        [
            "ESRCH",
            "no such process"
        ]
    ],
    [
        -60,
        [
            "ETIMEDOUT",
            "connection timed out"
        ]
    ],
    [
        -26,
        [
            "ETXTBSY",
            "text file is busy"
        ]
    ],
    [
        -18,
        [
            "EXDEV",
            "cross-device link not permitted"
        ]
    ],
    [
        -4094,
        [
            "UNKNOWN",
            "unknown error"
        ]
    ],
    [
        -4095,
        [
            "EOF",
            "end of file"
        ]
    ],
    [
        -6,
        [
            "ENXIO",
            "no such device or address"
        ]
    ],
    [
        -31,
        [
            "EMLINK",
            "too many links"
        ]
    ],
    [
        -64,
        [
            "EHOSTDOWN",
            "host is down"
        ]
    ],
    [
        -4030,
        [
            "EREMOTEIO",
            "remote I/O error"
        ]
    ],
    [
        -25,
        [
            "ENOTTY",
            "inappropriate ioctl for device"
        ]
    ],
    [
        -79,
        [
            "EFTYPE",
            "inappropriate file type or format"
        ]
    ],
    [
        -92,
        [
            "EILSEQ",
            "illegal byte sequence"
        ]
    ], 
];
const errorToCodeDarwin = codeToErrorDarwin.map(([status, [code]])=>[
        code,
        status
    ]
);
const codeToErrorLinux = [
    [
        -7,
        [
            "E2BIG",
            "argument list too long"
        ]
    ],
    [
        -13,
        [
            "EACCES",
            "permission denied"
        ]
    ],
    [
        -98,
        [
            "EADDRINUSE",
            "address already in use"
        ]
    ],
    [
        -99,
        [
            "EADDRNOTAVAIL",
            "address not available"
        ]
    ],
    [
        -97,
        [
            "EAFNOSUPPORT",
            "address family not supported"
        ]
    ],
    [
        -11,
        [
            "EAGAIN",
            "resource temporarily unavailable"
        ]
    ],
    [
        -3000,
        [
            "EAI_ADDRFAMILY",
            "address family not supported"
        ]
    ],
    [
        -3001,
        [
            "EAI_AGAIN",
            "temporary failure"
        ]
    ],
    [
        -3002,
        [
            "EAI_BADFLAGS",
            "bad ai_flags value"
        ]
    ],
    [
        -3013,
        [
            "EAI_BADHINTS",
            "invalid value for hints"
        ]
    ],
    [
        -3003,
        [
            "EAI_CANCELED",
            "request canceled"
        ]
    ],
    [
        -3004,
        [
            "EAI_FAIL",
            "permanent failure"
        ]
    ],
    [
        -3005,
        [
            "EAI_FAMILY",
            "ai_family not supported"
        ]
    ],
    [
        -3006,
        [
            "EAI_MEMORY",
            "out of memory"
        ]
    ],
    [
        -3007,
        [
            "EAI_NODATA",
            "no address"
        ]
    ],
    [
        -3008,
        [
            "EAI_NONAME",
            "unknown node or service"
        ]
    ],
    [
        -3009,
        [
            "EAI_OVERFLOW",
            "argument buffer overflow"
        ]
    ],
    [
        -3014,
        [
            "EAI_PROTOCOL",
            "resolved protocol is unknown"
        ]
    ],
    [
        -3010,
        [
            "EAI_SERVICE",
            "service not available for socket type"
        ]
    ],
    [
        -3011,
        [
            "EAI_SOCKTYPE",
            "socket type not supported"
        ]
    ],
    [
        -114,
        [
            "EALREADY",
            "connection already in progress"
        ]
    ],
    [
        -9,
        [
            "EBADF",
            "bad file descriptor"
        ]
    ],
    [
        -16,
        [
            "EBUSY",
            "resource busy or locked"
        ]
    ],
    [
        -125,
        [
            "ECANCELED",
            "operation canceled"
        ]
    ],
    [
        -4080,
        [
            "ECHARSET",
            "invalid Unicode character"
        ]
    ],
    [
        -103,
        [
            "ECONNABORTED",
            "software caused connection abort"
        ]
    ],
    [
        -111,
        [
            "ECONNREFUSED",
            "connection refused"
        ]
    ],
    [
        -104,
        [
            "ECONNRESET",
            "connection reset by peer"
        ]
    ],
    [
        -89,
        [
            "EDESTADDRREQ",
            "destination address required"
        ]
    ],
    [
        -17,
        [
            "EEXIST",
            "file already exists"
        ]
    ],
    [
        -14,
        [
            "EFAULT",
            "bad address in system call argument"
        ]
    ],
    [
        -27,
        [
            "EFBIG",
            "file too large"
        ]
    ],
    [
        -113,
        [
            "EHOSTUNREACH",
            "host is unreachable"
        ]
    ],
    [
        -4,
        [
            "EINTR",
            "interrupted system call"
        ]
    ],
    [
        -22,
        [
            "EINVAL",
            "invalid argument"
        ]
    ],
    [
        -5,
        [
            "EIO",
            "i/o error"
        ]
    ],
    [
        -106,
        [
            "EISCONN",
            "socket is already connected"
        ]
    ],
    [
        -21,
        [
            "EISDIR",
            "illegal operation on a directory"
        ]
    ],
    [
        -40,
        [
            "ELOOP",
            "too many symbolic links encountered"
        ]
    ],
    [
        -24,
        [
            "EMFILE",
            "too many open files"
        ]
    ],
    [
        -90,
        [
            "EMSGSIZE",
            "message too long"
        ]
    ],
    [
        -36,
        [
            "ENAMETOOLONG",
            "name too long"
        ]
    ],
    [
        -100,
        [
            "ENETDOWN",
            "network is down"
        ]
    ],
    [
        -101,
        [
            "ENETUNREACH",
            "network is unreachable"
        ]
    ],
    [
        -23,
        [
            "ENFILE",
            "file table overflow"
        ]
    ],
    [
        -105,
        [
            "ENOBUFS",
            "no buffer space available"
        ]
    ],
    [
        -19,
        [
            "ENODEV",
            "no such device"
        ]
    ],
    [
        -2,
        [
            "ENOENT",
            "no such file or directory"
        ]
    ],
    [
        -12,
        [
            "ENOMEM",
            "not enough memory"
        ]
    ],
    [
        -64,
        [
            "ENONET",
            "machine is not on the network"
        ]
    ],
    [
        -92,
        [
            "ENOPROTOOPT",
            "protocol not available"
        ]
    ],
    [
        -28,
        [
            "ENOSPC",
            "no space left on device"
        ]
    ],
    [
        -38,
        [
            "ENOSYS",
            "function not implemented"
        ]
    ],
    [
        -107,
        [
            "ENOTCONN",
            "socket is not connected"
        ]
    ],
    [
        -20,
        [
            "ENOTDIR",
            "not a directory"
        ]
    ],
    [
        -39,
        [
            "ENOTEMPTY",
            "directory not empty"
        ]
    ],
    [
        -88,
        [
            "ENOTSOCK",
            "socket operation on non-socket"
        ]
    ],
    [
        -95,
        [
            "ENOTSUP",
            "operation not supported on socket"
        ]
    ],
    [
        -1,
        [
            "EPERM",
            "operation not permitted"
        ]
    ],
    [
        -32,
        [
            "EPIPE",
            "broken pipe"
        ]
    ],
    [
        -71,
        [
            "EPROTO",
            "protocol error"
        ]
    ],
    [
        -93,
        [
            "EPROTONOSUPPORT",
            "protocol not supported"
        ]
    ],
    [
        -91,
        [
            "EPROTOTYPE",
            "protocol wrong type for socket"
        ]
    ],
    [
        -34,
        [
            "ERANGE",
            "result too large"
        ]
    ],
    [
        -30,
        [
            "EROFS",
            "read-only file system"
        ]
    ],
    [
        -108,
        [
            "ESHUTDOWN",
            "cannot send after transport endpoint shutdown"
        ]
    ],
    [
        -29,
        [
            "ESPIPE",
            "invalid seek"
        ]
    ],
    [
        -3,
        [
            "ESRCH",
            "no such process"
        ]
    ],
    [
        -110,
        [
            "ETIMEDOUT",
            "connection timed out"
        ]
    ],
    [
        -26,
        [
            "ETXTBSY",
            "text file is busy"
        ]
    ],
    [
        -18,
        [
            "EXDEV",
            "cross-device link not permitted"
        ]
    ],
    [
        -4094,
        [
            "UNKNOWN",
            "unknown error"
        ]
    ],
    [
        -4095,
        [
            "EOF",
            "end of file"
        ]
    ],
    [
        -6,
        [
            "ENXIO",
            "no such device or address"
        ]
    ],
    [
        -31,
        [
            "EMLINK",
            "too many links"
        ]
    ],
    [
        -112,
        [
            "EHOSTDOWN",
            "host is down"
        ]
    ],
    [
        -121,
        [
            "EREMOTEIO",
            "remote I/O error"
        ]
    ],
    [
        -25,
        [
            "ENOTTY",
            "inappropriate ioctl for device"
        ]
    ],
    [
        -4028,
        [
            "EFTYPE",
            "inappropriate file type or format"
        ]
    ],
    [
        -84,
        [
            "EILSEQ",
            "illegal byte sequence"
        ]
    ], 
];
const errorToCodeLinux = codeToErrorLinux.map(([status, [code]])=>[
        code,
        status
    ]
);
const errorMap = new Map(osType === "windows" ? codeToErrorWindows : osType === "darwin" ? codeToErrorDarwin : osType === "linux" ? codeToErrorLinux : unreachable());
const codeMap = new Map(osType === "windows" ? errorToCodeWindows : osType === "darwin" ? errorToCodeDarwin : osType === "linux" ? errorToCodeLinux : unreachable());
const forwardSlashRegEx = /\//g;
const classRegExp = /^([A-Z][a-z0-9]*)+$/;
const kTypes = [
    "string",
    "function",
    "number",
    "object",
    "Function",
    "Object",
    "boolean",
    "bigint",
    "symbol", 
];
const nodeInternalPrefix = "__node_internal_";
function hideStackFrames(fn) {
    const hidden = nodeInternalPrefix + fn.name;
    Object.defineProperty(fn, "name", {
        value: hidden
    });
    return fn;
}
const captureLargerStackTrace = hideStackFrames(function captureLargerStackTrace(err) {
    Error.captureStackTrace(err);
    return err;
});
hideStackFrames(function uvExceptionWithHostPort(err, syscall, address, port) {
    const { 0: code , 1: uvmsg  } = uvErrmapGet(err) || uvUnmappedError;
    const message = `${syscall} ${code}: ${uvmsg}`;
    let details = "";
    if (port && port > 0) {
        details = ` ${address}:${port}`;
    } else if (address) {
        details = ` ${address}`;
    }
    const ex = new Error(`${message}${details}`);
    ex.code = code;
    ex.errno = err;
    ex.syscall = syscall;
    ex.address = address;
    if (port) {
        ex.port = port;
    }
    return captureLargerStackTrace(ex);
});
class ERR_INVALID_ARG_TYPE extends NodeTypeError {
    constructor(name, expected, actual){
        expected = Array.isArray(expected) ? expected : [
            expected
        ];
        let msg = "The ";
        if (name.endsWith(" argument")) {
            msg += `${name} `;
        } else {
            const type = name.includes(".") ? "property" : "argument";
            msg += `"${name}" ${type} `;
        }
        msg += "must be ";
        const types = [];
        const instances = [];
        const other = [];
        for (const value of expected){
            if (kTypes.includes(value)) {
                types.push(value.toLocaleLowerCase());
            } else if (classRegExp.test(value)) {
                instances.push(value);
            } else {
                other.push(value);
            }
        }
        if (instances.length > 0) {
            const pos = types.indexOf("object");
            if (pos !== -1) {
                types.splice(pos, 1);
                instances.push("Object");
            }
        }
        if (types.length > 0) {
            if (types.length > 2) {
                const last = types.pop();
                msg += `one of type ${types.join(", ")}, or ${last}`;
            } else if (types.length === 2) {
                msg += `one of type ${types[0]} or ${types[1]}`;
            } else {
                msg += `of type ${types[0]}`;
            }
            if (instances.length > 0 || other.length > 0) {
                msg += " or ";
            }
        }
        if (instances.length > 0) {
            if (instances.length > 2) {
                const last = instances.pop();
                msg += `an instance of ${instances.join(", ")}, or ${last}`;
            } else {
                msg += `an instance of ${instances[0]}`;
                if (instances.length === 2) {
                    msg += ` or ${instances[1]}`;
                }
            }
            if (other.length > 0) {
                msg += " or ";
            }
        }
        if (other.length > 0) {
            if (other.length > 2) {
                const last = other.pop();
                msg += `one of ${other.join(", ")}, or ${last}`;
            } else if (other.length === 2) {
                msg += `one of ${other[0]} or ${other[1]}`;
            } else {
                if (other[0].toLowerCase() !== other[0]) {
                    msg += "an ";
                }
                msg += `${other[0]}`;
            }
        }
        super("ERR_INVALID_ARG_TYPE", `${msg}.${invalidArgTypeHelper(actual)}`);
    }
}
function uvErrmapGet(name) {
    return errorMap.get(name);
}
const uvUnmappedError = [
    "UNKNOWN",
    "unknown error"
];
hideStackFrames(function uvException(ctx) {
    const { 0: code , 1: uvmsg  } = uvErrmapGet(ctx.errno) || uvUnmappedError;
    let message = `${code}: ${ctx.message || uvmsg}, ${ctx.syscall}`;
    let path25;
    let dest;
    if (ctx.path) {
        path25 = ctx.path.toString();
        message += ` '${path25}'`;
    }
    if (ctx.dest) {
        dest = ctx.dest.toString();
        message += ` -> '${dest}'`;
    }
    const err = new Error(message);
    for (const prop1 of Object.keys(ctx)){
        if (prop1 === "message" || prop1 === "path" || prop1 === "dest") {
            continue;
        }
        err[prop1] = ctx[prop1];
    }
    err.code = code;
    if (path25) {
        err.path = path25;
    }
    if (dest) {
        err.dest = dest;
    }
    return captureLargerStackTrace(err);
});
const NumberIsSafeInteger = Number.isSafeInteger;
const DEFAULT_INSPECT_OPTIONS = {
    showHidden: false,
    depth: 2,
    colors: false,
    customInspect: true,
    showProxy: false,
    maxArrayLength: 100,
    maxStringLength: Infinity,
    breakLength: 80,
    compact: 3,
    sorted: false,
    getters: false
};
inspect.defaultOptions = DEFAULT_INSPECT_OPTIONS;
inspect.custom = Symbol.for("nodejs.util.inspect.custom");
function inspect(object, ...opts) {
    if (typeof object === "string" && !object.includes("'")) {
        return `'${object}'`;
    }
    opts = {
        ...DEFAULT_INSPECT_OPTIONS,
        ...opts
    };
    return Deno.inspect(object, {
        depth: opts.depth,
        iterableLimit: opts.maxArrayLength,
        compact: !!opts.compact,
        sorted: !!opts.sorted,
        showProxy: !!opts.showProxy
    });
}
class ERR_OUT_OF_RANGE extends RangeError {
    code = "ERR_OUT_OF_RANGE";
    constructor(str, range, received){
        super(`The value of "${str}" is out of range. It must be ${range}. Received ${received}`);
        const { name  } = this;
        this.name = `${name} [${this.code}]`;
        this.stack;
        this.name = name;
    }
}
function getSystemErrorName(code) {
    if (typeof code !== "number") {
        throw new ERR_INVALID_ARG_TYPE("err", "number", code);
    }
    if (code >= 0 || !NumberIsSafeInteger(code)) {
        throw new ERR_OUT_OF_RANGE("err", "a negative integer", code);
    }
    return errorMap.get(code)?.[0];
}
hideStackFrames(function errnoException(err, syscall, original) {
    const code = getSystemErrorName(err);
    const message = original ? `${syscall} ${code} ${original}` : `${syscall} ${code}`;
    const ex = new Error(message);
    ex.errno = err;
    ex.code = code;
    ex.syscall = syscall;
    return captureLargerStackTrace(ex);
});
hideStackFrames(function exceptionWithHostPort(err, syscall, address, port, additional) {
    const code = getSystemErrorName(err);
    let details = "";
    if (port && port > 0) {
        details = ` ${address}:${port}`;
    } else if (address) {
        details = ` ${address}`;
    }
    if (additional) {
        details += ` - Local (${additional})`;
    }
    const ex = new Error(`${syscall} ${code}${details}`);
    ex.errno = err;
    ex.code = code;
    ex.syscall = syscall;
    ex.address = address;
    if (port) {
        ex.port = port;
    }
    return captureLargerStackTrace(ex);
});
hideStackFrames(function(code, syscall, hostname) {
    let errno;
    if (typeof code === "number") {
        errno = code;
        if (code === codeMap.get("EAI_NODATA") || code === codeMap.get("EAI_NONAME")) {
            code = "ENOTFOUND";
        } else {
            code = getSystemErrorName(code);
        }
    }
    const message = `${syscall} ${code}${hostname ? ` ${hostname}` : ""}`;
    const ex = new Error(message);
    ex.errno = errno;
    ex.code = code;
    ex.syscall = syscall;
    if (hostname) {
        ex.hostname = hostname;
    }
    return captureLargerStackTrace(ex);
});
class NodeErrorAbstraction extends Error {
    code;
    constructor(name, code, message){
        super(message);
        this.code = code;
        this.name = name;
        this.stack = this.stack && `${name} [${this.code}]${this.stack.slice(20)}`;
    }
    toString() {
        return `${this.name} [${this.code}]: ${this.message}`;
    }
}
class NodeError extends NodeErrorAbstraction {
    constructor(code, message){
        super(Error.prototype.name, code, message);
    }
}
class NodeRangeError extends NodeErrorAbstraction {
    constructor(code, message){
        super(RangeError.prototype.name, code, message);
        Object.setPrototypeOf(this, RangeError.prototype);
    }
}
class NodeTypeError extends NodeErrorAbstraction {
    constructor(code, message){
        super(TypeError.prototype.name, code, message);
        Object.setPrototypeOf(this, TypeError.prototype);
    }
}
class ERR_INVALID_ARG_VALUE extends NodeTypeError {
    constructor(name, value, reason = "is invalid"){
        const type = name.includes(".") ? "property" : "argument";
        const inspected = inspect(value);
        super("ERR_INVALID_ARG_VALUE", `The ${type} '${name}' ${reason}. Received ${inspected}`);
    }
}
function invalidArgTypeHelper(input) {
    if (input == null) {
        return ` Received ${input}`;
    }
    if (typeof input === "function" && input.name) {
        return ` Received function ${input.name}`;
    }
    if (typeof input === "object") {
        if (input.constructor && input.constructor.name) {
            return ` Received an instance of ${input.constructor.name}`;
        }
        return ` Received ${inspect(input, {
            depth: -1
        })}`;
    }
    let inspected = inspect(input, {
        colors: false
    });
    if (inspected.length > 25) {
        inspected = `${inspected.slice(0, 25)}...`;
    }
    return ` Received type ${typeof input} (${inspected})`;
}
class ERR_BUFFER_OUT_OF_BOUNDS extends NodeRangeError {
    constructor(name){
        super("ERR_BUFFER_OUT_OF_BOUNDS", name ? `"${name}" is outside of buffer bounds` : "Attempt to access memory outside buffer bounds");
    }
}
class ERR_INVALID_CALLBACK extends NodeTypeError {
    constructor(object){
        super("ERR_INVALID_CALLBACK", `Callback must be a function. Received ${inspect(object)}`);
    }
}
class ERR_INVALID_FILE_URL_HOST extends NodeTypeError {
    constructor(x3){
        super("ERR_INVALID_FILE_URL_HOST", `File URL host must be "localhost" or empty on ${x3}`);
    }
}
class ERR_INVALID_FILE_URL_PATH extends NodeTypeError {
    constructor(x4){
        super("ERR_INVALID_FILE_URL_PATH", `File URL path ${x4}`);
    }
}
class ERR_METHOD_NOT_IMPLEMENTED extends NodeError {
    constructor(x5){
        super("ERR_METHOD_NOT_IMPLEMENTED", `The ${x5} method is not implemented`);
    }
}
class ERR_MISSING_ARGS extends NodeTypeError {
    constructor(...args){
        let msg = "The ";
        const len = args.length;
        const wrap = (a)=>`"${a}"`
        ;
        args = args.map((a)=>Array.isArray(a) ? a.map(wrap).join(" or ") : wrap(a)
        );
        switch(len){
            case 1:
                msg += `${args[0]} argument`;
                break;
            case 2:
                msg += `${args[0]} and ${args[1]} arguments`;
                break;
            default:
                msg += args.slice(0, len - 1).join(", ");
                msg += `, and ${args[len - 1]} arguments`;
                break;
        }
        super("ERR_MISSING_ARGS", `${msg} must be specified`);
    }
}
class ERR_MULTIPLE_CALLBACK extends NodeError {
    constructor(){
        super("ERR_MULTIPLE_CALLBACK", `Callback called multiple times`);
    }
}
class ERR_STREAM_ALREADY_FINISHED extends NodeError {
    constructor(x6){
        super("ERR_STREAM_ALREADY_FINISHED", `Cannot call ${x6} after a stream was finished`);
    }
}
class ERR_STREAM_CANNOT_PIPE extends NodeError {
    constructor(){
        super("ERR_STREAM_CANNOT_PIPE", `Cannot pipe, not readable`);
    }
}
class ERR_STREAM_DESTROYED extends NodeError {
    constructor(x7){
        super("ERR_STREAM_DESTROYED", `Cannot call ${x7} after a stream was destroyed`);
    }
}
class ERR_STREAM_NULL_VALUES extends NodeTypeError {
    constructor(){
        super("ERR_STREAM_NULL_VALUES", `May not write null values to stream`);
    }
}
class ERR_STREAM_PREMATURE_CLOSE extends NodeError {
    constructor(){
        super("ERR_STREAM_PREMATURE_CLOSE", `Premature close`);
    }
}
class ERR_STREAM_PUSH_AFTER_EOF extends NodeError {
    constructor(){
        super("ERR_STREAM_PUSH_AFTER_EOF", `stream.push() after EOF`);
    }
}
class ERR_STREAM_UNSHIFT_AFTER_END_EVENT extends NodeError {
    constructor(){
        super("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", `stream.unshift() after end event`);
    }
}
class ERR_STREAM_WRITE_AFTER_END extends NodeError {
    constructor(){
        super("ERR_STREAM_WRITE_AFTER_END", `write after end`);
    }
}
class ERR_UNKNOWN_ENCODING extends NodeTypeError {
    constructor(x8){
        super("ERR_UNKNOWN_ENCODING", `Unknown encoding: ${x8}`);
    }
}
class ERR_INVALID_OPT_VALUE extends NodeTypeError {
    constructor(name, value){
        super("ERR_INVALID_OPT_VALUE", `The value "${value}" is invalid for option "${name}"`);
    }
}
function buildReturnPropertyType(value) {
    if (value && value.constructor && value.constructor.name) {
        return `instance of ${value.constructor.name}`;
    } else {
        return `type ${typeof value}`;
    }
}
class ERR_INVALID_RETURN_VALUE extends NodeTypeError {
    constructor(input, name, value){
        super("ERR_INVALID_RETURN_VALUE", `Expected ${input} to be returned from the "${name}" function but got ${buildReturnPropertyType(value)}.`);
    }
}
class ERR_INVALID_URL_SCHEME extends NodeTypeError {
    constructor(expected){
        expected = Array.isArray(expected) ? expected : [
            expected
        ];
        const res = expected.length === 2 ? `one of scheme ${expected[0]} or ${expected[1]}` : `of scheme ${expected[0]}`;
        super("ERR_INVALID_URL_SCHEME", `The URL must be ${res}`);
    }
}
function fileURLToPath(path110) {
    if (typeof path110 === "string") path110 = new URL(path110);
    else if (!(path110 instanceof URL)) {
        throw new ERR_INVALID_ARG_TYPE("path", [
            "string",
            "URL"
        ], path110);
    }
    if (path110.protocol !== "file:") {
        throw new ERR_INVALID_URL_SCHEME("file");
    }
    return isWindows ? getPathFromURLWin(path110) : getPathFromURLPosix(path110);
}
function getPathFromURLWin(url) {
    const hostname = url.hostname;
    let pathname = url.pathname;
    for(let n7 = 0; n7 < pathname.length; n7++){
        if (pathname[n7] === "%") {
            const third = pathname.codePointAt(n7 + 2) | 32;
            if (pathname[n7 + 1] === "2" && third === 102 || pathname[n7 + 1] === "5" && third === 99) {
                throw new ERR_INVALID_FILE_URL_PATH("must not include encoded \\ or / characters");
            }
        }
    }
    pathname = pathname.replace(forwardSlashRegEx, "\\");
    pathname = decodeURIComponent(pathname);
    if (hostname !== "") {
        return `\\\\${hostname}${pathname}`;
    } else {
        const letter = pathname.codePointAt(1) | 32;
        const sep4 = pathname[2];
        if (letter < 97 || letter > 122 || sep4 !== ":") {
            throw new ERR_INVALID_FILE_URL_PATH("must be absolute");
        }
        return pathname.slice(1);
    }
}
function getPathFromURLPosix(url) {
    if (url.hostname !== "") {
        throw new ERR_INVALID_FILE_URL_HOST(osType);
    }
    const pathname = url.pathname;
    for(let n8 = 0; n8 < pathname.length; n8++){
        if (pathname[n8] === "%") {
            const third = pathname.codePointAt(n8 + 2) | 32;
            if (pathname[n8 + 1] === "2" && third === 102) {
                throw new ERR_INVALID_FILE_URL_PATH("must not include encoded / characters");
            }
        }
    }
    return decodeURIComponent(pathname);
}
function ensureArray(maybeArray) {
    return Array.isArray(maybeArray) ? maybeArray : [
        maybeArray
    ];
}
function createIterResult(value, done) {
    return {
        value,
        done
    };
}
let defaultMaxListeners = 10;
function validateMaxListeners(n9, name) {
    if (!Number.isInteger(n9) || Number.isNaN(n9) || n9 < 0) {
        throw new ERR_OUT_OF_RANGE(name, "a non-negative number", inspect(n9));
    }
}
function setMaxListeners(n10, ...eventTargets) {
    validateMaxListeners(n10, "n");
    if (eventTargets.length === 0) {
        defaultMaxListeners = n10;
    } else {
        for (const target of eventTargets){
            if (target instanceof EventEmitter) {
                target.setMaxListeners(n10);
            } else if (target instanceof EventTarget) {
                notImplemented("setMaxListeners currently does not support EventTarget");
            } else {
                throw new ERR_INVALID_ARG_TYPE("eventTargets", [
                    "EventEmitter",
                    "EventTarget"
                ], target);
            }
        }
    }
}
class EventEmitter {
    static captureRejectionSymbol = Symbol.for("nodejs.rejection");
    static errorMonitor = Symbol("events.errorMonitor");
    static get defaultMaxListeners() {
        return defaultMaxListeners;
    }
    static set defaultMaxListeners(value) {
        validateMaxListeners(value, "defaultMaxListeners");
        defaultMaxListeners = value;
    }
    maxListeners;
    _events;
    static  #init(emitter) {
        if (emitter._events == null || emitter._events === Object.getPrototypeOf(emitter)._events) {
            emitter._events = Object.create(null);
        }
    }
    static call = function call(thisArg) {
        EventEmitter.#init(thisArg);
    };
    constructor(){
        EventEmitter.#init(this);
    }
    _addListener(eventName, listener3, prepend) {
        this.checkListenerArgument(listener3);
        this.emit("newListener", eventName, this.unwrapListener(listener3));
        if (this.hasListeners(eventName)) {
            let listeners = this._events[eventName];
            if (!Array.isArray(listeners)) {
                listeners = [
                    listeners
                ];
                this._events[eventName] = listeners;
            }
            if (prepend) {
                listeners.unshift(listener3);
            } else {
                listeners.push(listener3);
            }
        } else if (this._events) {
            this._events[eventName] = listener3;
        } else {
            EventEmitter.#init(this);
            this._events[eventName] = listener3;
        }
        const max = this.getMaxListeners();
        if (max > 0 && this.listenerCount(eventName) > max) {
            const warning = new MaxListenersExceededWarning(this, eventName);
            this.warnIfNeeded(eventName, warning);
        }
        return this;
    }
    addListener(eventName, listener4) {
        return this._addListener(eventName, listener4, false);
    }
    emit(eventName, ...args) {
        if (this.hasListeners(eventName)) {
            if (eventName === "error" && this.hasListeners(EventEmitter.errorMonitor)) {
                this.emit(EventEmitter.errorMonitor, ...args);
            }
            const listeners = ensureArray(this._events[eventName]).slice();
            for (const listener5 of listeners){
                try {
                    listener5.apply(this, args);
                } catch (err) {
                    this.emit("error", err);
                }
            }
            return true;
        } else if (eventName === "error") {
            if (this.hasListeners(EventEmitter.errorMonitor)) {
                this.emit(EventEmitter.errorMonitor, ...args);
            }
            const errMsg = args.length > 0 ? args[0] : Error("Unhandled error.");
            throw errMsg;
        }
        return false;
    }
    eventNames() {
        return Reflect.ownKeys(this._events);
    }
    getMaxListeners() {
        return this.maxListeners == null ? EventEmitter.defaultMaxListeners : this.maxListeners;
    }
    listenerCount(eventName) {
        if (this.hasListeners(eventName)) {
            const maybeListeners = this._events[eventName];
            return Array.isArray(maybeListeners) ? maybeListeners.length : 1;
        } else {
            return 0;
        }
    }
    static listenerCount(emitter1, eventName) {
        return emitter1.listenerCount(eventName);
    }
    _listeners(target, eventName, unwrap) {
        if (!target.hasListeners(eventName)) {
            return [];
        }
        const eventListeners = target._events[eventName];
        if (Array.isArray(eventListeners)) {
            return unwrap ? this.unwrapListeners(eventListeners) : eventListeners.slice(0);
        } else {
            return [
                unwrap ? this.unwrapListener(eventListeners) : eventListeners, 
            ];
        }
    }
    unwrapListeners(arr) {
        const unwrappedListeners = new Array(arr.length);
        for(let i = 0; i < arr.length; i++){
            unwrappedListeners[i] = this.unwrapListener(arr[i]);
        }
        return unwrappedListeners;
    }
    unwrapListener(listener6) {
        return listener6["listener"] ?? listener6;
    }
    listeners(eventName) {
        return this._listeners(this, eventName, true);
    }
    rawListeners(eventName) {
        return this._listeners(this, eventName, false);
    }
    off(eventName, listener) {}
    on(eventName, listener) {}
    once(eventName, listener7) {
        const wrapped = this.onceWrap(eventName, listener7);
        this.on(eventName, wrapped);
        return this;
    }
    onceWrap(eventName, listener8) {
        this.checkListenerArgument(listener8);
        const wrapper = function(...args) {
            if (this.isCalled) {
                return;
            }
            this.context.removeListener(this.eventName, this.listener);
            this.isCalled = true;
            return this.listener.apply(this.context, args);
        };
        const wrapperContext = {
            eventName: eventName,
            listener: listener8,
            rawListener: wrapper,
            context: this
        };
        const wrapped = wrapper.bind(wrapperContext);
        wrapperContext.rawListener = wrapped;
        wrapped.listener = listener8;
        return wrapped;
    }
    prependListener(eventName, listener9) {
        return this._addListener(eventName, listener9, true);
    }
    prependOnceListener(eventName, listener10) {
        const wrapped = this.onceWrap(eventName, listener10);
        this.prependListener(eventName, wrapped);
        return this;
    }
    removeAllListeners(eventName1) {
        if (this._events === undefined) {
            return this;
        }
        if (eventName1) {
            if (this.hasListeners(eventName1)) {
                const listeners = ensureArray(this._events[eventName1]).slice().reverse();
                for (const listener11 of listeners){
                    this.removeListener(eventName1, this.unwrapListener(listener11));
                }
            }
        } else {
            const eventList = this.eventNames();
            eventList.forEach((eventName)=>{
                if (eventName === "removeListener") return;
                this.removeAllListeners(eventName);
            });
            this.removeAllListeners("removeListener");
        }
        return this;
    }
    removeListener(eventName, listener12) {
        this.checkListenerArgument(listener12);
        if (this.hasListeners(eventName)) {
            const maybeArr = this._events[eventName];
            assert(maybeArr);
            const arr = ensureArray(maybeArr);
            let listenerIndex = -1;
            for(let i = arr.length - 1; i >= 0; i--){
                if (arr[i] == listener12 || arr[i] && arr[i]["listener"] == listener12) {
                    listenerIndex = i;
                    break;
                }
            }
            if (listenerIndex >= 0) {
                arr.splice(listenerIndex, 1);
                if (arr.length === 0) {
                    delete this._events[eventName];
                } else if (arr.length === 1) {
                    this._events[eventName] = arr[0];
                }
                if (this._events.removeListener) {
                    this.emit("removeListener", eventName, listener12);
                }
            }
        }
        return this;
    }
    setMaxListeners(n11) {
        if (n11 !== Infinity) {
            validateMaxListeners(n11, "n");
        }
        this.maxListeners = n11;
        return this;
    }
    static once(emitter2, name) {
        return new Promise((resolve5, reject)=>{
            if (emitter2 instanceof EventTarget) {
                emitter2.addEventListener(name, (...args)=>{
                    resolve5(args);
                }, {
                    once: true,
                    passive: false,
                    capture: false
                });
                return;
            } else if (emitter2 instanceof EventEmitter) {
                const eventListener = (...args)=>{
                    if (errorListener !== undefined) {
                        emitter2.removeListener("error", errorListener);
                    }
                    resolve5(args);
                };
                let errorListener;
                if (name !== "error") {
                    errorListener = (err)=>{
                        emitter2.removeListener(name, eventListener);
                        reject(err);
                    };
                    emitter2.once("error", errorListener);
                }
                emitter2.once(name, eventListener);
                return;
            }
        });
    }
    static on(emitter3, event) {
        const unconsumedEventValues = [];
        const unconsumedPromises = [];
        let error = null;
        let finished1 = false;
        const iterator = {
            next () {
                const value = unconsumedEventValues.shift();
                if (value) {
                    return Promise.resolve(createIterResult(value, false));
                }
                if (error) {
                    const p10 = Promise.reject(error);
                    error = null;
                    return p10;
                }
                if (finished1) {
                    return Promise.resolve(createIterResult(undefined, true));
                }
                return new Promise(function(resolve6, reject) {
                    unconsumedPromises.push({
                        resolve: resolve6,
                        reject
                    });
                });
            },
            return () {
                emitter3.removeListener(event, eventHandler);
                emitter3.removeListener("error", errorHandler);
                finished1 = true;
                for (const promise of unconsumedPromises){
                    promise.resolve(createIterResult(undefined, true));
                }
                return Promise.resolve(createIterResult(undefined, true));
            },
            throw (err) {
                error = err;
                emitter3.removeListener(event, eventHandler);
                emitter3.removeListener("error", errorHandler);
            },
            [Symbol.asyncIterator] () {
                return this;
            }
        };
        emitter3.on(event, eventHandler);
        emitter3.on("error", errorHandler);
        return iterator;
        function eventHandler(...args) {
            const promise = unconsumedPromises.shift();
            if (promise) {
                promise.resolve(createIterResult(args, false));
            } else {
                unconsumedEventValues.push(args);
            }
        }
        function errorHandler(err) {
            finished1 = true;
            const toError = unconsumedPromises.shift();
            if (toError) {
                toError.reject(err);
            } else {
                error = err;
            }
            iterator.return();
        }
    }
    checkListenerArgument(listener13) {
        if (typeof listener13 !== "function") {
            throw new ERR_INVALID_ARG_TYPE("listener", "function", listener13);
        }
    }
    warnIfNeeded(eventName, warning) {
        const listeners = this._events[eventName];
        if (listeners.warned) {
            return;
        }
        listeners.warned = true;
        console.warn(warning);
        const maybeProcess = globalThis.process;
        if (maybeProcess instanceof EventEmitter) {
            maybeProcess.emit("warning", warning);
        }
    }
    hasListeners(eventName) {
        return this._events && Boolean(this._events[eventName]);
    }
}
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
class MaxListenersExceededWarning extends Error {
    emitter;
    type;
    count;
    constructor(emitter4, type){
        const listenerCount1 = emitter4.listenerCount(type);
        const message = "Possible EventEmitter memory leak detected. " + `${listenerCount1} ${type == null ? "null" : type.toString()} listeners added to [${emitter4.constructor.name}]. ` + " Use emitter.setMaxListeners() to increase limit";
        super(message);
        this.emitter = emitter4;
        this.type = type;
        this.count = listenerCount1;
        this.name = "MaxListenersExceededWarning";
    }
}
const captureRejectionSymbol = EventEmitter.captureRejectionSymbol;
EventEmitter.errorMonitor;
EventEmitter.listenerCount;
EventEmitter.on;
const once1 = EventEmitter.once;
const __default = Object.assign(EventEmitter, {
    EventEmitter,
    setMaxListeners
});
const hexTable = new TextEncoder().encode("0123456789abcdef");
function errInvalidByte(__byte) {
    return new TypeError(`Invalid byte '${String.fromCharCode(__byte)}'`);
}
function errLength() {
    return new RangeError("Odd length hex string");
}
function fromHexChar(__byte) {
    if (48 <= __byte && __byte <= 57) return __byte - 48;
    if (97 <= __byte && __byte <= 102) return __byte - 97 + 10;
    if (65 <= __byte && __byte <= 70) return __byte - 65 + 10;
    throw errInvalidByte(__byte);
}
function encode(src) {
    const dst = new Uint8Array(src.length * 2);
    for(let i = 0; i < dst.length; i++){
        const v = src[i];
        dst[i * 2] = hexTable[v >> 4];
        dst[i * 2 + 1] = hexTable[v & 15];
    }
    return dst;
}
function decode(src) {
    const dst = new Uint8Array(src.length / 2);
    for(let i = 0; i < dst.length; i++){
        const a = fromHexChar(src[i * 2]);
        const b4 = fromHexChar(src[i * 2 + 1]);
        dst[i] = a << 4 | b4;
    }
    if (src.length % 2 == 1) {
        fromHexChar(src[dst.length * 2]);
        throw errLength();
    }
    return dst;
}
const base64abc = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "+",
    "/", 
];
function encode1(data) {
    const uint8 = typeof data === "string" ? new TextEncoder().encode(data) : data instanceof Uint8Array ? data : new Uint8Array(data);
    let result = "", i;
    const l5 = uint8.length;
    for(i = 2; i < l5; i += 3){
        result += base64abc[uint8[i - 2] >> 2];
        result += base64abc[(uint8[i - 2] & 3) << 4 | uint8[i - 1] >> 4];
        result += base64abc[(uint8[i - 1] & 15) << 2 | uint8[i] >> 6];
        result += base64abc[uint8[i] & 63];
    }
    if (i === l5 + 1) {
        result += base64abc[uint8[i - 2] >> 2];
        result += base64abc[(uint8[i - 2] & 3) << 4];
        result += "==";
    }
    if (i === l5) {
        result += base64abc[uint8[i - 2] >> 2];
        result += base64abc[(uint8[i - 2] & 3) << 4 | uint8[i - 1] >> 4];
        result += base64abc[(uint8[i - 1] & 15) << 2];
        result += "=";
    }
    return result;
}
function decode1(b64) {
    const binString = atob(b64);
    const size = binString.length;
    const bytes = new Uint8Array(size);
    for(let i = 0; i < size; i++){
        bytes[i] = binString.charCodeAt(i);
    }
    return bytes;
}
const notImplementedEncodings = [
    "ascii",
    "binary",
    "latin1",
    "ucs2",
    "utf16le", 
];
function checkEncoding(encoding = "utf8", strict = true) {
    if (typeof encoding !== "string" || strict && encoding === "") {
        if (!strict) return "utf8";
        throw new TypeError(`Unknown encoding: ${encoding}`);
    }
    const normalized = normalizeEncoding(encoding);
    if (normalized === undefined) {
        throw new TypeError(`Unknown encoding: ${encoding}`);
    }
    if (notImplementedEncodings.includes(encoding)) {
        notImplemented(`"${encoding}" encoding`);
    }
    return normalized;
}
const encodingOps = {
    utf8: {
        byteLength: (string)=>new TextEncoder().encode(string).byteLength
    },
    ucs2: {
        byteLength: (string)=>string.length * 2
    },
    utf16le: {
        byteLength: (string)=>string.length * 2
    },
    latin1: {
        byteLength: (string)=>string.length
    },
    ascii: {
        byteLength: (string)=>string.length
    },
    base64: {
        byteLength: (string)=>base64ByteLength(string, string.length)
    },
    hex: {
        byteLength: (string)=>string.length >>> 1
    }
};
function base64ByteLength(str, bytes) {
    if (str.charCodeAt(bytes - 1) === 61) bytes--;
    if (bytes > 1 && str.charCodeAt(bytes - 1) === 61) bytes--;
    return bytes * 3 >>> 2;
}
class Buffer extends Uint8Array {
    static alloc(size, fill, encoding = "utf8") {
        if (typeof size !== "number") {
            throw new TypeError(`The "size" argument must be of type number. Received type ${typeof size}`);
        }
        const buf = new Buffer(size);
        if (size === 0) return buf;
        let bufFill;
        if (typeof fill === "string") {
            const clearEncoding = checkEncoding(encoding);
            if (typeof fill === "string" && fill.length === 1 && clearEncoding === "utf8") {
                buf.fill(fill.charCodeAt(0));
            } else bufFill = Buffer.from(fill, clearEncoding);
        } else if (typeof fill === "number") {
            buf.fill(fill);
        } else if (fill instanceof Uint8Array) {
            if (fill.length === 0) {
                throw new TypeError(`The argument "value" is invalid. Received ${fill.constructor.name} []`);
            }
            bufFill = fill;
        }
        if (bufFill) {
            if (bufFill.length > buf.length) {
                bufFill = bufFill.subarray(0, buf.length);
            }
            let offset = 0;
            while(offset < size){
                buf.set(bufFill, offset);
                offset += bufFill.length;
                if (offset + bufFill.length >= size) break;
            }
            if (offset !== size) {
                buf.set(bufFill.subarray(0, size - offset), offset);
            }
        }
        return buf;
    }
    static allocUnsafe(size) {
        return new Buffer(size);
    }
    static byteLength(string, encoding = "utf8") {
        if (typeof string != "string") return string.byteLength;
        encoding = normalizeEncoding(encoding) || "utf8";
        return encodingOps[encoding].byteLength(string);
    }
    static concat(list, totalLength) {
        if (totalLength == undefined) {
            totalLength = 0;
            for (const buf of list){
                totalLength += buf.length;
            }
        }
        const buffer = Buffer.allocUnsafe(totalLength);
        let pos = 0;
        for (const item of list){
            let buf;
            if (!(item instanceof Buffer)) {
                buf = Buffer.from(item);
            } else {
                buf = item;
            }
            buf.copy(buffer, pos);
            pos += buf.length;
        }
        return buffer;
    }
    static from(value, offsetOrEncoding, length) {
        const offset = typeof offsetOrEncoding === "string" ? undefined : offsetOrEncoding;
        let encoding = typeof offsetOrEncoding === "string" ? offsetOrEncoding : undefined;
        if (typeof value == "string") {
            encoding = checkEncoding(encoding, false);
            if (encoding === "hex") {
                return new Buffer(decode(new TextEncoder().encode(value)).buffer);
            }
            if (encoding === "base64") return new Buffer(decode1(value).buffer);
            return new Buffer(new TextEncoder().encode(value).buffer);
        }
        return new Buffer(value, offset, length);
    }
    static isBuffer(obj) {
        return obj instanceof Buffer;
    }
    static isEncoding(encoding) {
        return typeof encoding === "string" && encoding.length !== 0 && normalizeEncoding(encoding) !== undefined;
    }
    boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
            throw new ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) throw new ERR_BUFFER_OUT_OF_BOUNDS();
        throw new ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
    }
    readUIntBE(offset = 0, byteLength) {
        if (byteLength === 3 || byteLength === 5 || byteLength === 6) {
            notImplemented(`byteLength ${byteLength}`);
        }
        if (byteLength === 4) return this.readUInt32BE(offset);
        if (byteLength === 2) return this.readUInt16BE(offset);
        if (byteLength === 1) return this.readUInt8(offset);
        this.boundsError(byteLength, 4, "byteLength");
    }
    readUIntLE(offset = 0, byteLength) {
        if (byteLength === 3 || byteLength === 5 || byteLength === 6) {
            notImplemented(`byteLength ${byteLength}`);
        }
        if (byteLength === 4) return this.readUInt32LE(offset);
        if (byteLength === 2) return this.readUInt16LE(offset);
        if (byteLength === 1) return this.readUInt8(offset);
        this.boundsError(byteLength, 4, "byteLength");
    }
    copy(targetBuffer, targetStart = 0, sourceStart = 0, sourceEnd = this.length) {
        const sourceBuffer = this.subarray(sourceStart, sourceEnd).subarray(0, Math.max(0, targetBuffer.length - targetStart));
        if (sourceBuffer.length === 0) return 0;
        targetBuffer.set(sourceBuffer, targetStart);
        return sourceBuffer.length;
    }
    equals(otherBuffer) {
        if (!(otherBuffer instanceof Uint8Array)) {
            throw new TypeError(`The "otherBuffer" argument must be an instance of Buffer or Uint8Array. Received type ${typeof otherBuffer}`);
        }
        if (this === otherBuffer) return true;
        if (this.byteLength !== otherBuffer.byteLength) return false;
        for(let i = 0; i < this.length; i++){
            if (this[i] !== otherBuffer[i]) return false;
        }
        return true;
    }
    readBigInt64BE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getBigInt64(offset);
    }
    readBigInt64LE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getBigInt64(offset, true);
    }
    readBigUInt64BE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getBigUint64(offset);
    }
    readBigUInt64LE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getBigUint64(offset, true);
    }
    readDoubleBE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getFloat64(offset);
    }
    readDoubleLE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getFloat64(offset, true);
    }
    readFloatBE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getFloat32(offset);
    }
    readFloatLE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getFloat32(offset, true);
    }
    readInt8(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt8(offset);
    }
    readInt16BE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt16(offset);
    }
    readInt16LE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt16(offset, true);
    }
    readInt32BE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt32(offset);
    }
    readInt32LE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getInt32(offset, true);
    }
    readUInt8(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getUint8(offset);
    }
    readUInt16BE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getUint16(offset);
    }
    readUInt16LE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getUint16(offset, true);
    }
    readUInt32BE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getUint32(offset);
    }
    readUInt32LE(offset = 0) {
        return new DataView(this.buffer, this.byteOffset, this.byteLength).getUint32(offset, true);
    }
    slice(begin = 0, end = this.length) {
        return this.subarray(begin, end);
    }
    toJSON() {
        return {
            type: "Buffer",
            data: Array.from(this)
        };
    }
    toString(encoding = "utf8", start = 0, end = this.length) {
        encoding = checkEncoding(encoding);
        const b5 = this.subarray(start, end);
        if (encoding === "hex") return new TextDecoder().decode(encode(b5));
        if (encoding === "base64") return encode1(b5);
        return new TextDecoder(encoding).decode(b5);
    }
    write(string, offset = 0, length = this.length) {
        return new TextEncoder().encodeInto(string, this.subarray(offset, offset + length)).written;
    }
    writeBigInt64BE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setBigInt64(offset, value);
        return offset + 4;
    }
    writeBigInt64LE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setBigInt64(offset, value, true);
        return offset + 4;
    }
    writeBigUInt64BE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setBigUint64(offset, value);
        return offset + 4;
    }
    writeBigUInt64LE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setBigUint64(offset, value, true);
        return offset + 4;
    }
    writeDoubleBE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat64(offset, value);
        return offset + 8;
    }
    writeDoubleLE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat64(offset, value, true);
        return offset + 8;
    }
    writeFloatBE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat32(offset, value);
        return offset + 4;
    }
    writeFloatLE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setFloat32(offset, value, true);
        return offset + 4;
    }
    writeInt8(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setInt8(offset, value);
        return offset + 1;
    }
    writeInt16BE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setInt16(offset, value);
        return offset + 2;
    }
    writeInt16LE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setInt16(offset, value, true);
        return offset + 2;
    }
    writeInt32BE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setUint32(offset, value);
        return offset + 4;
    }
    writeInt32LE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setInt32(offset, value, true);
        return offset + 4;
    }
    writeUInt8(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setUint8(offset, value);
        return offset + 1;
    }
    writeUInt16BE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setUint16(offset, value);
        return offset + 2;
    }
    writeUInt16LE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setUint16(offset, value, true);
        return offset + 2;
    }
    writeUInt32BE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setUint32(offset, value);
        return offset + 4;
    }
    writeUInt32LE(value, offset = 0) {
        new DataView(this.buffer, this.byteOffset, this.byteLength).setUint32(offset, value, true);
        return offset + 4;
    }
}
for (const prop of [
    "alloc",
    "allocUnsafe",
    "byteLength",
    "from",
    "isBuffer",
    "isEncoding", 
]){
    Reflect.defineProperty(Buffer, prop, {
        enumerable: true
    });
}
new Proxy(Buffer, {
    apply (_target, _thisArg, args) {
        return Buffer.from(...args);
    }
});
globalThis.atob;
globalThis.btoa;
function isReadable(stream) {
    return typeof stream.readable === "boolean" || typeof stream.readableEnded === "boolean" || !!stream._readableState;
}
function isWritable(stream) {
    return typeof stream.writable === "boolean" || typeof stream.writableEnded === "boolean" || !!stream._writableState;
}
function isWritableFinished(stream) {
    if (stream.writableFinished) return true;
    const wState = stream._writableState;
    if (!wState || wState.errored) return false;
    return wState.finished || wState.ended && wState.length === 0;
}
function nop() {}
function isReadableEnded(stream) {
    if (stream.readableEnded) return true;
    const rState = stream._readableState;
    if (!rState || rState.errored) return false;
    return rState.endEmitted || rState.ended && rState.length === 0;
}
function eos(stream, x9, y4) {
    let opts;
    let callback;
    if (!y4) {
        if (typeof x9 !== "function") {
            throw new ERR_INVALID_ARG_TYPE("callback", "function", x9);
        }
        opts = {};
        callback = x9;
    } else {
        if (!x9 || Array.isArray(x9) || typeof x9 !== "object") {
            throw new ERR_INVALID_ARG_TYPE("opts", "object", x9);
        }
        opts = x9;
        if (typeof y4 !== "function") {
            throw new ERR_INVALID_ARG_TYPE("callback", "function", y4);
        }
        callback = y4;
    }
    callback = once(callback);
    const readable = opts.readable ?? isReadable(stream);
    const writable = opts.writable ?? isWritable(stream);
    const wState = stream._writableState;
    const rState = stream._readableState;
    const validState = wState || rState;
    const onlegacyfinish = ()=>{
        if (!stream.writable) {
            onfinish();
        }
    };
    let willEmitClose = validState?.autoDestroy && validState?.emitClose && validState?.closed === false && isReadable(stream) === readable && isWritable(stream) === writable;
    let writableFinished = stream.writableFinished || wState?.finished;
    const onfinish = ()=>{
        writableFinished = true;
        if (stream.destroyed) {
            willEmitClose = false;
        }
        if (willEmitClose && (!stream.readable || readable)) {
            return;
        }
        if (!readable || readableEnded) {
            callback.call(stream);
        }
    };
    let readableEnded = stream.readableEnded || rState?.endEmitted;
    const onend = ()=>{
        readableEnded = true;
        if (stream.destroyed) {
            willEmitClose = false;
        }
        if (willEmitClose && (!stream.writable || writable)) {
            return;
        }
        if (!writable || writableFinished) {
            callback.call(stream);
        }
    };
    const onerror = (err)=>{
        callback.call(stream, err);
    };
    const onclose = ()=>{
        if (readable && !readableEnded) {
            if (!isReadableEnded(stream)) {
                return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
            }
        }
        if (writable && !writableFinished) {
            if (!isWritableFinished(stream)) {
                return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
            }
        }
        callback.call(stream);
    };
    if (writable && !wState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    const closed = wState?.closed || rState?.closed || wState?.errorEmitted || rState?.errorEmitted || (!writable || wState?.finished) && (!readable || rState?.endEmitted);
    if (closed) {
        queueMicrotask(callback);
    }
    return function() {
        callback = nop;
        stream.removeListener("aborted", onclose);
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
function destroyer(stream, err) {
    if (typeof stream.destroy === "function") {
        return stream.destroy(err);
    }
    if (typeof stream.close === "function") {
        return stream.close();
    }
}
class Stream extends __default {
    constructor(){
        super();
    }
    static _isUint8Array = mod2.isUint8Array;
    static _uint8ArrayToBuffer = (chunk)=>Buffer.from(chunk)
    ;
    pipe(dest, options) {
        const source = this;
        if (options?.end ?? true) {
            source.on("end", onend);
            source.on("close", onclose);
        }
        let didOnEnd = false;
        function onend() {
            if (didOnEnd) return;
            didOnEnd = true;
            dest.end();
        }
        function onclose() {
            if (didOnEnd) return;
            didOnEnd = true;
            if (typeof dest.destroy === "function") dest.destroy();
        }
        function onerror(er) {
            cleanup();
            if (this.listenerCount("error") === 0) {
                throw er;
            }
        }
        source.on("error", onerror);
        dest.on("error", onerror);
        function cleanup() {
            source.removeListener("end", onend);
            source.removeListener("close", onclose);
            source.removeListener("error", onerror);
            dest.removeListener("error", onerror);
            source.removeListener("end", cleanup);
            source.removeListener("close", cleanup);
            dest.removeListener("close", cleanup);
        }
        source.on("end", cleanup);
        source.on("close", cleanup);
        dest.on("close", cleanup);
        dest.emit("pipe", source);
        return dest;
    }
    static Readable;
    static Writable;
    static Duplex;
    static Transform;
    static PassThrough;
    static pipeline;
    static finished;
    static promises;
    static Stream;
}
class BufferList {
    head = null;
    tail = null;
    length;
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    push(v4) {
        const entry = {
            data: v4,
            next: null
        };
        if (this.length > 0) {
            this.tail.next = entry;
        } else {
            this.head = entry;
        }
        this.tail = entry;
        ++this.length;
    }
    unshift(v5) {
        const entry = {
            data: v5,
            next: this.head
        };
        if (this.length === 0) {
            this.tail = entry;
        }
        this.head = entry;
        ++this.length;
    }
    shift() {
        if (this.length === 0) {
            return;
        }
        const ret = this.head.data;
        if (this.length === 1) {
            this.head = this.tail = null;
        } else {
            this.head = this.head.next;
        }
        --this.length;
        return ret;
    }
    clear() {
        this.head = this.tail = null;
        this.length = 0;
    }
    join(s7) {
        if (this.length === 0) {
            return "";
        }
        let p11 = this.head;
        let ret = "" + p11.data;
        p11 = p11.next;
        while(p11){
            ret += s7 + p11.data;
            p11 = p11.next;
        }
        return ret;
    }
    concat(n12) {
        if (this.length === 0) {
            return Buffer.alloc(0);
        }
        const ret = Buffer.allocUnsafe(n12 >>> 0);
        let p12 = this.head;
        let i = 0;
        while(p12){
            ret.set(p12.data, i);
            i += p12.data.length;
            p12 = p12.next;
        }
        return ret;
    }
    consume(n13, hasStrings) {
        const data = this.head.data;
        if (n13 < data.length) {
            const slice = data.slice(0, n13);
            this.head.data = data.slice(n13);
            return slice;
        }
        if (n13 === data.length) {
            return this.shift();
        }
        return hasStrings ? this._getString(n13) : this._getBuffer(n13);
    }
    first() {
        return this.head.data;
    }
    *[Symbol.iterator]() {
        for(let p13 = this.head; p13; p13 = p13.next){
            yield p13.data;
        }
    }
    _getString(n14) {
        let ret = "";
        let p14 = this.head;
        let c8 = 0;
        p14 = p14.next;
        do {
            const str = p14.data;
            if (n14 > str.length) {
                ret += str;
                n14 -= str.length;
            } else {
                if (n14 === str.length) {
                    ret += str;
                    ++c8;
                    if (p14.next) {
                        this.head = p14.next;
                    } else {
                        this.head = this.tail = null;
                    }
                } else {
                    ret += str.slice(0, n14);
                    this.head = p14;
                    p14.data = str.slice(n14);
                }
                break;
            }
            ++c8;
            p14 = p14.next;
        }while (p14)
        this.length -= c8;
        return ret;
    }
    _getBuffer(n15) {
        const ret = Buffer.allocUnsafe(n15);
        const retLen = n15;
        let p15 = this.head;
        let c9 = 0;
        p15 = p15.next;
        do {
            const buf = p15.data;
            if (n15 > buf.length) {
                ret.set(buf, retLen - n15);
                n15 -= buf.length;
            } else {
                if (n15 === buf.length) {
                    ret.set(buf, retLen - n15);
                    ++c9;
                    if (p15.next) {
                        this.head = p15.next;
                    } else {
                        this.head = this.tail = null;
                    }
                } else {
                    ret.set(new Uint8Array(buf.buffer, buf.byteOffset, n15), retLen - n15);
                    this.head = p15;
                    p15.data = buf.slice(n15);
                }
                break;
            }
            ++c9;
            p15 = p15.next;
        }while (p15)
        this.length -= c9;
        return ret;
    }
}
var NotImplemented;
(function(NotImplemented1) {
    NotImplemented1[NotImplemented1["ascii"] = 0] = "ascii";
    NotImplemented1[NotImplemented1["latin1"] = 1] = "latin1";
    NotImplemented1[NotImplemented1["utf16le"] = 2] = "utf16le";
})(NotImplemented || (NotImplemented = {}));
function normalizeEncoding1(enc) {
    const encoding = normalizeEncoding(enc ?? null);
    if (encoding && encoding in NotImplemented) notImplemented(encoding);
    if (!encoding && typeof enc === "string" && enc.toLowerCase() !== "raw") {
        throw new Error(`Unknown encoding: ${enc}`);
    }
    return String(encoding);
}
function utf8CheckByte(__byte) {
    if (__byte <= 127) return 0;
    else if (__byte >> 5 === 6) return 2;
    else if (__byte >> 4 === 14) return 3;
    else if (__byte >> 3 === 30) return 4;
    return __byte >> 6 === 2 ? -1 : -2;
}
function utf8CheckIncomplete(self, buf, i) {
    let j7 = buf.length - 1;
    if (j7 < i) return 0;
    let nb = utf8CheckByte(buf[j7]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j7 < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j7]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j7 < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j7]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
function utf8CheckExtraBytes(self, buf) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return "\ufffd";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return "\ufffd";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return "\ufffd";
            }
        }
    }
}
function utf8FillLastComplete(buf) {
    const p16 = this.lastTotal - this.lastNeed;
    const r13 = utf8CheckExtraBytes(this, buf);
    if (r13 !== undefined) return r13;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p16, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p16, 0, buf.length);
    this.lastNeed -= buf.length;
}
function utf8FillLastIncomplete(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
}
function utf8Text(buf, i) {
    const total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    const end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
function utf8End(buf) {
    const r14 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r14 + "\ufffd";
    return r14;
}
function utf8Write(buf) {
    if (typeof buf === "string") {
        return buf;
    }
    if (buf.length === 0) return "";
    let r15;
    let i;
    if (this.lastNeed) {
        r15 = this.fillLast(buf);
        if (r15 === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else {
        i = 0;
    }
    if (i < buf.length) return r15 ? r15 + this.text(buf, i) : this.text(buf, i);
    return r15 || "";
}
function base64Text(buf, i) {
    const n16 = (buf.length - i) % 3;
    if (n16 === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n16;
    this.lastTotal = 3;
    if (n16 === 1) {
        this.lastChar[0] = buf[buf.length - 1];
    } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n16);
}
function base64End(buf) {
    const r16 = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        return r16 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    }
    return r16;
}
function simpleWrite(buf) {
    if (typeof buf === "string") {
        return buf;
    }
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}
class StringDecoderBase {
    encoding;
    lastChar;
    lastNeed = 0;
    lastTotal = 0;
    constructor(encoding, nb){
        this.encoding = encoding;
        this.lastChar = Buffer.allocUnsafe(nb);
    }
}
class Base64Decoder extends StringDecoderBase {
    end = base64End;
    fillLast = utf8FillLastIncomplete;
    text = base64Text;
    write = utf8Write;
    constructor(encoding){
        super(normalizeEncoding1(encoding), 3);
    }
}
class GenericDecoder extends StringDecoderBase {
    end = simpleEnd;
    fillLast = undefined;
    text = utf8Text;
    write = simpleWrite;
    constructor(encoding){
        super(normalizeEncoding1(encoding), 4);
    }
}
class Utf8Decoder extends StringDecoderBase {
    end = utf8End;
    fillLast = utf8FillLastComplete;
    text = utf8Text;
    write = utf8Write;
    constructor(encoding){
        super(normalizeEncoding1(encoding), 4);
    }
}
class StringDecoder {
    encoding;
    end;
    fillLast;
    lastChar;
    lastNeed;
    lastTotal;
    text;
    write;
    constructor(encoding){
        let decoder;
        switch(encoding){
            case "utf8":
                decoder = new Utf8Decoder(encoding);
                break;
            case "base64":
                decoder = new Base64Decoder(encoding);
                break;
            default:
                decoder = new GenericDecoder(encoding);
        }
        this.encoding = decoder.encoding;
        this.end = decoder.end;
        this.fillLast = decoder.fillLast;
        this.lastChar = decoder.lastChar;
        this.lastNeed = decoder.lastNeed;
        this.lastTotal = decoder.lastTotal;
        this.text = decoder.text;
        this.write = decoder.write;
    }
}
new Proxy(StringDecoder, {
    apply (_target, thisArg, args) {
        return Object.assign(thisArg, new StringDecoder(...args));
    }
});
Symbol("kConstruct");
const kDestroy = Symbol("kDestroy");
const kPaused = Symbol("kPaused");
var State;
(function(State1) {
    State1[State1["PASSTHROUGH"] = 0] = "PASSTHROUGH";
    State1[State1["PERCENT"] = 1] = "PERCENT";
    State1[State1["POSITIONAL"] = 2] = "POSITIONAL";
    State1[State1["PRECISION"] = 3] = "PRECISION";
    State1[State1["WIDTH"] = 4] = "WIDTH";
})(State || (State = {}));
var WorP;
(function(WorP1) {
    WorP1[WorP1["WIDTH"] = 0] = "WIDTH";
    WorP1[WorP1["PRECISION"] = 1] = "PRECISION";
})(WorP || (WorP = {}));
class Flags {
    plus;
    dash;
    sharp;
    space;
    zero;
    lessthan;
    width = -1;
    precision = -1;
}
const min = Math.min;
const UNICODE_REPLACEMENT_CHARACTER = "\ufffd";
const FLOAT_REGEXP = /(-?)(\d)\.?(\d*)e([+-])(\d+)/;
var F1;
(function(F4) {
    F4[F4["sign"] = 1] = "sign";
    F4[F4["mantissa"] = 2] = "mantissa";
    F4[F4["fractional"] = 3] = "fractional";
    F4[F4["esign"] = 4] = "esign";
    F4[F4["exponent"] = 5] = "exponent";
})(F1 || (F1 = {}));
class Printf {
    format;
    args;
    i;
    state = State.PASSTHROUGH;
    verb = "";
    buf = "";
    argNum = 0;
    flags = new Flags();
    haveSeen;
    tmpError;
    constructor(format3, ...args){
        this.format = format3;
        this.args = args;
        this.haveSeen = new Array(args.length);
        this.i = 0;
    }
    doPrintf() {
        for(; this.i < this.format.length; ++this.i){
            const c10 = this.format[this.i];
            switch(this.state){
                case State.PASSTHROUGH:
                    if (c10 === "%") {
                        this.state = State.PERCENT;
                    } else {
                        this.buf += c10;
                    }
                    break;
                case State.PERCENT:
                    if (c10 === "%") {
                        this.buf += c10;
                        this.state = State.PASSTHROUGH;
                    } else {
                        this.handleFormat();
                    }
                    break;
                default:
                    throw Error("Should be unreachable, certainly a bug in the lib.");
            }
        }
        let extras = false;
        let err = "%!(EXTRA";
        for(let i = 0; i !== this.haveSeen.length; ++i){
            if (!this.haveSeen[i]) {
                extras = true;
                err += ` '${Deno.inspect(this.args[i])}'`;
            }
        }
        err += ")";
        if (extras) {
            this.buf += err;
        }
        return this.buf;
    }
    handleFormat() {
        this.flags = new Flags();
        const flags = this.flags;
        for(; this.i < this.format.length; ++this.i){
            const c11 = this.format[this.i];
            switch(this.state){
                case State.PERCENT:
                    switch(c11){
                        case "[":
                            this.handlePositional();
                            this.state = State.POSITIONAL;
                            break;
                        case "+":
                            flags.plus = true;
                            break;
                        case "<":
                            flags.lessthan = true;
                            break;
                        case "-":
                            flags.dash = true;
                            flags.zero = false;
                            break;
                        case "#":
                            flags.sharp = true;
                            break;
                        case " ":
                            flags.space = true;
                            break;
                        case "0":
                            flags.zero = !flags.dash;
                            break;
                        default:
                            if ("1" <= c11 && c11 <= "9" || c11 === "." || c11 === "*") {
                                if (c11 === ".") {
                                    this.flags.precision = 0;
                                    this.state = State.PRECISION;
                                    this.i++;
                                } else {
                                    this.state = State.WIDTH;
                                }
                                this.handleWidthAndPrecision(flags);
                            } else {
                                this.handleVerb();
                                return;
                            }
                    }
                    break;
                case State.POSITIONAL:
                    if (c11 === "*") {
                        const worp = this.flags.precision === -1 ? WorP.WIDTH : WorP.PRECISION;
                        this.handleWidthOrPrecisionRef(worp);
                        this.state = State.PERCENT;
                        break;
                    } else {
                        this.handleVerb();
                        return;
                    }
                default:
                    throw new Error(`Should not be here ${this.state}, library bug!`);
            }
        }
    }
    handleWidthOrPrecisionRef(wOrP) {
        if (this.argNum >= this.args.length) {
            return;
        }
        const arg = this.args[this.argNum];
        this.haveSeen[this.argNum] = true;
        if (typeof arg === "number") {
            switch(wOrP){
                case WorP.WIDTH:
                    this.flags.width = arg;
                    break;
                default:
                    this.flags.precision = arg;
            }
        } else {
            const tmp = wOrP === WorP.WIDTH ? "WIDTH" : "PREC";
            this.tmpError = `%!(BAD ${tmp} '${this.args[this.argNum]}')`;
        }
        this.argNum++;
    }
    handleWidthAndPrecision(flags) {
        const fmt = this.format;
        for(; this.i !== this.format.length; ++this.i){
            const c12 = fmt[this.i];
            switch(this.state){
                case State.WIDTH:
                    switch(c12){
                        case ".":
                            this.flags.precision = 0;
                            this.state = State.PRECISION;
                            break;
                        case "*":
                            this.handleWidthOrPrecisionRef(WorP.WIDTH);
                            break;
                        default:
                            {
                                const val = parseInt(c12);
                                if (isNaN(val)) {
                                    this.i--;
                                    this.state = State.PERCENT;
                                    return;
                                }
                                flags.width = flags.width == -1 ? 0 : flags.width;
                                flags.width *= 10;
                                flags.width += val;
                            }
                    }
                    break;
                case State.PRECISION:
                    {
                        if (c12 === "*") {
                            this.handleWidthOrPrecisionRef(WorP.PRECISION);
                            break;
                        }
                        const val = parseInt(c12);
                        if (isNaN(val)) {
                            this.i--;
                            this.state = State.PERCENT;
                            return;
                        }
                        flags.precision *= 10;
                        flags.precision += val;
                        break;
                    }
                default:
                    throw new Error("can't be here. bug.");
            }
        }
    }
    handlePositional() {
        if (this.format[this.i] !== "[") {
            throw new Error("Can't happen? Bug.");
        }
        let positional = 0;
        const format4 = this.format;
        this.i++;
        let err = false;
        for(; this.i !== this.format.length; ++this.i){
            if (format4[this.i] === "]") {
                break;
            }
            positional *= 10;
            const val = parseInt(format4[this.i]);
            if (isNaN(val)) {
                this.tmpError = "%!(BAD INDEX)";
                err = true;
            }
            positional += val;
        }
        if (positional - 1 >= this.args.length) {
            this.tmpError = "%!(BAD INDEX)";
            err = true;
        }
        this.argNum = err ? this.argNum : positional - 1;
        return;
    }
    handleLessThan() {
        const arg = this.args[this.argNum];
        if ((arg || {}).constructor.name !== "Array") {
            throw new Error(`arg ${arg} is not an array. Todo better error handling`);
        }
        let str = "[ ";
        for(let i = 0; i !== arg.length; ++i){
            if (i !== 0) str += ", ";
            str += this._handleVerb(arg[i]);
        }
        return str + " ]";
    }
    handleVerb() {
        const verb = this.format[this.i];
        this.verb = verb;
        if (this.tmpError) {
            this.buf += this.tmpError;
            this.tmpError = undefined;
            if (this.argNum < this.haveSeen.length) {
                this.haveSeen[this.argNum] = true;
            }
        } else if (this.args.length <= this.argNum) {
            this.buf += `%!(MISSING '${verb}')`;
        } else {
            const arg = this.args[this.argNum];
            this.haveSeen[this.argNum] = true;
            if (this.flags.lessthan) {
                this.buf += this.handleLessThan();
            } else {
                this.buf += this._handleVerb(arg);
            }
        }
        this.argNum++;
        this.state = State.PASSTHROUGH;
    }
    _handleVerb(arg) {
        switch(this.verb){
            case "t":
                return this.pad(arg.toString());
            case "b":
                return this.fmtNumber(arg, 2);
            case "c":
                return this.fmtNumberCodePoint(arg);
            case "d":
                return this.fmtNumber(arg, 10);
            case "o":
                return this.fmtNumber(arg, 8);
            case "x":
                return this.fmtHex(arg);
            case "X":
                return this.fmtHex(arg, true);
            case "e":
                return this.fmtFloatE(arg);
            case "E":
                return this.fmtFloatE(arg, true);
            case "f":
            case "F":
                return this.fmtFloatF(arg);
            case "g":
                return this.fmtFloatG(arg);
            case "G":
                return this.fmtFloatG(arg, true);
            case "s":
                return this.fmtString(arg);
            case "T":
                return this.fmtString(typeof arg);
            case "v":
                return this.fmtV(arg);
            case "j":
                return this.fmtJ(arg);
            default:
                return `%!(BAD VERB '${this.verb}')`;
        }
    }
    pad(s8) {
        const padding = this.flags.zero ? "0" : " ";
        if (this.flags.dash) {
            return s8.padEnd(this.flags.width, padding);
        }
        return s8.padStart(this.flags.width, padding);
    }
    padNum(nStr, neg) {
        let sign;
        if (neg) {
            sign = "-";
        } else if (this.flags.plus || this.flags.space) {
            sign = this.flags.plus ? "+" : " ";
        } else {
            sign = "";
        }
        const zero = this.flags.zero;
        if (!zero) {
            nStr = sign + nStr;
        }
        const pad = zero ? "0" : " ";
        const len = zero ? this.flags.width - sign.length : this.flags.width;
        if (this.flags.dash) {
            nStr = nStr.padEnd(len, pad);
        } else {
            nStr = nStr.padStart(len, pad);
        }
        if (zero) {
            nStr = sign + nStr;
        }
        return nStr;
    }
    fmtNumber(n17, radix, upcase = false) {
        let num = Math.abs(n17).toString(radix);
        const prec = this.flags.precision;
        if (prec !== -1) {
            this.flags.zero = false;
            num = n17 === 0 && prec === 0 ? "" : num;
            while(num.length < prec){
                num = "0" + num;
            }
        }
        let prefix = "";
        if (this.flags.sharp) {
            switch(radix){
                case 2:
                    prefix += "0b";
                    break;
                case 8:
                    prefix += num.startsWith("0") ? "" : "0";
                    break;
                case 16:
                    prefix += "0x";
                    break;
                default:
                    throw new Error("cannot handle base: " + radix);
            }
        }
        num = num.length === 0 ? num : prefix + num;
        if (upcase) {
            num = num.toUpperCase();
        }
        return this.padNum(num, n17 < 0);
    }
    fmtNumberCodePoint(n18) {
        let s9 = "";
        try {
            s9 = String.fromCodePoint(n18);
        } catch  {
            s9 = UNICODE_REPLACEMENT_CHARACTER;
        }
        return this.pad(s9);
    }
    fmtFloatSpecial(n19) {
        if (isNaN(n19)) {
            this.flags.zero = false;
            return this.padNum("NaN", false);
        }
        if (n19 === Number.POSITIVE_INFINITY) {
            this.flags.zero = false;
            this.flags.plus = true;
            return this.padNum("Inf", false);
        }
        if (n19 === Number.NEGATIVE_INFINITY) {
            this.flags.zero = false;
            return this.padNum("Inf", true);
        }
        return "";
    }
    roundFractionToPrecision(fractional, precision) {
        if (fractional.length > precision) {
            fractional = "1" + fractional;
            let tmp = parseInt(fractional.substr(0, precision + 2)) / 10;
            tmp = Math.round(tmp);
            fractional = Math.floor(tmp).toString();
            fractional = fractional.substr(1);
        } else {
            while(fractional.length < precision){
                fractional += "0";
            }
        }
        return fractional;
    }
    fmtFloatE(n20, upcase = false) {
        const special = this.fmtFloatSpecial(n20);
        if (special !== "") {
            return special;
        }
        const m4 = n20.toExponential().match(FLOAT_REGEXP);
        if (!m4) {
            throw Error("can't happen, bug");
        }
        let fractional = m4[F1.fractional];
        const precision = this.flags.precision !== -1 ? this.flags.precision : 6;
        fractional = this.roundFractionToPrecision(fractional, precision);
        let e15 = m4[F1.exponent];
        e15 = e15.length == 1 ? "0" + e15 : e15;
        const val = `${m4[F1.mantissa]}.${fractional}${upcase ? "E" : "e"}${m4[F1.esign]}${e15}`;
        return this.padNum(val, n20 < 0);
    }
    fmtFloatF(n110) {
        const special = this.fmtFloatSpecial(n110);
        if (special !== "") {
            return special;
        }
        function expandNumber(n21) {
            if (Number.isSafeInteger(n21)) {
                return n21.toString() + ".";
            }
            const t8 = n21.toExponential().split("e");
            let m5 = t8[0].replace(".", "");
            const e16 = parseInt(t8[1]);
            if (e16 < 0) {
                let nStr = "0.";
                for(let i = 0; i !== Math.abs(e16) - 1; ++i){
                    nStr += "0";
                }
                return nStr += m5;
            } else {
                const splIdx = e16 + 1;
                while(m5.length < splIdx){
                    m5 += "0";
                }
                return m5.substr(0, splIdx) + "." + m5.substr(splIdx);
            }
        }
        const val = expandNumber(Math.abs(n110));
        const arr = val.split(".");
        const dig = arr[0];
        let fractional = arr[1];
        const precision = this.flags.precision !== -1 ? this.flags.precision : 6;
        fractional = this.roundFractionToPrecision(fractional, precision);
        return this.padNum(`${dig}.${fractional}`, n110 < 0);
    }
    fmtFloatG(n22, upcase = false) {
        const special = this.fmtFloatSpecial(n22);
        if (special !== "") {
            return special;
        }
        let P3 = this.flags.precision !== -1 ? this.flags.precision : 6;
        P3 = P3 === 0 ? 1 : P3;
        const m6 = n22.toExponential().match(FLOAT_REGEXP);
        if (!m6) {
            throw Error("can't happen");
        }
        const X3 = parseInt(m6[F1.exponent]) * (m6[F1.esign] === "-" ? -1 : 1);
        let nStr = "";
        if (P3 > X3 && X3 >= -4) {
            this.flags.precision = P3 - (X3 + 1);
            nStr = this.fmtFloatF(n22);
            if (!this.flags.sharp) {
                nStr = nStr.replace(/\.?0*$/, "");
            }
        } else {
            this.flags.precision = P3 - 1;
            nStr = this.fmtFloatE(n22);
            if (!this.flags.sharp) {
                nStr = nStr.replace(/\.?0*e/, upcase ? "E" : "e");
            }
        }
        return nStr;
    }
    fmtString(s10) {
        if (this.flags.precision !== -1) {
            s10 = s10.substr(0, this.flags.precision);
        }
        return this.pad(s10);
    }
    fmtHex(val, upper = false) {
        switch(typeof val){
            case "number":
                return this.fmtNumber(val, 16, upper);
            case "string":
                {
                    const sharp = this.flags.sharp && val.length !== 0;
                    let hex = sharp ? "0x" : "";
                    const prec = this.flags.precision;
                    const end = prec !== -1 ? min(prec, val.length) : val.length;
                    for(let i = 0; i !== end; ++i){
                        if (i !== 0 && this.flags.space) {
                            hex += sharp ? " 0x" : " ";
                        }
                        const c13 = (val.charCodeAt(i) & 255).toString(16);
                        hex += c13.length === 1 ? `0${c13}` : c13;
                    }
                    if (upper) {
                        hex = hex.toUpperCase();
                    }
                    return this.pad(hex);
                }
            default:
                throw new Error("currently only number and string are implemented for hex");
        }
    }
    fmtV(val) {
        if (this.flags.sharp) {
            const options = this.flags.precision !== -1 ? {
                depth: this.flags.precision
            } : {};
            return this.pad(Deno.inspect(val, options));
        } else {
            const p17 = this.flags.precision;
            return p17 === -1 ? val.toString() : val.toString().substr(0, p17);
        }
    }
    fmtJ(val) {
        return JSON.stringify(val);
    }
}
function sprintf(format5, ...args) {
    const printf1 = new Printf(format5, ...args);
    return printf1.doPrintf();
}
let debugImpls;
let testEnabled;
function initializeDebugEnv(debugEnv) {
    debugImpls = Object.create(null);
    if (debugEnv) {
        debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replaceAll("*", ".*").replaceAll(",", "$|^");
        const debugEnvRegex = new RegExp(`^${debugEnv}$`, "i");
        testEnabled = (str)=>debugEnvRegex.exec(str) !== null
        ;
    } else {
        testEnabled = ()=>false
        ;
    }
}
function emitWarningIfNeeded(set) {
    if ("HTTP" === set || "HTTP2" === set) {
        console.warn("Setting the NODE_DEBUG environment variable " + "to '" + set.toLowerCase() + "' can expose sensitive " + "data (such as passwords, tokens and authentication headers) " + "in the resulting log.");
    }
}
const noop = ()=>{};
function debuglogImpl(enabled, set) {
    if (debugImpls[set] === undefined) {
        if (enabled) {
            emitWarningIfNeeded(set);
            debugImpls[set] = function debug(...args) {
                const msg = args.map((arg)=>inspect(arg)
                ).join(" ");
                console.error(sprintf("%s %s: %s\n", set, String(Deno.pid), msg));
            };
        } else {
            debugImpls[set] = noop;
        }
    }
    return debugImpls[set];
}
function debuglog(set, cb) {
    function init() {
        set = set.toUpperCase();
        enabled = testEnabled(set);
    }
    let debug4 = (...args)=>{
        init();
        debug4 = debuglogImpl(enabled, set);
        if (typeof cb === "function") {
            cb(debug4);
        }
        return debug4(...args);
    };
    let enabled;
    let test = ()=>{
        init();
        test = ()=>enabled
        ;
        return enabled;
    };
    const logger = (...args)=>debug4(...args)
    ;
    Object.defineProperty(logger, "enabled", {
        get () {
            return test();
        },
        configurable: true,
        enumerable: true
    });
    return logger;
}
const { state  } = await Deno.permissions.query({
    name: "env",
    variable: "NODE_DEBUG"
});
if (state === "granted") {
    initializeDebugEnv(Deno.env.get("NODE_DEBUG") ?? "");
} else {
    initializeDebugEnv("");
}
let debug = debuglog("stream", (fn)=>{
    debug = fn;
});
function _destroy(self, err1, cb) {
    self._destroy(err1 || null, (err)=>{
        const r17 = self._readableState;
        if (err) {
            err.stack;
            if (!r17.errored) {
                r17.errored = err;
            }
        }
        r17.closed = true;
        if (typeof cb === "function") {
            cb(err);
        }
        if (err) {
            queueMicrotask(()=>{
                if (!r17.errorEmitted) {
                    r17.errorEmitted = true;
                    self.emit("error", err);
                }
                r17.closeEmitted = true;
                if (r17.emitClose) {
                    self.emit("close");
                }
            });
        } else {
            queueMicrotask(()=>{
                r17.closeEmitted = true;
                if (r17.emitClose) {
                    self.emit("close");
                }
            });
        }
    });
}
function addChunk(stream, state1, chunk, addToFront) {
    if (state1.flowing && state1.length === 0 && !state1.sync) {
        if (state1.multiAwaitDrain) {
            state1.awaitDrainWriters.clear();
        } else {
            state1.awaitDrainWriters = null;
        }
        stream.emit("data", chunk);
    } else {
        state1.length += state1.objectMode ? 1 : chunk.length;
        if (addToFront) {
            state1.buffer.unshift(chunk);
        } else {
            state1.buffer.push(chunk);
        }
        if (state1.needReadable) {
            emitReadable(stream);
        }
    }
    maybeReadMore(stream, state1);
}
const MAX_HWM = 1073741824;
function computeNewHighWaterMark(n23) {
    if (n23 >= 1073741824) {
        n23 = MAX_HWM;
    } else {
        n23--;
        n23 |= n23 >>> 1;
        n23 |= n23 >>> 2;
        n23 |= n23 >>> 4;
        n23 |= n23 >>> 8;
        n23 |= n23 >>> 16;
        n23++;
    }
    return n23;
}
function emitReadable(stream) {
    const state2 = stream._readableState;
    debug("emitReadable", state2.needReadable, state2.emittedReadable);
    state2.needReadable = false;
    if (!state2.emittedReadable) {
        debug("emitReadable", state2.flowing);
        state2.emittedReadable = true;
        queueMicrotask(()=>emitReadable_(stream)
        );
    }
}
function emitReadable_(stream) {
    const state3 = stream._readableState;
    debug("emitReadable_", state3.destroyed, state3.length, state3.ended);
    if (!state3.destroyed && !state3.errored && (state3.length || state3.ended)) {
        stream.emit("readable");
        state3.emittedReadable = false;
    }
    state3.needReadable = !state3.flowing && !state3.ended && state3.length <= state3.highWaterMark;
    flow(stream);
}
function endReadable(stream) {
    const state4 = stream._readableState;
    debug("endReadable", state4.endEmitted);
    if (!state4.endEmitted) {
        state4.ended = true;
        queueMicrotask(()=>endReadableNT(state4, stream)
        );
    }
}
function endReadableNT(state5, stream) {
    debug("endReadableNT", state5.endEmitted, state5.length);
    if (!state5.errorEmitted && !state5.closeEmitted && !state5.endEmitted && state5.length === 0) {
        state5.endEmitted = true;
        stream.emit("end");
        if (state5.autoDestroy) {
            stream.destroy();
        }
    }
}
function errorOrDestroy(stream, err, sync = false) {
    const r18 = stream._readableState;
    if (r18.destroyed) {
        return stream;
    }
    if (r18.autoDestroy) {
        stream.destroy(err);
    } else if (err) {
        err.stack;
        if (!r18.errored) {
            r18.errored = err;
        }
        if (sync) {
            queueMicrotask(()=>{
                if (!r18.errorEmitted) {
                    r18.errorEmitted = true;
                    stream.emit("error", err);
                }
            });
        } else if (!r18.errorEmitted) {
            r18.errorEmitted = true;
            stream.emit("error", err);
        }
    }
}
function flow(stream) {
    const state6 = stream._readableState;
    debug("flow", state6.flowing);
    while(state6.flowing && stream.read() !== null);
}
function fromList(n24, state7) {
    if (state7.length === 0) {
        return null;
    }
    let ret;
    if (state7.objectMode) {
        ret = state7.buffer.shift();
    } else if (!n24 || n24 >= state7.length) {
        if (state7.decoder) {
            ret = state7.buffer.join("");
        } else if (state7.buffer.length === 1) {
            ret = state7.buffer.first();
        } else {
            ret = state7.buffer.concat(state7.length);
        }
        state7.buffer.clear();
    } else {
        ret = state7.buffer.consume(n24, !!state7.decoder);
    }
    return ret;
}
function howMuchToRead(n25, state8) {
    if (n25 <= 0 || state8.length === 0 && state8.ended) {
        return 0;
    }
    if (state8.objectMode) {
        return 1;
    }
    if (Number.isNaN(n25)) {
        if (state8.flowing && state8.length) {
            return state8.buffer.first().length;
        }
        return state8.length;
    }
    if (n25 <= state8.length) {
        return n25;
    }
    return state8.ended ? state8.length : 0;
}
function maybeReadMore(stream, state9) {
    if (!state9.readingMore && state9.constructed) {
        state9.readingMore = true;
        queueMicrotask(()=>maybeReadMore_(stream, state9)
        );
    }
}
function maybeReadMore_(stream, state10) {
    while(!state10.reading && !state10.ended && (state10.length < state10.highWaterMark || state10.flowing && state10.length === 0)){
        const len = state10.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state10.length) {
            break;
        }
    }
    state10.readingMore = false;
}
function nReadingNextTick(self) {
    debug("readable nexttick read 0");
    self.read(0);
}
function onEofChunk(stream, state11) {
    debug("onEofChunk");
    if (state11.ended) return;
    if (state11.decoder) {
        const chunk = state11.decoder.end();
        if (chunk && chunk.length) {
            state11.buffer.push(chunk);
            state11.length += state11.objectMode ? 1 : chunk.length;
        }
    }
    state11.ended = true;
    if (state11.sync) {
        emitReadable(stream);
    } else {
        state11.needReadable = false;
        state11.emittedReadable = true;
        emitReadable_(stream);
    }
}
function pipeOnDrain(src, dest) {
    return function pipeOnDrainFunctionResult() {
        const state12 = src._readableState;
        if (state12.awaitDrainWriters === dest) {
            debug("pipeOnDrain", 1);
            state12.awaitDrainWriters = null;
        } else if (state12.multiAwaitDrain) {
            debug("pipeOnDrain", state12.awaitDrainWriters.size);
            state12.awaitDrainWriters.delete(dest);
        }
        if ((!state12.awaitDrainWriters || state12.awaitDrainWriters.size === 0) && src.listenerCount("data")) {
            state12.flowing = true;
            flow(src);
        }
    };
}
function prependListener(emitter1, event, fn) {
    if (typeof emitter1.prependListener === "function") {
        return emitter1.prependListener(event, fn);
    }
    if (emitter1._events.get(event)?.length) {
        const listeners = [
            fn,
            ...emitter1._events.get(event)
        ];
        emitter1._events.set(event, listeners);
    } else {
        emitter1.on(event, fn);
    }
}
function readableAddChunk(stream, chunk, encoding = undefined, addToFront) {
    const state13 = stream._readableState;
    let usedEncoding = encoding;
    let err;
    if (!state13.objectMode) {
        if (typeof chunk === "string") {
            usedEncoding = encoding || state13.defaultEncoding;
            if (state13.encoding !== usedEncoding) {
                if (addToFront && state13.encoding) {
                    chunk = Buffer.from(chunk, usedEncoding).toString(state13.encoding);
                } else {
                    chunk = Buffer.from(chunk, usedEncoding);
                    usedEncoding = "";
                }
            }
        } else if (chunk instanceof Uint8Array) {
            chunk = Buffer.from(chunk);
        }
    }
    if (err) {
        errorOrDestroy(stream, err);
    } else if (chunk === null) {
        state13.reading = false;
        onEofChunk(stream, state13);
    } else if (state13.objectMode || chunk.length > 0) {
        if (addToFront) {
            if (state13.endEmitted) {
                errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            } else {
                addChunk(stream, state13, chunk, true);
            }
        } else if (state13.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state13.destroyed || state13.errored) {
            return false;
        } else {
            state13.reading = false;
            if (state13.decoder && !usedEncoding) {
                chunk = state13.decoder.write(Buffer.from(chunk));
                if (state13.objectMode || chunk.length !== 0) {
                    addChunk(stream, state13, chunk, false);
                } else {
                    maybeReadMore(stream, state13);
                }
            } else {
                addChunk(stream, state13, chunk, false);
            }
        }
    } else if (!addToFront) {
        state13.reading = false;
        maybeReadMore(stream, state13);
    }
    return !state13.ended && (state13.length < state13.highWaterMark || state13.length === 0);
}
function resume(stream, state14) {
    if (!state14.resumeScheduled) {
        state14.resumeScheduled = true;
        queueMicrotask(()=>resume_(stream, state14)
        );
    }
}
function resume_(stream, state15) {
    debug("resume", state15.reading);
    if (!state15.reading) {
        stream.read(0);
    }
    state15.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state15.flowing && !state15.reading) {
        stream.read(0);
    }
}
function updateReadableListening(self) {
    const state16 = self._readableState;
    state16.readableListening = self.listenerCount("readable") > 0;
    if (state16.resumeScheduled && state16[kPaused] === false) {
        state16.flowing = true;
    } else if (self.listenerCount("data") > 0) {
        self.resume();
    } else if (!state16.readableListening) {
        state16.flowing = null;
    }
}
const kOnFinished = Symbol("kOnFinished");
function _destroy1(self, err1, cb) {
    self._destroy(err1 || null, (err)=>{
        const w4 = self._writableState;
        if (err) {
            err.stack;
            if (!w4.errored) {
                w4.errored = err;
            }
        }
        w4.closed = true;
        if (typeof cb === "function") {
            cb(err);
        }
        if (err) {
            queueMicrotask(()=>{
                if (!w4.errorEmitted) {
                    w4.errorEmitted = true;
                    self.emit("error", err);
                }
                w4.closeEmitted = true;
                if (w4.emitClose) {
                    self.emit("close");
                }
            });
        } else {
            queueMicrotask(()=>{
                w4.closeEmitted = true;
                if (w4.emitClose) {
                    self.emit("close");
                }
            });
        }
    });
}
function afterWrite(stream, state17, count, cb) {
    const needDrain = !state17.ending && !stream.destroyed && state17.length === 0 && state17.needDrain;
    if (needDrain) {
        state17.needDrain = false;
        stream.emit("drain");
    }
    while(count-- > 0){
        state17.pendingcb--;
        cb();
    }
    if (state17.destroyed) {
        errorBuffer(state17);
    }
    finishMaybe(stream, state17);
}
function afterWriteTick({ cb , count , state: state18 , stream  }) {
    state18.afterWriteTickInfo = null;
    return afterWrite(stream, state18, count, cb);
}
function clearBuffer(stream, state19) {
    if (state19.corked || state19.bufferProcessing || state19.destroyed || !state19.constructed) {
        return;
    }
    const { buffered , bufferedIndex , objectMode  } = state19;
    const bufferedLength = buffered.length - bufferedIndex;
    if (!bufferedLength) {
        return;
    }
    let i = bufferedIndex;
    state19.bufferProcessing = true;
    if (bufferedLength > 1 && stream._writev) {
        state19.pendingcb -= bufferedLength - 1;
        const callback = state19.allNoop ? nop1 : (err)=>{
            for(let n26 = i; n26 < buffered.length; ++n26){
                buffered[n26].callback(err);
            }
        };
        const chunks = state19.allNoop && i === 0 ? buffered : buffered.slice(i);
        doWrite(stream, state19, true, state19.length, chunks, "", callback);
        resetBuffer(state19);
    } else {
        do {
            const { chunk , encoding , callback  } = buffered[i];
            buffered[i++] = null;
            const len = objectMode ? 1 : chunk.length;
            doWrite(stream, state19, false, len, chunk, encoding, callback);
        }while (i < buffered.length && !state19.writing)
        if (i === buffered.length) {
            resetBuffer(state19);
        } else if (i > 256) {
            buffered.splice(0, i);
            state19.bufferedIndex = 0;
        } else {
            state19.bufferedIndex = i;
        }
    }
    state19.bufferProcessing = false;
}
function destroy(err, cb) {
    const w5 = this._writableState;
    if (w5.destroyed) {
        if (typeof cb === "function") {
            cb();
        }
        return this;
    }
    if (err) {
        err.stack;
        if (!w5.errored) {
            w5.errored = err;
        }
    }
    w5.destroyed = true;
    if (!w5.constructed) {
        this.once(kDestroy, (er)=>{
            _destroy1(this, err || er, cb);
        });
    } else {
        _destroy1(this, err, cb);
    }
    return this;
}
function doWrite(stream, state20, writev, len, chunk, encoding, cb) {
    state20.writelen = len;
    state20.writecb = cb;
    state20.writing = true;
    state20.sync = true;
    if (state20.destroyed) {
        state20.onwrite(new ERR_STREAM_DESTROYED("write"));
    } else if (writev) {
        stream._writev(chunk, state20.onwrite);
    } else {
        stream._write(chunk, encoding, state20.onwrite);
    }
    state20.sync = false;
}
function errorBuffer(state21) {
    if (state21.writing) {
        return;
    }
    for(let n27 = state21.bufferedIndex; n27 < state21.buffered.length; ++n27){
        const { chunk , callback  } = state21.buffered[n27];
        const len = state21.objectMode ? 1 : chunk.length;
        state21.length -= len;
        callback(new ERR_STREAM_DESTROYED("write"));
    }
    for (const callback of state21[kOnFinished].splice(0)){
        callback(new ERR_STREAM_DESTROYED("end"));
    }
    resetBuffer(state21);
}
function errorOrDestroy1(stream, err, sync = false) {
    const w6 = stream._writableState;
    if (w6.destroyed) {
        return stream;
    }
    if (w6.autoDestroy) {
        stream.destroy(err);
    } else if (err) {
        err.stack;
        if (!w6.errored) {
            w6.errored = err;
        }
        if (sync) {
            queueMicrotask(()=>{
                if (w6.errorEmitted) {
                    return;
                }
                w6.errorEmitted = true;
                stream.emit("error", err);
            });
        } else {
            if (w6.errorEmitted) {
                return;
            }
            w6.errorEmitted = true;
            stream.emit("error", err);
        }
    }
}
function finish(stream, state22) {
    state22.pendingcb--;
    if (state22.errorEmitted || state22.closeEmitted) {
        return;
    }
    state22.finished = true;
    for (const callback of state22[kOnFinished].splice(0)){
        callback();
    }
    stream.emit("finish");
    if (state22.autoDestroy) {
        stream.destroy();
    }
}
function finishMaybe(stream, state23, sync) {
    if (needFinish(state23)) {
        prefinish(stream, state23);
        if (state23.pendingcb === 0 && needFinish(state23)) {
            state23.pendingcb++;
            if (sync) {
                queueMicrotask(()=>finish(stream, state23)
                );
            } else {
                finish(stream, state23);
            }
        }
    }
}
function needFinish(state24) {
    return state24.ending && state24.constructed && state24.length === 0 && !state24.errored && state24.buffered.length === 0 && !state24.finished && !state24.writing;
}
function nop1() {}
function resetBuffer(state25) {
    state25.buffered = [];
    state25.bufferedIndex = 0;
    state25.allBuffers = true;
    state25.allNoop = true;
}
function onwriteError(stream, state26, er, cb) {
    --state26.pendingcb;
    cb(er);
    errorBuffer(state26);
    errorOrDestroy1(stream, er);
}
function onwrite(stream, er) {
    const state27 = stream._writableState;
    const sync = state27.sync;
    const cb = state27.writecb;
    if (typeof cb !== "function") {
        errorOrDestroy1(stream, new ERR_MULTIPLE_CALLBACK());
        return;
    }
    state27.writing = false;
    state27.writecb = null;
    state27.length -= state27.writelen;
    state27.writelen = 0;
    if (er) {
        er.stack;
        if (!state27.errored) {
            state27.errored = er;
        }
        if (sync) {
            queueMicrotask(()=>onwriteError(stream, state27, er, cb)
            );
        } else {
            onwriteError(stream, state27, er, cb);
        }
    } else {
        if (state27.buffered.length > state27.bufferedIndex) {
            clearBuffer(stream, state27);
        }
        if (sync) {
            if (state27.afterWriteTickInfo !== null && state27.afterWriteTickInfo.cb === cb) {
                state27.afterWriteTickInfo.count++;
            } else {
                state27.afterWriteTickInfo = {
                    count: 1,
                    cb: cb,
                    stream,
                    state: state27
                };
                queueMicrotask(()=>afterWriteTick(state27.afterWriteTickInfo)
                );
            }
        } else {
            afterWrite(stream, state27, 1, cb);
        }
    }
}
function prefinish(stream, state28) {
    if (!state28.prefinished && !state28.finalCalled) {
        if (typeof stream._final === "function" && !state28.destroyed) {
            state28.finalCalled = true;
            state28.sync = true;
            state28.pendingcb++;
            stream._final((err)=>{
                state28.pendingcb--;
                if (err) {
                    for (const callback of state28[kOnFinished].splice(0)){
                        callback(err);
                    }
                    errorOrDestroy1(stream, err, state28.sync);
                } else if (needFinish(state28)) {
                    state28.prefinished = true;
                    stream.emit("prefinish");
                    state28.pendingcb++;
                    queueMicrotask(()=>finish(stream, state28)
                    );
                }
            });
            state28.sync = false;
        } else {
            state28.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function writeOrBuffer(stream, state29, chunk, encoding, callback) {
    const len = state29.objectMode ? 1 : chunk.length;
    state29.length += len;
    const ret = state29.length < state29.highWaterMark;
    if (!ret) {
        state29.needDrain = true;
    }
    if (state29.writing || state29.corked || state29.errored || !state29.constructed) {
        state29.buffered.push({
            chunk,
            encoding,
            callback
        });
        if (state29.allBuffers && encoding !== "buffer") {
            state29.allBuffers = false;
        }
        if (state29.allNoop && callback !== nop1) {
            state29.allNoop = false;
        }
    } else {
        state29.writelen = len;
        state29.writecb = callback;
        state29.writing = true;
        state29.sync = true;
        stream._write(chunk, encoding, state29.onwrite);
        state29.sync = false;
    }
    return ret && !state29.errored && !state29.destroyed;
}
class WritableState {
    [kOnFinished] = [];
    afterWriteTickInfo = null;
    allBuffers = true;
    allNoop = true;
    autoDestroy;
    buffered = [];
    bufferedIndex = 0;
    bufferProcessing = false;
    closed = false;
    closeEmitted = false;
    constructed;
    corked = 0;
    decodeStrings;
    defaultEncoding;
    destroyed = false;
    emitClose;
    ended = false;
    ending = false;
    errored = null;
    errorEmitted = false;
    finalCalled = false;
    finished = false;
    highWaterMark;
    length = 0;
    needDrain = false;
    objectMode;
    onwrite;
    pendingcb = 0;
    prefinished = false;
    sync = true;
    writecb = null;
    writable = true;
    writelen = 0;
    writing = false;
    constructor(options, stream){
        this.objectMode = !!options?.objectMode;
        this.highWaterMark = options?.highWaterMark ?? (this.objectMode ? 16 : 16 * 1024);
        if (Number.isInteger(this.highWaterMark) && this.highWaterMark >= 0) {
            this.highWaterMark = Math.floor(this.highWaterMark);
        } else {
            throw new ERR_INVALID_OPT_VALUE("highWaterMark", this.highWaterMark);
        }
        this.decodeStrings = !options?.decodeStrings === false;
        this.defaultEncoding = options?.defaultEncoding || "utf8";
        this.onwrite = onwrite.bind(undefined, stream);
        resetBuffer(this);
        this.emitClose = options?.emitClose ?? true;
        this.autoDestroy = options?.autoDestroy ?? true;
        this.constructed = true;
    }
    getBuffer() {
        return this.buffered.slice(this.bufferedIndex);
    }
    get bufferedRequestCount() {
        return this.buffered.length - this.bufferedIndex;
    }
}
class Writable extends Stream {
    _final;
    _writableState;
    _writev = null;
    constructor(options){
        super();
        this._writableState = new WritableState(options, this);
        if (options) {
            if (typeof options.write === "function") {
                this._write = options.write;
            }
            if (typeof options.writev === "function") {
                this._writev = options.writev;
            }
            if (typeof options.destroy === "function") {
                this._destroy = options.destroy;
            }
            if (typeof options.final === "function") {
                this._final = options.final;
            }
        }
    }
    [captureRejectionSymbol](err) {
        this.destroy(err);
    }
    static WritableState = WritableState;
    get destroyed() {
        return this._writableState ? this._writableState.destroyed : false;
    }
    set destroyed(value) {
        if (this._writableState) {
            this._writableState.destroyed = value;
        }
    }
    get writable() {
        const w7 = this._writableState;
        return !w7.destroyed && !w7.errored && !w7.ending && !w7.ended;
    }
    set writable(val) {
        if (this._writableState) {
            this._writableState.writable = !!val;
        }
    }
    get writableFinished() {
        return this._writableState ? this._writableState.finished : false;
    }
    get writableObjectMode() {
        return this._writableState ? this._writableState.objectMode : false;
    }
    get writableBuffer() {
        return this._writableState && this._writableState.getBuffer();
    }
    get writableEnded() {
        return this._writableState ? this._writableState.ending : false;
    }
    get writableHighWaterMark() {
        return this._writableState && this._writableState.highWaterMark;
    }
    get writableCorked() {
        return this._writableState ? this._writableState.corked : 0;
    }
    get writableLength() {
        return this._writableState && this._writableState.length;
    }
    _undestroy() {
        const w8 = this._writableState;
        w8.constructed = true;
        w8.destroyed = false;
        w8.closed = false;
        w8.closeEmitted = false;
        w8.errored = null;
        w8.errorEmitted = false;
        w8.finalCalled = false;
        w8.prefinished = false;
        w8.ended = w8.writable === false;
        w8.ending = w8.writable === false;
        w8.finished = w8.writable === false;
    }
    _destroy(err, cb) {
        cb(err);
    }
    destroy(err, cb) {
        const state30 = this._writableState;
        if (!state30.destroyed) {
            queueMicrotask(()=>errorBuffer(state30)
            );
        }
        destroy.call(this, err, cb);
        return this;
    }
    end(x10, y5, z3) {
        const state31 = this._writableState;
        let chunk;
        let encoding;
        let cb;
        if (typeof x10 === "function") {
            chunk = null;
            encoding = null;
            cb = x10;
        } else if (typeof y5 === "function") {
            chunk = x10;
            encoding = null;
            cb = y5;
        } else {
            chunk = x10;
            encoding = y5;
            cb = z3;
        }
        if (chunk !== null && chunk !== undefined) {
            this.write(chunk, encoding);
        }
        if (state31.corked) {
            state31.corked = 1;
            this.uncork();
        }
        let err;
        if (!state31.errored && !state31.ending) {
            state31.ending = true;
            finishMaybe(this, state31, true);
            state31.ended = true;
        } else if (state31.finished) {
            err = new ERR_STREAM_ALREADY_FINISHED("end");
        } else if (state31.destroyed) {
            err = new ERR_STREAM_DESTROYED("end");
        }
        if (typeof cb === "function") {
            if (err || state31.finished) {
                queueMicrotask(()=>{
                    cb(err);
                });
            } else {
                state31[kOnFinished].push(cb);
            }
        }
        return this;
    }
    _write(chunk, encoding, cb) {
        if (this._writev) {
            this._writev([
                {
                    chunk,
                    encoding
                }
            ], cb);
        } else {
            throw new ERR_METHOD_NOT_IMPLEMENTED("_write()");
        }
    }
    pipe(dest) {
        errorOrDestroy1(this, new ERR_STREAM_CANNOT_PIPE());
        return dest;
    }
    write(chunk, x11, y6) {
        const state32 = this._writableState;
        let encoding;
        let cb;
        if (typeof x11 === "function") {
            cb = x11;
            encoding = state32.defaultEncoding;
        } else {
            if (!x11) {
                encoding = state32.defaultEncoding;
            } else if (x11 !== "buffer" && !Buffer.isEncoding(x11)) {
                throw new ERR_UNKNOWN_ENCODING(x11);
            } else {
                encoding = x11;
            }
            if (typeof y6 !== "function") {
                cb = nop1;
            } else {
                cb = y6;
            }
        }
        if (chunk === null) {
            throw new ERR_STREAM_NULL_VALUES();
        } else if (!state32.objectMode) {
            if (typeof chunk === "string") {
                if (state32.decodeStrings !== false) {
                    chunk = Buffer.from(chunk, encoding);
                    encoding = "buffer";
                }
            } else if (chunk instanceof Buffer) {
                encoding = "buffer";
            } else if (Stream._isUint8Array(chunk)) {
                chunk = Stream._uint8ArrayToBuffer(chunk);
                encoding = "buffer";
            } else {
                throw new ERR_INVALID_ARG_TYPE("chunk", [
                    "string",
                    "Buffer",
                    "Uint8Array"
                ], chunk);
            }
        }
        let err;
        if (state32.ending) {
            err = new ERR_STREAM_WRITE_AFTER_END();
        } else if (state32.destroyed) {
            err = new ERR_STREAM_DESTROYED("write");
        }
        if (err) {
            queueMicrotask(()=>cb(err)
            );
            errorOrDestroy1(this, err, true);
            return false;
        }
        state32.pendingcb++;
        return writeOrBuffer(this, state32, chunk, encoding, cb);
    }
    cork() {
        this._writableState.corked++;
    }
    uncork() {
        const state33 = this._writableState;
        if (state33.corked) {
            state33.corked--;
            if (!state33.writing) {
                clearBuffer(this, state33);
            }
        }
    }
    setDefaultEncoding(encoding) {
        if (typeof encoding === "string") {
            encoding = encoding.toLowerCase();
        }
        if (!Buffer.isEncoding(encoding)) {
            throw new ERR_UNKNOWN_ENCODING(encoding);
        }
        this._writableState.defaultEncoding = encoding;
        return this;
    }
}
let debug1 = debuglog("stream", (fn)=>{
    debug1 = fn;
});
function endDuplex(stream) {
    const state34 = stream._readableState;
    debug1("endReadable", state34.endEmitted);
    if (!state34.endEmitted) {
        state34.ended = true;
        queueMicrotask(()=>endReadableNT1(state34, stream)
        );
    }
}
function endReadableNT1(state35, stream) {
    debug1("endReadableNT", state35.endEmitted, state35.length);
    if (!state35.errorEmitted && !state35.closeEmitted && !state35.endEmitted && state35.length === 0) {
        state35.endEmitted = true;
        stream.emit("end");
        if (stream.writable && stream.allowHalfOpen === false) {
            queueMicrotask(()=>endWritableNT(stream)
            );
        } else if (state35.autoDestroy) {
            const wState = stream._writableState;
            const autoDestroy = !wState || wState.autoDestroy && (wState.finished || wState.writable === false);
            if (autoDestroy) {
                stream.destroy();
            }
        }
    }
}
function endWritableNT(stream) {
    const writable = stream.writable && !stream.writableEnded && !stream.destroyed;
    if (writable) {
        stream.end();
    }
}
function errorOrDestroy2(stream, err, sync = false) {
    const r19 = stream._readableState;
    const w9 = stream._writableState;
    if (w9.destroyed || r19.destroyed) {
        return this;
    }
    if (r19.autoDestroy || w9.autoDestroy) {
        stream.destroy(err);
    } else if (err) {
        err.stack;
        if (w9 && !w9.errored) {
            w9.errored = err;
        }
        if (r19 && !r19.errored) {
            r19.errored = err;
        }
        if (sync) {
            queueMicrotask(()=>{
                if (w9.errorEmitted || r19.errorEmitted) {
                    return;
                }
                w9.errorEmitted = true;
                r19.errorEmitted = true;
                stream.emit("error", err);
            });
        } else {
            if (w9.errorEmitted || r19.errorEmitted) {
                return;
            }
            w9.errorEmitted = true;
            r19.errorEmitted = true;
            stream.emit("error", err);
        }
    }
}
function finish1(stream, state36) {
    state36.pendingcb--;
    if (state36.errorEmitted || state36.closeEmitted) {
        return;
    }
    state36.finished = true;
    for (const callback of state36[kOnFinished].splice(0)){
        callback();
    }
    stream.emit("finish");
    if (state36.autoDestroy) {
        stream.destroy();
    }
}
function finishMaybe1(stream, state37, sync) {
    if (needFinish(state37)) {
        prefinish(stream, state37);
        if (state37.pendingcb === 0 && needFinish(state37)) {
            state37.pendingcb++;
            if (sync) {
                queueMicrotask(()=>finish1(stream, state37)
                );
            } else {
                finish1(stream, state37);
            }
        }
    }
}
function onwrite1(stream, er) {
    const state38 = stream._writableState;
    const sync = state38.sync;
    const cb = state38.writecb;
    if (typeof cb !== "function") {
        errorOrDestroy2(stream, new ERR_MULTIPLE_CALLBACK());
        return;
    }
    state38.writing = false;
    state38.writecb = null;
    state38.length -= state38.writelen;
    state38.writelen = 0;
    if (er) {
        er.stack;
        if (!state38.errored) {
            state38.errored = er;
        }
        if (stream._readableState && !stream._readableState.errored) {
            stream._readableState.errored = er;
        }
        if (sync) {
            queueMicrotask(()=>onwriteError1(stream, state38, er, cb)
            );
        } else {
            onwriteError1(stream, state38, er, cb);
        }
    } else {
        if (state38.buffered.length > state38.bufferedIndex) {
            clearBuffer(stream, state38);
        }
        if (sync) {
            if (state38.afterWriteTickInfo !== null && state38.afterWriteTickInfo.cb === cb) {
                state38.afterWriteTickInfo.count++;
            } else {
                state38.afterWriteTickInfo = {
                    count: 1,
                    cb: cb,
                    stream: stream,
                    state: state38
                };
                queueMicrotask(()=>afterWriteTick(state38.afterWriteTickInfo)
                );
            }
        } else {
            afterWrite(stream, state38, 1, cb);
        }
    }
}
function onwriteError1(stream, state39, er, cb) {
    --state39.pendingcb;
    cb(er);
    errorBuffer(state39);
    errorOrDestroy2(stream, er);
}
function readableAddChunk1(stream, chunk, encoding = undefined, addToFront) {
    debug1("readableAddChunk", chunk);
    const state40 = stream._readableState;
    let usedEncoding = encoding;
    let err;
    if (!state40.objectMode) {
        if (typeof chunk === "string") {
            usedEncoding = encoding || state40.defaultEncoding;
            if (state40.encoding !== usedEncoding) {
                if (addToFront && state40.encoding) {
                    chunk = Buffer.from(chunk, usedEncoding).toString(state40.encoding);
                } else {
                    chunk = Buffer.from(chunk, usedEncoding);
                    usedEncoding = "";
                }
            }
        } else if (chunk instanceof Uint8Array) {
            chunk = Buffer.from(chunk);
        }
    }
    if (err) {
        errorOrDestroy2(stream, err);
    } else if (chunk === null) {
        state40.reading = false;
        onEofChunk(stream, state40);
    } else if (state40.objectMode || chunk.length > 0) {
        if (addToFront) {
            if (state40.endEmitted) {
                errorOrDestroy2(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            } else {
                addChunk(stream, state40, chunk, true);
            }
        } else if (state40.ended) {
            errorOrDestroy2(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state40.destroyed || state40.errored) {
            return false;
        } else {
            state40.reading = false;
            if (state40.decoder && !usedEncoding) {
                chunk = state40.decoder.write(Buffer.from(chunk));
                if (state40.objectMode || chunk.length !== 0) {
                    addChunk(stream, state40, chunk, false);
                } else {
                    maybeReadMore(stream, state40);
                }
            } else {
                addChunk(stream, state40, chunk, false);
            }
        }
    } else if (!addToFront) {
        state40.reading = false;
        maybeReadMore(stream, state40);
    }
    return !state40.ended && (state40.length < state40.highWaterMark || state40.length === 0);
}
let debug2 = debuglog("stream", (fn)=>{
    debug2 = fn;
});
const kLastResolve = Symbol("lastResolve");
function from(iterable, opts) {
    let iterator;
    if (typeof iterable === "string" || iterable instanceof Buffer) {
        return new Readable({
            objectMode: true,
            ...opts,
            read () {
                this.push(iterable);
                this.push(null);
            }
        });
    }
    if (Symbol.asyncIterator in iterable) {
        iterator = iterable[Symbol.asyncIterator]();
    } else if (Symbol.iterator in iterable) {
        iterator = iterable[Symbol.iterator]();
    } else {
        throw new ERR_INVALID_ARG_TYPE("iterable", [
            "Iterable"
        ], iterable);
    }
    const readable = new Readable({
        objectMode: true,
        highWaterMark: 1,
        ...opts
    });
    let reading = false;
    let needToClose = false;
    readable._read = function() {
        if (!reading) {
            reading = true;
            next();
        }
    };
    readable._destroy = function(error, cb) {
        if (needToClose) {
            needToClose = false;
            close().then(()=>queueMicrotask(()=>cb(error)
                )
            , (e17)=>queueMicrotask(()=>cb(error || e17)
                )
            );
        } else {
            cb(error);
        }
    };
    async function close() {
        if (typeof iterator.return === "function") {
            const { value  } = await iterator.return();
            await value;
        }
    }
    async function next() {
        try {
            needToClose = false;
            const { value , done  } = await iterator.next();
            needToClose = !done;
            if (done) {
                readable.push(null);
            } else if (readable.destroyed) {
                await close();
            } else {
                const res = await value;
                if (res === null) {
                    reading = false;
                    throw new ERR_STREAM_NULL_VALUES();
                } else if (readable.push(res)) {
                    next();
                } else {
                    reading = false;
                }
            }
        } catch (err) {
            if (err instanceof Error) {
                readable.destroy(err);
            }
        }
    }
    return readable;
}
let debug3 = debuglog("stream", (fn)=>{
    debug3 = fn;
});
class ReadableState {
    [kPaused] = null;
    awaitDrainWriters = null;
    buffer = new BufferList();
    closed = false;
    closeEmitted = false;
    constructed;
    decoder = null;
    destroyed = false;
    emittedReadable = false;
    encoding = null;
    ended = false;
    endEmitted = false;
    errored = null;
    errorEmitted = false;
    flowing = null;
    highWaterMark;
    length = 0;
    multiAwaitDrain = false;
    needReadable = false;
    objectMode;
    pipes = [];
    readable = true;
    readableListening = false;
    reading = false;
    readingMore = false;
    dataEmitted = false;
    resumeScheduled = false;
    sync = true;
    emitClose;
    autoDestroy;
    defaultEncoding;
    constructor(options){
        this.objectMode = !!options?.objectMode;
        this.highWaterMark = options?.highWaterMark ?? (this.objectMode ? 16 : 16 * 1024);
        if (Number.isInteger(this.highWaterMark) && this.highWaterMark >= 0) {
            this.highWaterMark = Math.floor(this.highWaterMark);
        } else {
            throw new ERR_INVALID_OPT_VALUE("highWaterMark", this.highWaterMark);
        }
        this.emitClose = options?.emitClose ?? true;
        this.autoDestroy = options?.autoDestroy ?? true;
        this.defaultEncoding = options?.defaultEncoding || "utf8";
        if (options?.encoding) {
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
        }
        this.constructed = true;
    }
}
class Duplex extends Stream {
    allowHalfOpen = true;
    _final;
    _readableState;
    _writableState;
    _writev;
    constructor(options){
        super();
        const readableOptions = {
            autoDestroy: options?.autoDestroy,
            defaultEncoding: options?.defaultEncoding,
            destroy: options?.destroy,
            emitClose: options?.emitClose,
            encoding: options?.encoding,
            highWaterMark: options?.highWaterMark ?? options?.readableHighWaterMark,
            objectMode: options?.objectMode ?? options?.readableObjectMode,
            read: options?.read
        };
        const writableOptions = {
            autoDestroy: options?.autoDestroy,
            decodeStrings: options?.decodeStrings,
            defaultEncoding: options?.defaultEncoding,
            destroy: options?.destroy,
            emitClose: options?.emitClose,
            final: options?.final,
            highWaterMark: options?.highWaterMark ?? options?.writableHighWaterMark,
            objectMode: options?.objectMode ?? options?.writableObjectMode,
            write: options?.write,
            writev: options?.writev
        };
        this._readableState = new ReadableState(readableOptions);
        this._writableState = new WritableState(writableOptions, this);
        this._writableState.onwrite = onwrite1.bind(undefined, this);
        if (options) {
            if (options.allowHalfOpen === false) {
                this.allowHalfOpen = false;
            }
            if (typeof options.destroy === "function") {
                this._destroy = options.destroy;
            }
            if (typeof options.final === "function") {
                this._final = options.final;
            }
            if (typeof options.read === "function") {
                this._read = options.read;
            }
            if (options.readable === false) {
                this.readable = false;
                this._readableState.readable = false;
                this._readableState.ended = true;
                this._readableState.endEmitted = true;
            }
            if (options.writable === false) {
                this.writable = false;
                this._writableState.writable = false;
                this._writableState.ending = true;
                this._writableState.ended = true;
                this._writableState.finished = true;
            }
            if (typeof options.write === "function") {
                this._write = options.write;
            }
            if (typeof options.writev === "function") {
                this._writev = options.writev;
            }
        }
    }
    [captureRejectionSymbol](err) {
        this.destroy(err);
    }
    [Symbol.asyncIterator]() {
        return createReadableStreamAsyncIterator(this);
    }
    _destroy(error, callback) {
        callback(error);
    }
    _read(size) {
        return Readable.prototype._read.call(this, size);
    }
    _undestroy() {
        Writable.prototype._undestroy.call(this);
        Readable.prototype._undestroy.call(this);
        return;
    }
    destroy(err1, cb) {
        const r110 = this._readableState;
        const w1 = this._writableState;
        if (w1.destroyed || r110.destroyed) {
            if (typeof cb === "function") {
                cb();
            }
            return this;
        }
        if (err1) {
            err1.stack;
            if (!w1.errored) {
                w1.errored = err1;
            }
            if (!r110.errored) {
                r110.errored = err1;
            }
        }
        w1.destroyed = true;
        r110.destroyed = true;
        this._destroy(err1 || null, (err)=>{
            if (err) {
                err.stack;
                if (!w1.errored) {
                    w1.errored = err;
                }
                if (!r110.errored) {
                    r110.errored = err;
                }
            }
            w1.closed = true;
            r110.closed = true;
            if (typeof cb === "function") {
                cb(err);
            }
            if (err) {
                queueMicrotask(()=>{
                    const r20 = this._readableState;
                    const w10 = this._writableState;
                    if (!w10.errorEmitted && !r20.errorEmitted) {
                        w10.errorEmitted = true;
                        r20.errorEmitted = true;
                        this.emit("error", err);
                    }
                    r20.closeEmitted = true;
                    if (w10.emitClose || r20.emitClose) {
                        this.emit("close");
                    }
                });
            } else {
                queueMicrotask(()=>{
                    const r22 = this._readableState;
                    const w11 = this._writableState;
                    r22.closeEmitted = true;
                    if (w11.emitClose || r22.emitClose) {
                        this.emit("close");
                    }
                });
            }
        });
        return this;
    }
    isPaused() {
        return Readable.prototype.isPaused.call(this);
    }
    off = this.removeListener;
    on(ev, fn) {
        const res = super.on.call(this, ev, fn);
        const state41 = this._readableState;
        if (ev === "data") {
            state41.readableListening = this.listenerCount("readable") > 0;
            if (state41.flowing !== false) {
                this.resume();
            }
        } else if (ev === "readable") {
            if (!state41.endEmitted && !state41.readableListening) {
                state41.readableListening = state41.needReadable = true;
                state41.flowing = false;
                state41.emittedReadable = false;
                if (state41.length) {
                    emitReadable(this);
                } else if (!state41.reading) {
                    queueMicrotask(()=>nReadingNextTick(this)
                    );
                }
            }
        }
        return res;
    }
    pause() {
        return Readable.prototype.pause.call(this);
    }
    pipe(dest, pipeOpts) {
        return Readable.prototype.pipe.call(this, dest, pipeOpts);
    }
    push(chunk, encoding) {
        return readableAddChunk1(this, chunk, encoding, false);
    }
    read(n28) {
        debug3("read", n28);
        if (n28 === undefined) {
            n28 = NaN;
        }
        const state42 = this._readableState;
        const nOrig = n28;
        if (n28 > state42.highWaterMark) {
            state42.highWaterMark = computeNewHighWaterMark(n28);
        }
        if (n28 !== 0) {
            state42.emittedReadable = false;
        }
        if (n28 === 0 && state42.needReadable && ((state42.highWaterMark !== 0 ? state42.length >= state42.highWaterMark : state42.length > 0) || state42.ended)) {
            debug3("read: emitReadable", state42.length, state42.ended);
            if (state42.length === 0 && state42.ended) {
                endDuplex(this);
            } else {
                emitReadable(this);
            }
            return null;
        }
        n28 = howMuchToRead(n28, state42);
        if (n28 === 0 && state42.ended) {
            if (state42.length === 0) {
                endDuplex(this);
            }
            return null;
        }
        let doRead = state42.needReadable;
        debug3("need readable", doRead);
        if (state42.length === 0 || state42.length - n28 < state42.highWaterMark) {
            doRead = true;
            debug3("length less than watermark", doRead);
        }
        if (state42.ended || state42.reading || state42.destroyed || state42.errored || !state42.constructed) {
            doRead = false;
            debug3("reading, ended or constructing", doRead);
        } else if (doRead) {
            debug3("do read");
            state42.reading = true;
            state42.sync = true;
            if (state42.length === 0) {
                state42.needReadable = true;
            }
            this._read(state42.highWaterMark);
            state42.sync = false;
            if (!state42.reading) {
                n28 = howMuchToRead(nOrig, state42);
            }
        }
        let ret;
        if (n28 > 0) {
            ret = fromList(n28, state42);
        } else {
            ret = null;
        }
        if (ret === null) {
            state42.needReadable = state42.length <= state42.highWaterMark;
            n28 = 0;
        } else {
            state42.length -= n28;
            if (state42.multiAwaitDrain) {
                state42.awaitDrainWriters.clear();
            } else {
                state42.awaitDrainWriters = null;
            }
        }
        if (state42.length === 0) {
            if (!state42.ended) {
                state42.needReadable = true;
            }
            if (nOrig !== n28 && state42.ended) {
                endDuplex(this);
            }
        }
        if (ret !== null && !state42.errorEmitted && !state42.closeEmitted) {
            state42.dataEmitted = true;
            this.emit("data", ret);
        }
        return ret;
    }
    removeAllListeners(ev) {
        const res = super.removeAllListeners(ev);
        if (ev === "readable" || ev === undefined) {
            queueMicrotask(()=>updateReadableListening(this)
            );
        }
        return res;
    }
    removeListener(ev, fn) {
        const res = super.removeListener.call(this, ev, fn);
        if (ev === "readable") {
            queueMicrotask(()=>updateReadableListening(this)
            );
        }
        return res;
    }
    resume() {
        return Readable.prototype.resume.call(this);
    }
    setEncoding(enc) {
        return Readable.prototype.setEncoding.call(this, enc);
    }
    unshift(chunk, encoding) {
        return readableAddChunk1(this, chunk, encoding, true);
    }
    unpipe(dest) {
        return Readable.prototype.unpipe.call(this, dest);
    }
    wrap(stream) {
        return Readable.prototype.wrap.call(this, stream);
    }
    get readable() {
        const r23 = this._readableState;
        return !!r23 && r23.readable && !r23.destroyed && !r23.errorEmitted && !r23.endEmitted;
    }
    set readable(val) {
        if (this._readableState) {
            this._readableState.readable = val;
        }
    }
    get readableHighWaterMark() {
        return this._readableState.highWaterMark;
    }
    get readableBuffer() {
        return this._readableState && this._readableState.buffer;
    }
    get readableFlowing() {
        return this._readableState.flowing;
    }
    set readableFlowing(state43) {
        if (this._readableState) {
            this._readableState.flowing = state43;
        }
    }
    get readableLength() {
        return this._readableState.length;
    }
    get readableObjectMode() {
        return this._readableState ? this._readableState.objectMode : false;
    }
    get readableEncoding() {
        return this._readableState ? this._readableState.encoding : null;
    }
    get readableEnded() {
        return this._readableState ? this._readableState.endEmitted : false;
    }
    _write(chunk, encoding, cb) {
        return Writable.prototype._write.call(this, chunk, encoding, cb);
    }
    write(chunk, x12, y7) {
        return Writable.prototype.write.call(this, chunk, x12, y7);
    }
    cork() {
        return Writable.prototype.cork.call(this);
    }
    uncork() {
        return Writable.prototype.uncork.call(this);
    }
    setDefaultEncoding(encoding) {
        if (typeof encoding === "string") {
            encoding = encoding.toLowerCase();
        }
        if (!Buffer.isEncoding(encoding)) {
            throw new ERR_UNKNOWN_ENCODING(encoding);
        }
        this._writableState.defaultEncoding = encoding;
        return this;
    }
    end(x13, y8, z4) {
        const state44 = this._writableState;
        let chunk;
        let encoding;
        let cb;
        if (typeof x13 === "function") {
            chunk = null;
            encoding = null;
            cb = x13;
        } else if (typeof y8 === "function") {
            chunk = x13;
            encoding = null;
            cb = y8;
        } else {
            chunk = x13;
            encoding = y8;
            cb = z4;
        }
        if (chunk !== null && chunk !== undefined) {
            this.write(chunk, encoding);
        }
        if (state44.corked) {
            state44.corked = 1;
            this.uncork();
        }
        let err;
        if (!state44.errored && !state44.ending) {
            state44.ending = true;
            debug3("** Writable.end calling finishMaybe", state44);
            finishMaybe1(this, state44, true);
            state44.ended = true;
        } else if (state44.finished) {
            err = new ERR_STREAM_ALREADY_FINISHED("end");
        } else if (state44.destroyed) {
            err = new ERR_STREAM_DESTROYED("end");
        }
        if (typeof cb === "function") {
            if (err || state44.finished) {
                queueMicrotask(()=>{
                    cb(err);
                });
            } else {
                state44[kOnFinished].push(cb);
            }
        }
        return this;
    }
    get destroyed() {
        if (this._readableState === undefined || this._writableState === undefined) {
            return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
    }
    set destroyed(value) {
        if (this._readableState && this._writableState) {
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
        }
    }
    get writable() {
        const w12 = this._writableState;
        return !!w12 && w12.writable !== false && !w12.destroyed && !w12.errored && !w12.ending && !w12.ended;
    }
    set writable(val) {
        if (this._writableState) {
            this._writableState.writable = !!val;
        }
    }
    get writableFinished() {
        return this._writableState ? this._writableState.finished : false;
    }
    get writableObjectMode() {
        return this._writableState ? this._writableState.objectMode : false;
    }
    get writableBuffer() {
        return this._writableState && this._writableState.getBuffer();
    }
    get writableEnded() {
        return this._writableState ? this._writableState.ending : false;
    }
    get writableHighWaterMark() {
        return this._writableState && this._writableState.highWaterMark;
    }
    get writableCorked() {
        return this._writableState ? this._writableState.corked : 0;
    }
    get writableLength() {
        return this._writableState && this._writableState.length;
    }
}
class Readable extends Stream {
    _readableState;
    constructor(options){
        super();
        if (options) {
            if (typeof options.read === "function") {
                this._read = options.read;
            }
            if (typeof options.destroy === "function") {
                this._destroy = options.destroy;
            }
        }
        this._readableState = new ReadableState(options);
    }
    static from(iterable, opts) {
        return from(iterable, opts);
    }
    static ReadableState = ReadableState;
    static _fromList = fromList;
    read(n29) {
        debug2("read", n29);
        if (n29 === undefined) {
            n29 = NaN;
        }
        const state45 = this._readableState;
        const nOrig = n29;
        if (n29 > state45.highWaterMark) {
            state45.highWaterMark = computeNewHighWaterMark(n29);
        }
        if (n29 !== 0) {
            state45.emittedReadable = false;
        }
        if (n29 === 0 && state45.needReadable && ((state45.highWaterMark !== 0 ? state45.length >= state45.highWaterMark : state45.length > 0) || state45.ended)) {
            if (state45.length === 0 && state45.ended) {
                endReadable(this);
            } else {
                emitReadable(this);
            }
            return null;
        }
        n29 = howMuchToRead(n29, state45);
        if (n29 === 0 && state45.ended) {
            if (state45.length === 0) {
                endReadable(this);
            }
            return null;
        }
        let doRead = state45.needReadable;
        if (state45.length === 0 || state45.length - n29 < state45.highWaterMark) {
            doRead = true;
        }
        if (state45.ended || state45.reading || state45.destroyed || state45.errored || !state45.constructed) {
            doRead = false;
        } else if (doRead) {
            state45.reading = true;
            state45.sync = true;
            if (state45.length === 0) {
                state45.needReadable = true;
            }
            this._read();
            state45.sync = false;
            if (!state45.reading) {
                n29 = howMuchToRead(nOrig, state45);
            }
        }
        let ret;
        if (n29 > 0) {
            ret = fromList(n29, state45);
        } else {
            ret = null;
        }
        if (ret === null) {
            state45.needReadable = state45.length <= state45.highWaterMark;
            n29 = 0;
        } else {
            state45.length -= n29;
            if (state45.multiAwaitDrain) {
                state45.awaitDrainWriters.clear();
            } else {
                state45.awaitDrainWriters = null;
            }
        }
        if (state45.length === 0) {
            if (!state45.ended) {
                state45.needReadable = true;
            }
            if (nOrig !== n29 && state45.ended) {
                endReadable(this);
            }
        }
        if (ret !== null) {
            this.emit("data", ret);
        }
        return ret;
    }
    _read(_size) {
        throw new ERR_METHOD_NOT_IMPLEMENTED("_read()");
    }
    pipe(dest, pipeOpts) {
        const src = this;
        const state46 = this._readableState;
        if (state46.pipes.length === 1) {
            if (!state46.multiAwaitDrain) {
                state46.multiAwaitDrain = true;
                state46.awaitDrainWriters = new Set(state46.awaitDrainWriters ? [
                    state46.awaitDrainWriters
                ] : []);
            }
        }
        state46.pipes.push(dest);
        debug2("pipe count=%d opts=%j", state46.pipes.length, pipeOpts);
        const doEnd = !pipeOpts || pipeOpts.end !== false;
        const endFn = doEnd ? onend : unpipe;
        if (state46.endEmitted) {
            queueMicrotask(endFn);
        } else {
            this.once("end", endFn);
        }
        dest.on("unpipe", onunpipe);
        function onunpipe(readable, unpipeInfo) {
            debug2("onunpipe");
            if (readable === src) {
                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                    unpipeInfo.hasUnpiped = true;
                    cleanup();
                }
            }
        }
        function onend() {
            debug2("onend");
            dest.end();
        }
        let ondrain;
        let cleanedUp = false;
        function cleanup() {
            debug2("cleanup");
            dest.removeListener("close", onclose);
            dest.removeListener("finish", onfinish);
            if (ondrain) {
                dest.removeListener("drain", ondrain);
            }
            dest.removeListener("error", onerror);
            dest.removeListener("unpipe", onunpipe);
            src.removeListener("end", onend);
            src.removeListener("end", unpipe);
            src.removeListener("data", ondata);
            cleanedUp = true;
            if (ondrain && state46.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain)) {
                ondrain();
            }
        }
        this.on("data", ondata);
        function ondata(chunk) {
            debug2("ondata");
            const ret = dest.write(chunk);
            debug2("dest.write", ret);
            if (ret === false) {
                if (!cleanedUp) {
                    if (state46.pipes.length === 1 && state46.pipes[0] === dest) {
                        debug2("false write response, pause", 0);
                        state46.awaitDrainWriters = dest;
                        state46.multiAwaitDrain = false;
                    } else if (state46.pipes.length > 1 && state46.pipes.includes(dest)) {
                        debug2("false write response, pause");
                        state46.awaitDrainWriters.add(dest);
                    }
                    src.pause();
                }
                if (!ondrain) {
                    ondrain = pipeOnDrain(src, dest);
                    dest.on("drain", ondrain);
                }
            }
        }
        function onerror(er) {
            debug2("onerror", er);
            unpipe();
            dest.removeListener("error", onerror);
            if (dest.listenerCount("error") === 0) {
                const s12 = dest._writableState || dest._readableState;
                if (s12 && !s12.errorEmitted) {
                    if (dest instanceof Duplex) {
                        errorOrDestroy2(dest, er);
                    } else {
                        errorOrDestroy1(dest, er);
                    }
                } else {
                    dest.emit("error", er);
                }
            }
        }
        prependListener(dest, "error", onerror);
        function onclose() {
            dest.removeListener("finish", onfinish);
            unpipe();
        }
        dest.once("close", onclose);
        function onfinish() {
            debug2("onfinish");
            dest.removeListener("close", onclose);
            unpipe();
        }
        dest.once("finish", onfinish);
        function unpipe() {
            debug2("unpipe");
            src.unpipe(dest);
        }
        dest.emit("pipe", src);
        if (!state46.flowing) {
            debug2("pipe resume");
            this.resume();
        }
        return dest;
    }
    isPaused() {
        return this._readableState[kPaused] === true || this._readableState.flowing === false;
    }
    setEncoding(enc) {
        const decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder;
        this._readableState.encoding = this._readableState.decoder.encoding;
        const buffer = this._readableState.buffer;
        let content = "";
        for (const data of buffer){
            content += decoder.write(data);
        }
        buffer.clear();
        if (content !== "") {
            buffer.push(content);
        }
        this._readableState.length = content.length;
        return this;
    }
    on(ev, fn) {
        const res = super.on.call(this, ev, fn);
        const state47 = this._readableState;
        if (ev === "data") {
            state47.readableListening = this.listenerCount("readable") > 0;
            if (state47.flowing !== false) {
                this.resume();
            }
        } else if (ev === "readable") {
            if (!state47.endEmitted && !state47.readableListening) {
                state47.readableListening = state47.needReadable = true;
                state47.flowing = false;
                state47.emittedReadable = false;
                if (state47.length) {
                    emitReadable(this);
                } else if (!state47.reading) {
                    queueMicrotask(()=>nReadingNextTick(this)
                    );
                }
            }
        }
        return res;
    }
    removeListener(ev, fn) {
        const res = super.removeListener.call(this, ev, fn);
        if (ev === "readable") {
            queueMicrotask(()=>updateReadableListening(this)
            );
        }
        return res;
    }
    off = this.removeListener;
    destroy(err, cb) {
        const r24 = this._readableState;
        if (r24.destroyed) {
            if (typeof cb === "function") {
                cb();
            }
            return this;
        }
        if (err) {
            err.stack;
            if (!r24.errored) {
                r24.errored = err;
            }
        }
        r24.destroyed = true;
        if (!r24.constructed) {
            this.once(kDestroy, (er)=>{
                _destroy(this, err || er, cb);
            });
        } else {
            _destroy(this, err, cb);
        }
        return this;
    }
    _undestroy() {
        const r25 = this._readableState;
        r25.constructed = true;
        r25.closed = false;
        r25.closeEmitted = false;
        r25.destroyed = false;
        r25.errored = null;
        r25.errorEmitted = false;
        r25.reading = false;
        r25.ended = r25.readable === false;
        r25.endEmitted = r25.readable === false;
    }
    _destroy(error, callback) {
        callback(error);
    }
    [captureRejectionSymbol](err) {
        this.destroy(err);
    }
    push(chunk, encoding) {
        return readableAddChunk(this, chunk, encoding, false);
    }
    unshift(chunk, encoding) {
        return readableAddChunk(this, chunk, encoding, true);
    }
    unpipe(dest) {
        const state48 = this._readableState;
        const unpipeInfo = {
            hasUnpiped: false
        };
        if (state48.pipes.length === 0) {
            return this;
        }
        if (!dest) {
            const dests = state48.pipes;
            state48.pipes = [];
            this.pause();
            for (const dest of dests){
                dest.emit("unpipe", this, {
                    hasUnpiped: false
                });
            }
            return this;
        }
        const index = state48.pipes.indexOf(dest);
        if (index === -1) {
            return this;
        }
        state48.pipes.splice(index, 1);
        if (state48.pipes.length === 0) {
            this.pause();
        }
        dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    removeAllListeners(ev) {
        const res = super.removeAllListeners(ev);
        if (ev === "readable" || ev === undefined) {
            queueMicrotask(()=>updateReadableListening(this)
            );
        }
        return res;
    }
    resume() {
        const state49 = this._readableState;
        if (!state49.flowing) {
            debug2("resume");
            state49.flowing = !state49.readableListening;
            resume(this, state49);
        }
        state49[kPaused] = false;
        return this;
    }
    pause() {
        debug2("call pause flowing=%j", this._readableState.flowing);
        if (this._readableState.flowing !== false) {
            debug2("pause");
            this._readableState.flowing = false;
            this.emit("pause");
        }
        this._readableState[kPaused] = true;
        return this;
    }
    wrap(stream) {
        const state50 = this._readableState;
        let paused = false;
        stream.on("end", ()=>{
            if (state50.decoder && !state50.ended) {
                const chunk = state50.decoder.end();
                if (chunk && chunk.length) {
                    this.push(chunk);
                }
            }
            this.push(null);
        });
        stream.on("data", (chunk)=>{
            if (state50.decoder) {
                chunk = state50.decoder.write(chunk);
            }
            if (state50.objectMode && (chunk === null || chunk === undefined)) {
                return;
            } else if (!state50.objectMode && (!chunk || !chunk.length)) {
                return;
            }
            const ret = this.push(chunk);
            if (!ret) {
                paused = true;
                stream.pause();
            }
        });
        for(const i in stream){
            if (this[i] === undefined && typeof stream[i] === "function") {
                this[i] = (function methodWrap(method) {
                    return function methodWrapReturnFunction() {
                        return stream[method].apply(stream);
                    };
                })(i);
            }
        }
        stream.on("error", (err)=>{
            errorOrDestroy(this, err);
        });
        stream.on("close", ()=>{
            this.emit("close");
        });
        stream.on("destroy", ()=>{
            this.emit("destroy");
        });
        stream.on("pause", ()=>{
            this.emit("pause");
        });
        stream.on("resume", ()=>{
            this.emit("resume");
        });
        this._read = ()=>{
            if (paused) {
                paused = false;
                stream.resume();
            }
        };
        return this;
    }
    [Symbol.asyncIterator]() {
        return createReadableStreamAsyncIterator(this);
    }
    get readable() {
        return this._readableState?.readable && !this._readableState?.destroyed && !this._readableState?.errorEmitted && !this._readableState?.endEmitted;
    }
    set readable(val) {
        if (this._readableState) {
            this._readableState.readable = val;
        }
    }
    get readableHighWaterMark() {
        return this._readableState.highWaterMark;
    }
    get readableBuffer() {
        return this._readableState && this._readableState.buffer;
    }
    get readableFlowing() {
        return this._readableState.flowing;
    }
    set readableFlowing(state51) {
        if (this._readableState) {
            this._readableState.flowing = state51;
        }
    }
    get readableLength() {
        return this._readableState.length;
    }
    get readableObjectMode() {
        return this._readableState ? this._readableState.objectMode : false;
    }
    get readableEncoding() {
        return this._readableState ? this._readableState.encoding : null;
    }
    get destroyed() {
        if (this._readableState === undefined) {
            return false;
        }
        return this._readableState.destroyed;
    }
    set destroyed(value) {
        if (!this._readableState) {
            return;
        }
        this._readableState.destroyed = value;
    }
    get readableEnded() {
        return this._readableState ? this._readableState.endEmitted : false;
    }
}
Object.defineProperties(Readable, {
    _readableState: {
        enumerable: false
    },
    destroyed: {
        enumerable: false
    },
    readableBuffer: {
        enumerable: false
    },
    readableEncoding: {
        enumerable: false
    },
    readableEnded: {
        enumerable: false
    },
    readableFlowing: {
        enumerable: false
    },
    readableHighWaterMark: {
        enumerable: false
    },
    readableLength: {
        enumerable: false
    },
    readableObjectMode: {
        enumerable: false
    }
});
const kLastReject = Symbol("lastReject");
const kError = Symbol("error");
const kEnded = Symbol("ended");
const kLastPromise = Symbol("lastPromise");
const kHandlePromise = Symbol("handlePromise");
const kStream = Symbol("stream");
function initIteratorSymbols(o6, symbols) {
    const properties = {};
    for(const sym in symbols){
        properties[sym] = {
            configurable: false,
            enumerable: false,
            writable: true
        };
    }
    Object.defineProperties(o6, properties);
}
function createIterResult1(value, done) {
    return {
        value,
        done
    };
}
function readAndResolve(iter) {
    const resolve7 = iter[kLastResolve];
    if (resolve7 !== null) {
        const data = iter[kStream].read();
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve7(createIterResult1(data, false));
        }
    }
}
function onReadable(iter) {
    queueMicrotask(()=>readAndResolve(iter)
    );
}
function wrapForNext(lastPromise, iter) {
    return (resolve8, reject)=>{
        lastPromise.then(()=>{
            if (iter[kEnded]) {
                resolve8(createIterResult1(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve8, reject);
        }, reject);
    };
}
function finish2(self, err1) {
    return new Promise((resolve9, reject)=>{
        const stream = self[kStream];
        eos(stream, (err)=>{
            if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                reject(err);
            } else {
                resolve9(createIterResult1(undefined, true));
            }
        });
        destroyer(stream, err1);
    });
}
const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function*() {}).prototype);
class ReadableStreamAsyncIterator {
    [kEnded];
    [kError] = null;
    [kHandlePromise] = (resolve10, reject)=>{
        const data = this[kStream].read();
        if (data) {
            this[kLastPromise] = null;
            this[kLastResolve] = null;
            this[kLastReject] = null;
            resolve10(createIterResult1(data, false));
        } else {
            this[kLastResolve] = resolve10;
            this[kLastReject] = reject;
        }
    };
    [kLastPromise];
    [kLastReject] = null;
    [kLastResolve] = null;
    [kStream];
    [Symbol.asyncIterator] = AsyncIteratorPrototype[Symbol.asyncIterator];
    constructor(stream){
        this[kEnded] = stream.readableEnded || stream._readableState.endEmitted;
        this[kStream] = stream;
        initIteratorSymbols(this, [
            kEnded,
            kError,
            kHandlePromise,
            kLastPromise,
            kLastReject,
            kLastResolve,
            kStream, 
        ]);
    }
    get stream() {
        return this[kStream];
    }
    next() {
        const error = this[kError];
        if (error !== null) {
            return Promise.reject(error);
        }
        if (this[kEnded]) {
            return Promise.resolve(createIterResult1(undefined, true));
        }
        if (this[kStream].destroyed) {
            return new Promise((resolve11, reject)=>{
                if (this[kError]) {
                    reject(this[kError]);
                } else if (this[kEnded]) {
                    resolve11(createIterResult1(undefined, true));
                } else {
                    eos(this[kStream], (err)=>{
                        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                            reject(err);
                        } else {
                            resolve11(createIterResult1(undefined, true));
                        }
                    });
                }
            });
        }
        const lastPromise = this[kLastPromise];
        let promise;
        if (lastPromise) {
            promise = new Promise(wrapForNext(lastPromise, this));
        } else {
            const data = this[kStream].read();
            if (data !== null) {
                return Promise.resolve(createIterResult1(data, false));
            }
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
    return() {
        return finish2(this);
    }
    throw(err) {
        return finish2(this, err);
    }
}
const createReadableStreamAsyncIterator = (stream)=>{
    if (typeof stream.read !== "function") {
        const src = stream;
        stream = new Readable({
            objectMode: true
        }).wrap(src);
        eos(stream, (err)=>destroyer(src, err)
        );
    }
    const iterator = new ReadableStreamAsyncIterator(stream);
    iterator[kLastPromise] = null;
    eos(stream, {
        writable: false
    }, (err)=>{
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            const reject = iterator[kLastReject];
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        const resolve12 = iterator[kLastResolve];
        if (resolve12 !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve12(createIterResult1(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
};
const kCallback = Symbol("kCallback");
class Transform extends Duplex {
    [kCallback];
    _flush;
    constructor(options){
        super(options);
        this._readableState.sync = false;
        this[kCallback] = null;
        if (options) {
            if (typeof options.transform === "function") {
                this._transform = options.transform;
            }
            if (typeof options.flush === "function") {
                this._flush = options.flush;
            }
        }
        this.on("prefinish", function() {
            if (typeof this._flush === "function" && !this.destroyed) {
                this._flush((er, data)=>{
                    if (er) {
                        this.destroy(er);
                        return;
                    }
                    if (data != null) {
                        this.push(data);
                    }
                    this.push(null);
                });
            } else {
                this.push(null);
            }
        });
    }
    _read = ()=>{
        if (this[kCallback]) {
            const callback = this[kCallback];
            this[kCallback] = null;
            callback();
        }
    };
    _transform(_chunk, _encoding, _callback) {
        throw new ERR_METHOD_NOT_IMPLEMENTED("_transform()");
    }
    _write = (chunk, encoding, callback)=>{
        const rState = this._readableState;
        const wState = this._writableState;
        const length = rState.length;
        this._transform(chunk, encoding, (err, val)=>{
            if (err) {
                callback(err);
                return;
            }
            if (val != null) {
                this.push(val);
            }
            if (wState.ended || length === rState.length || rState.length < rState.highWaterMark || rState.length === 0) {
                callback();
            } else {
                this[kCallback] = callback;
            }
        });
    };
}
class PassThrough extends Transform {
    constructor(options){
        super(options);
    }
    _transform(chunk, _encoding, cb) {
        cb(null, chunk);
    }
}
function destroyer1(stream, reading, writing, callback) {
    callback = once(callback);
    let finished2 = false;
    stream.on("close", ()=>{
        finished2 = true;
    });
    eos(stream, {
        readable: reading,
        writable: writing
    }, (err)=>{
        finished2 = !err;
        const rState = stream?._readableState;
        if (err && err.code === "ERR_STREAM_PREMATURE_CLOSE" && reading && rState?.ended && !rState?.errored && !rState?.errorEmitted) {
            stream.once("end", callback).once("error", callback);
        } else {
            callback(err);
        }
    });
    return (err)=>{
        if (finished2) return;
        finished2 = true;
        destroyer(stream, err);
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
}
function popCallback(streams) {
    if (typeof streams[streams.length - 1] !== "function") {
        throw new ERR_INVALID_CALLBACK(streams[streams.length - 1]);
    }
    return streams.pop();
}
function isReadable1(obj) {
    return !!(obj && typeof obj.pipe === "function");
}
function isWritable1(obj) {
    return !!(obj && typeof obj.write === "function");
}
function isStream(obj) {
    return isReadable1(obj) || isWritable1(obj);
}
function isIterable(obj, isAsync) {
    if (!obj) return false;
    if (isAsync === true) return typeof obj[Symbol.asyncIterator] === "function";
    if (isAsync === false) return typeof obj[Symbol.iterator] === "function";
    return typeof obj[Symbol.asyncIterator] === "function" || typeof obj[Symbol.iterator] === "function";
}
function makeAsyncIterable(val) {
    if (isIterable(val)) {
        return val;
    } else if (isReadable1(val)) {
        return fromReadable(val);
    }
    throw new ERR_INVALID_ARG_TYPE("val", [
        "Readable",
        "Iterable",
        "AsyncIterable"
    ], val);
}
async function* fromReadable(val) {
    yield* createReadableStreamAsyncIterator(val);
}
async function pump(iterable, writable, finish3) {
    let error = null;
    try {
        for await (const chunk of iterable){
            if (!writable.write(chunk)) {
                if (writable.destroyed) return;
                await once1(writable, "drain");
            }
        }
        writable.end();
    } catch (err) {
        if (err instanceof NodeErrorAbstraction) {
            error = err;
        }
    } finally{
        finish3(error);
    }
}
function pipeline(...args) {
    const callback = once(popCallback(args));
    let streams;
    if (args.length > 1) {
        streams = args;
    } else {
        throw new ERR_MISSING_ARGS("streams");
    }
    let error;
    let value;
    const destroys = [];
    let finishCount = 0;
    function finish4(err) {
        const __final = --finishCount === 0;
        if (err && (!error || error.code === "ERR_STREAM_PREMATURE_CLOSE")) {
            error = err;
        }
        if (!error && !__final) {
            return;
        }
        while(destroys.length){
            destroys.shift()(error);
        }
        if (__final) {
            callback(error, value);
        }
    }
    let ret;
    for(let i = 0; i < streams.length; i++){
        const stream = streams[i];
        const reading = i < streams.length - 1;
        const writing = i > 0;
        if (isStream(stream)) {
            finishCount++;
            destroys.push(destroyer1(stream, reading, writing, finish4));
        }
        if (i === 0) {
            if (typeof stream === "function") {
                ret = stream();
                if (!isIterable(ret)) {
                    throw new ERR_INVALID_RETURN_VALUE("Iterable, AsyncIterable or Stream", "source", ret);
                }
            } else if (isIterable(stream) || isReadable1(stream)) {
                ret = stream;
            } else {
                throw new ERR_INVALID_ARG_TYPE("source", [
                    "Stream",
                    "Iterable",
                    "AsyncIterable",
                    "Function"
                ], stream);
            }
        } else if (typeof stream === "function") {
            ret = makeAsyncIterable(ret);
            ret = stream(ret);
            if (reading) {
                if (!isIterable(ret, true)) {
                    throw new ERR_INVALID_RETURN_VALUE("AsyncIterable", `transform[${i - 1}]`, ret);
                }
            } else {
                const pt1 = new PassThrough({
                    objectMode: true
                });
                if (ret instanceof Promise) {
                    ret.then((val)=>{
                        value = val;
                        pt1.end(val);
                    }, (err)=>{
                        pt1.destroy(err);
                    });
                } else if (isIterable(ret, true)) {
                    finishCount++;
                    pump(ret, pt1, finish4);
                } else {
                    throw new ERR_INVALID_RETURN_VALUE("AsyncIterable or Promise", "destination", ret);
                }
                ret = pt1;
                finishCount++;
                destroys.push(destroyer1(ret, false, true, finish4));
            }
        } else if (isStream(stream)) {
            if (isReadable1(ret)) {
                ret.pipe(stream);
            } else {
                ret = makeAsyncIterable(ret);
                finishCount++;
                pump(ret, stream, finish4);
            }
            ret = stream;
        } else {
            const name = reading ? `transform[${i - 1}]` : "destination";
            throw new ERR_INVALID_ARG_TYPE(name, [
                "Stream",
                "Function"
            ], ret);
        }
    }
    return ret;
}
function pipeline1(...streams) {
    return new Promise((resolve13, reject)=>{
        pipeline(...streams, (err, value)=>{
            if (err) {
                reject(err);
            } else {
                resolve13(value);
            }
        });
    });
}
function finished(stream, opts) {
    return new Promise((resolve14, reject)=>{
        eos(stream, opts || null, (err)=>{
            if (err) {
                reject(err);
            } else {
                resolve14();
            }
        });
    });
}
const mod3 = {
    pipeline: pipeline1,
    finished: finished
};
Stream.Readable = Readable;
Stream.Writable = Writable;
Stream.Duplex = Duplex;
Stream.Transform = Transform;
Stream.PassThrough = PassThrough;
Stream.pipeline = pipeline;
Stream.finished = eos;
Stream.promises = mod3;
Stream.Stream = Stream;
const { _isUint8Array , _uint8ArrayToBuffer  } = Stream;
function isInt32(value) {
    return value === (value | 0);
}
hideStackFrames((value, name, min1 = -2147483648, max = 2147483647)=>{
    if (!isInt32(value)) {
        if (typeof value !== "number") {
            throw new ERR_INVALID_ARG_TYPE(name, "number", value);
        }
        if (!Number.isInteger(value)) {
            throw new ERR_OUT_OF_RANGE(name, "an integer", value);
        }
        throw new ERR_OUT_OF_RANGE(name, `>= ${min1} && <= ${max}`, value);
    }
    if (value < min1 || value > max) {
        throw new ERR_OUT_OF_RANGE(name, `>= ${min1} && <= ${max}`, value);
    }
});
function validateString(value, name) {
    if (typeof value !== "string") {
        throw new ERR_INVALID_ARG_TYPE(name, "string", value);
    }
}
hideStackFrames((value, name, oneOf)=>{
    if (!Array.prototype.includes.call(oneOf, value)) {
        const allowed = Array.prototype.join.call(Array.prototype.map.call(oneOf, (v6)=>typeof v6 === "string" ? `'${v6}'` : String(v6)
        ), ", ");
        const reason = "must be one of: " + allowed;
        throw new ERR_INVALID_ARG_VALUE(name, value, reason);
    }
});
hideStackFrames((callback)=>{
    if (typeof callback !== "function") {
        throw new ERR_INVALID_CALLBACK(callback);
    }
});
hideStackFrames((signal, name)=>{
    if (signal !== undefined && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
        throw new ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
    }
});
hideStackFrames((value, name)=>{
    if (typeof value !== "function") {
        throw new ERR_INVALID_ARG_TYPE(name, "Function", value);
    }
});
const { hasOwn  } = Object;
function get(obj, key) {
    if (hasOwn(obj, key)) {
        return obj[key];
    }
}
function getForce(obj, key) {
    const v7 = get(obj, key);
    assert(v7 != null);
    return v7;
}
function isNumber(x14) {
    if (typeof x14 === "number") return true;
    if (/^0x[0-9a-f]+$/i.test(String(x14))) return true;
    return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(String(x14));
}
function hasKey(obj, keys) {
    let o7 = obj;
    keys.slice(0, -1).forEach((key)=>{
        o7 = get(o7, key) ?? {};
    });
    const key1 = keys[keys.length - 1];
    return key1 in o7;
}
function parse3(args, { "--": doubleDash = false , alias: alias3 = {} , boolean: __boolean = false , default: defaults = {} , stopEarly =false , string =[] , unknown =(i)=>i
  } = {}) {
    const flags = {
        bools: {},
        strings: {},
        unknownFn: unknown,
        allBools: false
    };
    if (__boolean !== undefined) {
        if (typeof __boolean === "boolean") {
            flags.allBools = !!__boolean;
        } else {
            const booleanArgs = typeof __boolean === "string" ? [
                __boolean
            ] : __boolean;
            for (const key of booleanArgs.filter(Boolean)){
                flags.bools[key] = true;
            }
        }
    }
    const aliases = {};
    if (alias3 !== undefined) {
        for(const key in alias3){
            const val = getForce(alias3, key);
            if (typeof val === "string") {
                aliases[key] = [
                    val
                ];
            } else {
                aliases[key] = val;
            }
            for (const alias1 of getForce(aliases, key)){
                aliases[alias1] = [
                    key
                ].concat(aliases[key].filter((y9)=>alias1 !== y9
                ));
            }
        }
    }
    if (string !== undefined) {
        const stringArgs = typeof string === "string" ? [
            string
        ] : string;
        for (const key of stringArgs.filter(Boolean)){
            flags.strings[key] = true;
            const alias = get(aliases, key);
            if (alias) {
                for (const al of alias){
                    flags.strings[al] = true;
                }
            }
        }
    }
    const argv1 = {
        _: []
    };
    function argDefined(key, arg) {
        return flags.allBools && /^--[^=]+$/.test(arg) || get(flags.bools, key) || !!get(flags.strings, key) || !!get(aliases, key);
    }
    function setKey(obj, keys, value) {
        let o8 = obj;
        keys.slice(0, -1).forEach(function(key) {
            if (get(o8, key) === undefined) {
                o8[key] = {};
            }
            o8 = get(o8, key);
        });
        const key4 = keys[keys.length - 1];
        if (get(o8, key4) === undefined || get(flags.bools, key4) || typeof get(o8, key4) === "boolean") {
            o8[key4] = value;
        } else if (Array.isArray(get(o8, key4))) {
            o8[key4].push(value);
        } else {
            o8[key4] = [
                get(o8, key4),
                value
            ];
        }
    }
    function setArg(key, val, arg = undefined) {
        if (arg && flags.unknownFn && !argDefined(key, arg)) {
            if (flags.unknownFn(arg, key, val) === false) return;
        }
        const value = !get(flags.strings, key) && isNumber(val) ? Number(val) : val;
        setKey(argv1, key.split("."), value);
        const alias = get(aliases, key);
        if (alias) {
            for (const x15 of alias){
                setKey(argv1, x15.split("."), value);
            }
        }
    }
    function aliasIsBoolean(key) {
        return getForce(aliases, key).some((x16)=>typeof get(flags.bools, x16) === "boolean"
        );
    }
    for (const key3 of Object.keys(flags.bools)){
        setArg(key3, defaults[key3] === undefined ? false : defaults[key3]);
    }
    let notFlags = [];
    if (args.includes("--")) {
        notFlags = args.slice(args.indexOf("--") + 1);
        args = args.slice(0, args.indexOf("--"));
    }
    for(let i = 0; i < args.length; i++){
        const arg = args[i];
        if (/^--.+=/.test(arg)) {
            const m7 = arg.match(/^--([^=]+)=(.*)$/s);
            assert(m7 != null);
            const [, key, value] = m7;
            if (flags.bools[key]) {
                const booleanValue = value !== "false";
                setArg(key, booleanValue, arg);
            } else {
                setArg(key, value, arg);
            }
        } else if (/^--no-.+/.test(arg)) {
            const m8 = arg.match(/^--no-(.+)/);
            assert(m8 != null);
            setArg(m8[1], false, arg);
        } else if (/^--.+/.test(arg)) {
            const m9 = arg.match(/^--(.+)/);
            assert(m9 != null);
            const [, key] = m9;
            const next = args[i + 1];
            if (next !== undefined && !/^-/.test(next) && !get(flags.bools, key) && !flags.allBools && (get(aliases, key) ? !aliasIsBoolean(key) : true)) {
                setArg(key, next, arg);
                i++;
            } else if (/^(true|false)$/.test(next)) {
                setArg(key, next === "true", arg);
                i++;
            } else {
                setArg(key, get(flags.strings, key) ? "" : true, arg);
            }
        } else if (/^-[^-]+/.test(arg)) {
            const letters = arg.slice(1, -1).split("");
            let broken = false;
            for(let j8 = 0; j8 < letters.length; j8++){
                const next = arg.slice(j8 + 2);
                if (next === "-") {
                    setArg(letters[j8], next, arg);
                    continue;
                }
                if (/[A-Za-z]/.test(letters[j8]) && /=/.test(next)) {
                    setArg(letters[j8], next.split(/=(.+)/)[1], arg);
                    broken = true;
                    break;
                }
                if (/[A-Za-z]/.test(letters[j8]) && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
                    setArg(letters[j8], next, arg);
                    broken = true;
                    break;
                }
                if (letters[j8 + 1] && letters[j8 + 1].match(/\W/)) {
                    setArg(letters[j8], arg.slice(j8 + 2), arg);
                    broken = true;
                    break;
                } else {
                    setArg(letters[j8], get(flags.strings, letters[j8]) ? "" : true, arg);
                }
            }
            const [key] = arg.slice(-1);
            if (!broken && key !== "-") {
                if (args[i + 1] && !/^(-|--)[^-]/.test(args[i + 1]) && !get(flags.bools, key) && (get(aliases, key) ? !aliasIsBoolean(key) : true)) {
                    setArg(key, args[i + 1], arg);
                    i++;
                } else if (args[i + 1] && /^(true|false)$/.test(args[i + 1])) {
                    setArg(key, args[i + 1] === "true", arg);
                    i++;
                } else {
                    setArg(key, get(flags.strings, key) ? "" : true, arg);
                }
            }
        } else {
            if (!flags.unknownFn || flags.unknownFn(arg) !== false) {
                argv1._.push(flags.strings["_"] ?? !isNumber(arg) ? arg : Number(arg));
            }
            if (stopEarly) {
                argv1._.push(...args.slice(i + 1));
                break;
            }
        }
    }
    for (const key2 of Object.keys(defaults)){
        if (!hasKey(argv1, key2.split("."))) {
            setKey(argv1, key2.split("."), defaults[key2]);
            if (aliases[key2]) {
                for (const x17 of aliases[key2]){
                    setKey(argv1, x17.split("."), defaults[key2]);
                }
            }
        }
    }
    if (doubleDash) {
        argv1["--"] = [];
        for (const key of notFlags){
            argv1["--"].push(key);
        }
    } else {
        for (const key of notFlags){
            argv1._.push(key);
        }
    }
    return argv1;
}
function getOptions() {
    const args = parse3(Deno.args);
    const options = new Map(Object.entries(args).map(([key, value])=>[
            key,
            {
                value
            }
        ]
    ));
    return {
        options
    };
}
let optionsMap;
function getOptionsFromBinding() {
    if (!optionsMap) {
        ({ options: optionsMap  } = getOptions());
    }
    return optionsMap;
}
function getOptionValue(optionName) {
    const options = getOptionsFromBinding();
    if (optionName.startsWith("--no-")) {
        const option = options.get("--" + optionName.slice(5));
        return option && !option.value;
    }
    return options.get(optionName)?.value;
}
const notImplementedEvents = [
    "beforeExit",
    "disconnect",
    "message",
    "multipleResolves",
    "rejectionHandled",
    "SIGBREAK",
    "SIGBUS",
    "SIGFPE",
    "SIGHUP",
    "SIGILL",
    "SIGINT",
    "SIGSEGV",
    "SIGTERM",
    "SIGWINCH",
    "uncaughtException",
    "uncaughtExceptionMonitor",
    "unhandledRejection", 
];
const arch = Deno.build.arch;
const argv = [
    "",
    "",
    ...Deno.args
];
Object.defineProperty(argv, "0", {
    get: Deno.execPath
});
Object.defineProperty(argv, "1", {
    get: ()=>fromFileUrl2(Deno.mainModule)
});
const chdir = Deno.chdir;
const cwd = Deno.cwd;
const env = new Proxy({}, {
    get (_target, prop2) {
        return Deno.env.get(String(prop2));
    },
    ownKeys: ()=>Reflect.ownKeys(Deno.env.toObject())
    ,
    getOwnPropertyDescriptor: ()=>({
            enumerable: true,
            configurable: true
        })
    ,
    set (_target, prop3, value) {
        Deno.env.set(String(prop3), String(value));
        return value;
    }
});
const exit = Deno.exit;
function nextTick(cb, ...args) {
    if (args) {
        queueMicrotask(()=>cb.call(this, ...args)
        );
    } else {
        queueMicrotask(cb);
    }
}
const pid = Deno.pid;
const platform = isWindows ? "win32" : Deno.build.os;
const version = "v16.11.1";
const versions = {
    node: "16.11.1",
    uv: "1.42.0",
    zlib: "1.2.11",
    brotli: "1.0.9",
    ares: "1.17.2",
    modules: "93",
    nghttp2: "1.45.1",
    napi: "8",
    llhttp: "6.0.4",
    openssl: "1.1.1l",
    cldr: "39.0",
    icu: "69.1",
    tz: "2021a",
    unicode: "13.0",
    ...Deno.version
};
function createWritableStdioStream(writer) {
    const stream = new Writable({
        write (buf, enc, cb) {
            writer.writeSync(buf instanceof Uint8Array ? buf : Buffer.from(buf, enc));
            cb();
        },
        destroy (err, cb) {
            cb(err);
            this._undestroy();
            if (!this._writableState.emitClose) {
                queueMicrotask(()=>this.emit("close")
                );
            }
        }
    });
    stream.fd = writer.rid;
    stream.destroySoon = stream.destroy;
    stream._isStdio = true;
    stream.once("close", ()=>writer.close()
    );
    Object.defineProperties(stream, {
        columns: {
            enumerable: true,
            configurable: true,
            get: ()=>Deno.isatty(writer.rid) ? Deno.consoleSize(writer.rid).columns : undefined
        },
        rows: {
            enumerable: true,
            configurable: true,
            get: ()=>Deno.isatty(writer.rid) ? Deno.consoleSize(writer.rid).rows : undefined
        },
        isTTY: {
            enumerable: true,
            configurable: true,
            get: ()=>Deno.isatty(writer.rid)
        },
        getWindowSize: {
            enumerable: true,
            configurable: true,
            value: ()=>Deno.isatty(writer.rid) ? Object.values(Deno.consoleSize(writer.rid)) : undefined
        }
    });
    return stream;
}
const stderr = createWritableStdioStream(Deno.stderr);
const stdin = new Readable({
    read (size) {
        const p18 = Buffer.alloc(size || 16 * 1024);
        const length = Deno.stdin.readSync(p18);
        this.push(length === null ? null : p18.slice(0, length));
    }
});
stdin.on("close", ()=>Deno.stdin.close()
);
stdin.fd = Deno.stdin.rid;
Object.defineProperty(stdin, "isTTY", {
    enumerable: true,
    configurable: true,
    get () {
        return Deno.isatty(Deno.stdin.rid);
    }
});
const stdout = createWritableStdioStream(Deno.stdout);
function addReadOnlyProcessAlias(name, option, enumerable = true) {
    const value = getOptionValue(option);
    if (value) {
        Object.defineProperty(process1, name, {
            writable: false,
            configurable: true,
            enumerable,
            value
        });
    }
}
function createWarningObject(warning, type, code, ctor, detail) {
    assert(typeof warning === "string");
    const warningErr = new Error(warning);
    warningErr.name = String(type || "Warning");
    if (code !== undefined) {
        warningErr.code = code;
    }
    if (detail !== undefined) {
        warningErr.detail = detail;
    }
    Error.captureStackTrace(warningErr, ctor || process1.emitWarning);
    return warningErr;
}
function doEmitWarning(warning) {
    process1.emit("warning", warning);
}
function emitWarning(warning, type, code, ctor) {
    let detail;
    if (type !== null && typeof type === "object" && !Array.isArray(type)) {
        ctor = type.ctor;
        code = type.code;
        if (typeof type.detail === "string") {
            detail = type.detail;
        }
        type = type.type || "Warning";
    } else if (typeof type === "function") {
        ctor = type;
        code = undefined;
        type = "Warning";
    }
    if (type !== undefined) {
        validateString(type, "type");
    }
    if (typeof code === "function") {
        ctor = code;
        code = undefined;
    } else if (code !== undefined) {
        validateString(code, "code");
    }
    if (typeof warning === "string") {
        warning = createWarningObject(warning, type, code, ctor, detail);
    } else if (!(warning instanceof Error)) {
        throw new ERR_INVALID_ARG_TYPE("warning", [
            "Error",
            "string"
        ], warning);
    }
    if (warning.name === "DeprecationWarning") {
        if (process1.noDeprecation) {
            return;
        }
        if (process1.throwDeprecation) {
            return process1.nextTick(()=>{
                throw warning;
            });
        }
    }
    process1.nextTick(doEmitWarning, warning);
}
class Process extends EventEmitter {
    constructor(){
        super();
        window.addEventListener("unload", ()=>{
            super.emit("exit", 0);
        });
    }
    arch = arch;
    argv = argv;
    chdir = chdir;
    cwd = cwd;
    exit = exit;
    env = env;
    mainModule = undefined;
    nextTick = nextTick;
    on(event, listener14) {
        if (notImplementedEvents.includes(event)) {
            notImplemented(`process.on("${event}")`);
        }
        super.on(event, listener14);
        return this;
    }
    pid = pid;
    platform = platform;
    removeAllListeners(event) {
        notImplemented(`process.removeAllListeners("${event}")`);
    }
    removeListener(event, listener15) {
        if (notImplementedEvents.includes(event)) {
            notImplemented(`process.removeListener("${event}")`);
        }
        super.removeListener("exit", listener15);
        return this;
    }
    hrtime(time) {
        const milli = performance.now();
        const sec = Math.floor(milli / 1000);
        const nano = Math.floor(milli * 1000000 - sec * 1000000000);
        if (!time) {
            return [
                sec,
                nano
            ];
        }
        const [prevSec, prevNano] = time;
        return [
            sec - prevSec,
            nano - prevNano
        ];
    }
    stderr = stderr;
    stdin = stdin;
    stdout = stdout;
    version = version;
    versions = versions;
    emitWarning = emitWarning;
}
const process1 = new Process();
Object.defineProperty(process1, Symbol.toStringTag, {
    enumerable: false,
    writable: true,
    configurable: false,
    value: "process"
});
addReadOnlyProcessAlias("noDeprecation", "--no-deprecation");
addReadOnlyProcessAlias("throwDeprecation", "--throw-deprecation");
process1.removeListener;
process1.removeAllListeners;
process1.env.NODE_ENV = 'production';
var r3 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var t3 = {};
var n2 = process1;
t3 = t3 = SemVer;
var o2;
o2 = "object" === typeof n2 && n2.env && n2.env.NODE_DEBUG && /\bsemver\b/i.test(n2.env.NODE_DEBUG) ? function() {
    var e18 = Array.prototype.slice.call(arguments, 0);
    e18.unshift("SEMVER");
    console.log.apply(console, e18);
} : function() {};
t3.SEMVER_SPEC_VERSION = "2.0.0";
var a3 = 256;
var i2 = Number.MAX_SAFE_INTEGER || 9007199254740991;
var s2 = 16;
var p2 = t3.re = [];
var c2 = t3.src = [];
var l2 = t3.tokens = {};
var E1 = 0;
function tok(e) {
    l2[e] = E1++;
}
tok("NUMERICIDENTIFIER");
c2[l2.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
tok("NUMERICIDENTIFIERLOOSE");
c2[l2.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
tok("NONNUMERICIDENTIFIER");
c2[l2.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
tok("MAINVERSION");
c2[l2.MAINVERSION] = "(" + c2[l2.NUMERICIDENTIFIER] + ")\\." + "(" + c2[l2.NUMERICIDENTIFIER] + ")\\." + "(" + c2[l2.NUMERICIDENTIFIER] + ")";
tok("MAINVERSIONLOOSE");
c2[l2.MAINVERSIONLOOSE] = "(" + c2[l2.NUMERICIDENTIFIERLOOSE] + ")\\." + "(" + c2[l2.NUMERICIDENTIFIERLOOSE] + ")\\." + "(" + c2[l2.NUMERICIDENTIFIERLOOSE] + ")";
tok("PRERELEASEIDENTIFIER");
c2[l2.PRERELEASEIDENTIFIER] = "(?:" + c2[l2.NUMERICIDENTIFIER] + "|" + c2[l2.NONNUMERICIDENTIFIER] + ")";
tok("PRERELEASEIDENTIFIERLOOSE");
c2[l2.PRERELEASEIDENTIFIERLOOSE] = "(?:" + c2[l2.NUMERICIDENTIFIERLOOSE] + "|" + c2[l2.NONNUMERICIDENTIFIER] + ")";
tok("PRERELEASE");
c2[l2.PRERELEASE] = "(?:-(" + c2[l2.PRERELEASEIDENTIFIER] + "(?:\\." + c2[l2.PRERELEASEIDENTIFIER] + ")*))";
tok("PRERELEASELOOSE");
c2[l2.PRERELEASELOOSE] = "(?:-?(" + c2[l2.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + c2[l2.PRERELEASEIDENTIFIERLOOSE] + ")*))";
tok("BUILDIDENTIFIER");
c2[l2.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
tok("BUILD");
c2[l2.BUILD] = "(?:\\+(" + c2[l2.BUILDIDENTIFIER] + "(?:\\." + c2[l2.BUILDIDENTIFIER] + ")*))";
tok("FULL");
tok("FULLPLAIN");
c2[l2.FULLPLAIN] = "v?" + c2[l2.MAINVERSION] + c2[l2.PRERELEASE] + "?" + c2[l2.BUILD] + "?";
c2[l2.FULL] = "^" + c2[l2.FULLPLAIN] + "$";
tok("LOOSEPLAIN");
c2[l2.LOOSEPLAIN] = "[v=\\s]*" + c2[l2.MAINVERSIONLOOSE] + c2[l2.PRERELEASELOOSE] + "?" + c2[l2.BUILD] + "?";
tok("LOOSE");
c2[l2.LOOSE] = "^" + c2[l2.LOOSEPLAIN] + "$";
tok("GTLT");
c2[l2.GTLT] = "((?:<|>)?=?)";
tok("XRANGEIDENTIFIERLOOSE");
c2[l2.XRANGEIDENTIFIERLOOSE] = c2[l2.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
tok("XRANGEIDENTIFIER");
c2[l2.XRANGEIDENTIFIER] = c2[l2.NUMERICIDENTIFIER] + "|x|X|\\*";
tok("XRANGEPLAIN");
c2[l2.XRANGEPLAIN] = "[v=\\s]*(" + c2[l2.XRANGEIDENTIFIER] + ")" + "(?:\\.(" + c2[l2.XRANGEIDENTIFIER] + ")" + "(?:\\.(" + c2[l2.XRANGEIDENTIFIER] + ")" + "(?:" + c2[l2.PRERELEASE] + ")?" + c2[l2.BUILD] + "?" + ")?)?";
tok("XRANGEPLAINLOOSE");
c2[l2.XRANGEPLAINLOOSE] = "[v=\\s]*(" + c2[l2.XRANGEIDENTIFIERLOOSE] + ")" + "(?:\\.(" + c2[l2.XRANGEIDENTIFIERLOOSE] + ")" + "(?:\\.(" + c2[l2.XRANGEIDENTIFIERLOOSE] + ")" + "(?:" + c2[l2.PRERELEASELOOSE] + ")?" + c2[l2.BUILD] + "?" + ")?)?";
tok("XRANGE");
c2[l2.XRANGE] = "^" + c2[l2.GTLT] + "\\s*" + c2[l2.XRANGEPLAIN] + "$";
tok("XRANGELOOSE");
c2[l2.XRANGELOOSE] = "^" + c2[l2.GTLT] + "\\s*" + c2[l2.XRANGEPLAINLOOSE] + "$";
tok("COERCE");
c2[l2.COERCE] = "(^|[^\\d])" + "(\\d{1," + s2 + "})" + "(?:\\.(\\d{1," + s2 + "}))?" + "(?:\\.(\\d{1," + s2 + "}))?" + "(?:$|[^\\d])";
tok("COERCERTL");
p2[l2.COERCERTL] = new RegExp(c2[l2.COERCE], "g");
tok("LONETILDE");
c2[l2.LONETILDE] = "(?:~>?)";
tok("TILDETRIM");
c2[l2.TILDETRIM] = "(\\s*)" + c2[l2.LONETILDE] + "\\s+";
p2[l2.TILDETRIM] = new RegExp(c2[l2.TILDETRIM], "g");
var u2 = "$1~";
tok("TILDE");
c2[l2.TILDE] = "^" + c2[l2.LONETILDE] + c2[l2.XRANGEPLAIN] + "$";
tok("TILDELOOSE");
c2[l2.TILDELOOSE] = "^" + c2[l2.LONETILDE] + c2[l2.XRANGEPLAINLOOSE] + "$";
tok("LONECARET");
c2[l2.LONECARET] = "(?:\\^)";
tok("CARETTRIM");
c2[l2.CARETTRIM] = "(\\s*)" + c2[l2.LONECARET] + "\\s+";
p2[l2.CARETTRIM] = new RegExp(c2[l2.CARETTRIM], "g");
var f2 = "$1^";
tok("CARET");
c2[l2.CARET] = "^" + c2[l2.LONECARET] + c2[l2.XRANGEPLAIN] + "$";
tok("CARETLOOSE");
c2[l2.CARETLOOSE] = "^" + c2[l2.LONECARET] + c2[l2.XRANGEPLAINLOOSE] + "$";
tok("COMPARATORLOOSE");
c2[l2.COMPARATORLOOSE] = "^" + c2[l2.GTLT] + "\\s*(" + c2[l2.LOOSEPLAIN] + ")$|^$";
tok("COMPARATOR");
c2[l2.COMPARATOR] = "^" + c2[l2.GTLT] + "\\s*(" + c2[l2.FULLPLAIN] + ")$|^$";
tok("COMPARATORTRIM");
c2[l2.COMPARATORTRIM] = "(\\s*)" + c2[l2.GTLT] + "\\s*(" + c2[l2.LOOSEPLAIN] + "|" + c2[l2.XRANGEPLAIN] + ")";
p2[l2.COMPARATORTRIM] = new RegExp(c2[l2.COMPARATORTRIM], "g");
var h2 = "$1$2$3";
tok("HYPHENRANGE");
c2[l2.HYPHENRANGE] = "^\\s*(" + c2[l2.XRANGEPLAIN] + ")" + "\\s+-\\s+" + "(" + c2[l2.XRANGEPLAIN] + ")" + "\\s*$";
tok("HYPHENRANGELOOSE");
c2[l2.HYPHENRANGELOOSE] = "^\\s*(" + c2[l2.XRANGEPLAINLOOSE] + ")" + "\\s+-\\s+" + "(" + c2[l2.XRANGEPLAINLOOSE] + ")" + "\\s*$";
tok("STAR");
c2[l2.STAR] = "(<|>)?=?\\s*\\*";
for(var m2 = 0; m2 < E1; m2++){
    o2(m2, c2[m2]);
    p2[m2] || (p2[m2] = new RegExp(c2[m2]));
}
t3.parse = parse4;
function parse4(e2, r111) {
    r111 && "object" === typeof r111 || (r111 = {
        loose: !!r111,
        includePrerelease: false
    });
    if (e2 instanceof SemVer) return e2;
    if ("string" !== typeof e2) return null;
    if (e2.length > a3) return null;
    var t13 = r111.loose ? p2[l2.LOOSE] : p2[l2.FULL];
    if (!t13.test(e2)) return null;
    try {
        return new SemVer(e2, r111);
    } catch (e) {
        return null;
    }
}
t3.valid = valid;
function valid(e3, r26) {
    var t22 = parse4(e3, r26);
    return t22 ? t22.version : null;
}
t3.clean = clean;
function clean(e4, r31) {
    var t31 = parse4(e4.trim().replace(/^[=v]+/, ""), r31);
    return t31 ? t31.version : null;
}
t3.SemVer = SemVer;
function SemVer(e5, t4) {
    t4 && "object" === typeof t4 || (t4 = {
        loose: !!t4,
        includePrerelease: false
    });
    if (e5 instanceof SemVer) {
        if (e5.loose === t4.loose) return e5;
        e5 = e5.version;
    } else if ("string" !== typeof e5) throw new TypeError("Invalid Version: " + e5);
    if (e5.length > a3) throw new TypeError("version is longer than " + a3 + " characters");
    if (!((this || r3) instanceof SemVer)) return new SemVer(e5, t4);
    o2("SemVer", e5, t4);
    (this || r3).options = t4;
    (this || r3).loose = !!t4.loose;
    var n111 = e5.trim().match(t4.loose ? p2[l2.LOOSE] : p2[l2.FULL]);
    if (!n111) throw new TypeError("Invalid Version: " + e5);
    (this || r3).raw = e5;
    (this || r3).major = +n111[1];
    (this || r3).minor = +n111[2];
    (this || r3).patch = +n111[3];
    if ((this || r3).major > i2 || (this || r3).major < 0) throw new TypeError("Invalid major version");
    if ((this || r3).minor > i2 || (this || r3).minor < 0) throw new TypeError("Invalid minor version");
    if ((this || r3).patch > i2 || (this || r3).patch < 0) throw new TypeError("Invalid patch version");
    n111[4] ? (this || r3).prerelease = n111[4].split(".").map(function(e6) {
        if (/^[0-9]+$/.test(e6)) {
            var r4 = +e6;
            if (r4 >= 0 && r4 < i2) return r4;
        }
        return e6;
    }) : (this || r3).prerelease = [];
    (this || r3).build = n111[5] ? n111[5].split(".") : [];
    this.format();
}
SemVer.prototype.format = function() {
    (this || r3).version = (this || r3).major + "." + (this || r3).minor + "." + (this || r3).patch;
    (this || r3).prerelease.length && ((this || r3).version += "-" + (this || r3).prerelease.join("."));
    return (this || r3).version;
};
SemVer.prototype.toString = function() {
    return (this || r3).version;
};
SemVer.prototype.compare = function(e7) {
    o2("SemVer.compare", (this || r3).version, (this || r3).options, e7);
    e7 instanceof SemVer || (e7 = new SemVer(e7, (this || r3).options));
    return this.compareMain(e7) || this.comparePre(e7);
};
SemVer.prototype.compareMain = function(e8) {
    e8 instanceof SemVer || (e8 = new SemVer(e8, (this || r3).options));
    return compareIdentifiers((this || r3).major, e8.major) || compareIdentifiers((this || r3).minor, e8.minor) || compareIdentifiers((this || r3).patch, e8.patch);
};
SemVer.prototype.comparePre = function(e9) {
    e9 instanceof SemVer || (e9 = new SemVer(e9, (this || r3).options));
    if ((this || r3).prerelease.length && !e9.prerelease.length) return -1;
    if (!(this || r3).prerelease.length && e9.prerelease.length) return 1;
    if (!(this || r3).prerelease.length && !e9.prerelease.length) return 0;
    var t5 = 0;
    do {
        var n210 = (this || r3).prerelease[t5];
        var a11 = e9.prerelease[t5];
        o2("prerelease compare", t5, n210, a11);
        if (void 0 === n210 && void 0 === a11) return 0;
        if (void 0 === a11) return 1;
        if (void 0 === n210) return -1;
        if (n210 !== a11) return compareIdentifiers(n210, a11);
    }while (++t5)
};
SemVer.prototype.compareBuild = function(e10) {
    e10 instanceof SemVer || (e10 = new SemVer(e10, (this || r3).options));
    var t6 = 0;
    do {
        var n3 = (this || r3).build[t6];
        var a2 = e10.build[t6];
        o2("prerelease compare", t6, n3, a2);
        if (void 0 === n3 && void 0 === a2) return 0;
        if (void 0 === a2) return 1;
        if (void 0 === n3) return -1;
        if (n3 !== a2) return compareIdentifiers(n3, a2);
    }while (++t6)
};
SemVer.prototype.inc = function(e11, t7) {
    switch(e11){
        case "premajor":
            (this || r3).prerelease.length = 0;
            (this || r3).patch = 0;
            (this || r3).minor = 0;
            (this || r3).major++;
            this.inc("pre", t7);
            break;
        case "preminor":
            (this || r3).prerelease.length = 0;
            (this || r3).patch = 0;
            (this || r3).minor++;
            this.inc("pre", t7);
            break;
        case "prepatch":
            (this || r3).prerelease.length = 0;
            this.inc("patch", t7);
            this.inc("pre", t7);
            break;
        case "prerelease":
            0 === (this || r3).prerelease.length && this.inc("patch", t7);
            this.inc("pre", t7);
            break;
        case "major":
            0 === (this || r3).minor && 0 === (this || r3).patch && 0 !== (this || r3).prerelease.length || (this || r3).major++;
            (this || r3).minor = 0;
            (this || r3).patch = 0;
            (this || r3).prerelease = [];
            break;
        case "minor":
            0 === (this || r3).patch && 0 !== (this || r3).prerelease.length || (this || r3).minor++;
            (this || r3).patch = 0;
            (this || r3).prerelease = [];
            break;
        case "patch":
            0 === (this || r3).prerelease.length && (this || r3).patch++;
            (this || r3).prerelease = [];
            break;
        case "pre":
            if (0 === (this || r3).prerelease.length) (this || r3).prerelease = [
                0
            ];
            else {
                var n4 = (this || r3).prerelease.length;
                while(--n4 >= 0)if ("number" === typeof (this || r3).prerelease[n4]) {
                    (this || r3).prerelease[n4]++;
                    n4 = -2;
                }
                -1 === n4 && (this || r3).prerelease.push(0);
            }
            t7 && ((this || r3).prerelease[0] === t7 ? isNaN((this || r3).prerelease[1]) && ((this || r3).prerelease = [
                t7,
                0
            ]) : (this || r3).prerelease = [
                t7,
                0
            ]);
            break;
        default:
            throw new Error("invalid increment argument: " + e11);
    }
    this.format();
    (this || r3).raw = (this || r3).version;
    return this || r3;
};
t3.inc = inc;
function inc(e12, r5, t8, n5) {
    if ("string" === typeof t8) {
        n5 = t8;
        t8 = void 0;
    }
    try {
        return new SemVer(e12, t8).inc(r5, n5).version;
    } catch (e) {
        return null;
    }
}
t3.diff = diff;
function diff(e13, r6) {
    if (eq(e13, r6)) return null;
    var t9 = parse4(e13);
    var n6 = parse4(r6);
    var o11 = "";
    if (t9.prerelease.length || n6.prerelease.length) {
        o11 = "pre";
        var a = "prerelease";
    }
    for(var i12 in t9)if (("major" === i12 || "minor" === i12 || "patch" === i12) && t9[i12] !== n6[i12]) return o11 + i12;
    return a;
}
t3.compareIdentifiers = compareIdentifiers;
var R2 = /^[0-9]+$/;
function compareIdentifiers(e14, r7) {
    var t10 = R2.test(e14);
    var n7 = R2.test(r7);
    if (t10 && n7) {
        e14 = +e14;
        r7 = +r7;
    }
    return e14 === r7 ? 0 : t10 && !n7 ? -1 : n7 && !t10 ? 1 : e14 < r7 ? -1 : 1;
}
t3.rcompareIdentifiers = rcompareIdentifiers;
function rcompareIdentifiers(e15, r8) {
    return compareIdentifiers(r8, e15);
}
t3.major = major;
function major(e16, r9) {
    return new SemVer(e16, r9).major;
}
t3.minor = minor;
function minor(e17, r10) {
    return new SemVer(e17, r10).minor;
}
t3.patch = patch;
function patch(e18, r11) {
    return new SemVer(e18, r11).patch;
}
t3.compare = compare;
function compare(e19, r12, t11) {
    return new SemVer(e19, t11).compare(new SemVer(r12, t11));
}
t3.compareLoose = compareLoose;
function compareLoose(e20, r13) {
    return compare(e20, r13, true);
}
t3.compareBuild = compareBuild;
function compareBuild(e21, r14, t12) {
    var n8 = new SemVer(e21, t12);
    var o21 = new SemVer(r14, t12);
    return n8.compare(o21) || n8.compareBuild(o21);
}
t3.rcompare = rcompare;
function rcompare(e22, r15, t13) {
    return compare(r15, e22, t13);
}
t3.sort = sort;
function sort(e23, r16) {
    return e23.sort(function(e24, n9) {
        return t3.compareBuild(e24, n9, r16);
    });
}
t3.rsort = rsort;
function rsort(e25, r17) {
    return e25.sort(function(e26, n10) {
        return t3.compareBuild(n10, e26, r17);
    });
}
t3.gt = gt1;
function gt1(e27, r18, t14) {
    return compare(e27, r18, t14) > 0;
}
t3.lt = lt1;
function lt1(e28, r19, t15) {
    return compare(e28, r19, t15) < 0;
}
t3.eq = eq;
function eq(e29, r20, t16) {
    return 0 === compare(e29, r20, t16);
}
t3.neq = neq;
function neq(e30, r21, t17) {
    return 0 !== compare(e30, r21, t17);
}
t3.gte = gte;
function gte(e31, r22, t18) {
    return compare(e31, r22, t18) >= 0;
}
t3.lte = lte;
function lte(e32, r23, t19) {
    return compare(e32, r23, t19) <= 0;
}
t3.cmp = cmp;
function cmp(e33, r24, t20, n11) {
    switch(r24){
        case "===":
            "object" === typeof e33 && (e33 = e33.version);
            "object" === typeof t20 && (t20 = t20.version);
            return e33 === t20;
        case "!==":
            "object" === typeof e33 && (e33 = e33.version);
            "object" === typeof t20 && (t20 = t20.version);
            return e33 !== t20;
        case "":
        case "=":
        case "==":
            return eq(e33, t20, n11);
        case "!=":
            return neq(e33, t20, n11);
        case ">":
            return gt1(e33, t20, n11);
        case ">=":
            return gte(e33, t20, n11);
        case "<":
            return lt1(e33, t20, n11);
        case "<=":
            return lte(e33, t20, n11);
        default:
            throw new TypeError("Invalid operator: " + r24);
    }
}
t3.Comparator = Comparator;
function Comparator(e34, t21) {
    t21 && "object" === typeof t21 || (t21 = {
        loose: !!t21,
        includePrerelease: false
    });
    if (e34 instanceof Comparator) {
        if (e34.loose === !!t21.loose) return e34;
        e34 = e34.value;
    }
    if (!((this || r3) instanceof Comparator)) return new Comparator(e34, t21);
    o2("comparator", e34, t21);
    (this || r3).options = t21;
    (this || r3).loose = !!t21.loose;
    this.parse(e34);
    (this || r3).semver === I1 ? (this || r3).value = "" : (this || r3).value = (this || r3).operator + (this || r3).semver.version;
    o2("comp", this || r3);
}
var I1 = {};
Comparator.prototype.parse = function(e35) {
    var t22 = (this || r3).options.loose ? p2[l2.COMPARATORLOOSE] : p2[l2.COMPARATOR];
    var n12 = e35.match(t22);
    if (!n12) throw new TypeError("Invalid comparator: " + e35);
    (this || r3).operator = void 0 !== n12[1] ? n12[1] : "";
    "=" === (this || r3).operator && ((this || r3).operator = "");
    n12[2] ? (this || r3).semver = new SemVer(n12[2], (this || r3).options.loose) : (this || r3).semver = I1;
};
Comparator.prototype.toString = function() {
    return (this || r3).value;
};
Comparator.prototype.test = function(e36) {
    o2("Comparator.test", e36, (this || r3).options.loose);
    if ((this || r3).semver === I1 || e36 === I1) return true;
    if ("string" === typeof e36) try {
        e36 = new SemVer(e36, (this || r3).options);
    } catch (e) {
        return false;
    }
    return cmp(e36, (this || r3).operator, (this || r3).semver, (this || r3).options);
};
Comparator.prototype.intersects = function(e37, t23) {
    if (!(e37 instanceof Comparator)) throw new TypeError("a Comparator is required");
    t23 && "object" === typeof t23 || (t23 = {
        loose: !!t23,
        includePrerelease: false
    });
    var n13;
    if ("" === (this || r3).operator) {
        if ("" === (this || r3).value) return true;
        n13 = new Range(e37.value, t23);
        return satisfies((this || r3).value, n13, t23);
    }
    if ("" === e37.operator) {
        if ("" === e37.value) return true;
        n13 = new Range((this || r3).value, t23);
        return satisfies(e37.semver, n13, t23);
    }
    var o3 = (">=" === (this || r3).operator || ">" === (this || r3).operator) && (">=" === e37.operator || ">" === e37.operator);
    var a = ("<=" === (this || r3).operator || "<" === (this || r3).operator) && ("<=" === e37.operator || "<" === e37.operator);
    var i21 = (this || r3).semver.version === e37.semver.version;
    var s13 = (">=" === (this || r3).operator || "<=" === (this || r3).operator) && (">=" === e37.operator || "<=" === e37.operator);
    var p19 = cmp((this || r3).semver, "<", e37.semver, t23) && (">=" === (this || r3).operator || ">" === (this || r3).operator) && ("<=" === e37.operator || "<" === e37.operator);
    var c14 = cmp((this || r3).semver, ">", e37.semver, t23) && ("<=" === (this || r3).operator || "<" === (this || r3).operator) && (">=" === e37.operator || ">" === e37.operator);
    return o3 || a || i21 && s13 || p19 || c14;
};
t3.Range = Range;
function Range(e38, t24) {
    t24 && "object" === typeof t24 || (t24 = {
        loose: !!t24,
        includePrerelease: false
    });
    if (e38 instanceof Range) return e38.loose === !!t24.loose && e38.includePrerelease === !!t24.includePrerelease ? e38 : new Range(e38.raw, t24);
    if (e38 instanceof Comparator) return new Range(e38.value, t24);
    if (!((this || r3) instanceof Range)) return new Range(e38, t24);
    (this || r3).options = t24;
    (this || r3).loose = !!t24.loose;
    (this || r3).includePrerelease = !!t24.includePrerelease;
    (this || r3).raw = e38;
    (this || r3).set = e38.split(/\s*\|\|\s*/).map(function(e39) {
        return this.parseRange(e39.trim());
    }, this || r3).filter(function(e40) {
        return e40.length;
    });
    if (!(this || r3).set.length) throw new TypeError("Invalid SemVer Range: " + e38);
    this.format();
}
Range.prototype.format = function() {
    (this || r3).range = (this || r3).set.map(function(e41) {
        return e41.join(" ").trim();
    }).join("||").trim();
    return (this || r3).range;
};
Range.prototype.toString = function() {
    return (this || r3).range;
};
Range.prototype.parseRange = function(e42) {
    var t25 = (this || r3).options.loose;
    e42 = e42.trim();
    var n14 = t25 ? p2[l2.HYPHENRANGELOOSE] : p2[l2.HYPHENRANGE];
    e42 = e42.replace(n14, hyphenReplace);
    o2("hyphen replace", e42);
    e42 = e42.replace(p2[l2.COMPARATORTRIM], h2);
    o2("comparator trim", e42, p2[l2.COMPARATORTRIM]);
    e42 = e42.replace(p2[l2.TILDETRIM], u2);
    e42 = e42.replace(p2[l2.CARETTRIM], f2);
    e42 = e42.split(/\s+/).join(" ");
    var a = t25 ? p2[l2.COMPARATORLOOSE] : p2[l2.COMPARATOR];
    var i3 = e42.split(" ").map(function(e43) {
        return parseComparator(e43, (this || r3).options);
    }, this || r3).join(" ").split(/\s+/);
    (this || r3).options.loose && (i3 = i3.filter(function(e44) {
        return !!e44.match(a);
    }));
    i3 = i3.map(function(e45) {
        return new Comparator(e45, (this || r3).options);
    }, this || r3);
    return i3;
};
Range.prototype.intersects = function(e46, t261) {
    if (!(e46 instanceof Range)) throw new TypeError("a Range is required");
    return (this || r3).set.some(function(r25) {
        return isSatisfiable(r25, t261) && e46.set.some(function(e47) {
            return isSatisfiable(e47, t261) && r25.every(function(r26) {
                return e47.every(function(e48) {
                    return r26.intersects(e48, t261);
                });
            });
        });
    });
};
function isSatisfiable(e49, r27) {
    var t27 = true;
    var n15 = e49.slice();
    var o4 = n15.pop();
    while(t27 && n15.length){
        t27 = n15.every(function(e50) {
            return o4.intersects(e50, r27);
        });
        o4 = n15.pop();
    }
    return t27;
}
t3.toComparators = toComparators;
function toComparators(e51, r28) {
    return new Range(e51, r28).set.map(function(e52) {
        return e52.map(function(e53) {
            return e53.value;
        }).join(" ").trim().split(" ");
    });
}
function parseComparator(e54, r29) {
    o2("comp", e54, r29);
    e54 = replaceCarets(e54, r29);
    o2("caret", e54);
    e54 = replaceTildes(e54, r29);
    o2("tildes", e54);
    e54 = replaceXRanges(e54, r29);
    o2("xrange", e54);
    e54 = replaceStars(e54, r29);
    o2("stars", e54);
    return e54;
}
function isX(e55) {
    return !e55 || "x" === e55.toLowerCase() || "*" === e55;
}
function replaceTildes(e56, r30) {
    return e56.trim().split(/\s+/).map(function(e57) {
        return replaceTilde(e57, r30);
    }).join(" ");
}
function replaceTilde(e58, r31) {
    var t28 = r31.loose ? p2[l2.TILDELOOSE] : p2[l2.TILDE];
    return e58.replace(t28, function(r32, t29, n16, a, i4) {
        o2("tilde", e58, r32, t29, n16, a, i4);
        var s21;
        if (isX(t29)) s21 = "";
        else if (isX(n16)) s21 = ">=" + t29 + ".0.0 <" + (+t29 + 1) + ".0.0";
        else if (isX(a)) s21 = ">=" + t29 + "." + n16 + ".0 <" + t29 + "." + (+n16 + 1) + ".0";
        else if (i4) {
            o2("replaceTilde pr", i4);
            s21 = ">=" + t29 + "." + n16 + "." + a + "-" + i4 + " <" + t29 + "." + (+n16 + 1) + ".0";
        } else s21 = ">=" + t29 + "." + n16 + "." + a + " <" + t29 + "." + (+n16 + 1) + ".0";
        o2("tilde return", s21);
        return s21;
    });
}
function replaceCarets(e59, r33) {
    return e59.trim().split(/\s+/).map(function(e60) {
        return replaceCaret(e60, r33);
    }).join(" ");
}
function replaceCaret(e61, r34) {
    o2("caret", e61, r34);
    var t30 = r34.loose ? p2[l2.CARETLOOSE] : p2[l2.CARET];
    return e61.replace(t30, function(r35, t31, n17, a, i5) {
        o2("caret", e61, r35, t31, n17, a, i5);
        var s3;
        if (isX(t31)) s3 = "";
        else if (isX(n17)) s3 = ">=" + t31 + ".0.0 <" + (+t31 + 1) + ".0.0";
        else if (isX(a)) s3 = "0" === t31 ? ">=" + t31 + "." + n17 + ".0 <" + t31 + "." + (+n17 + 1) + ".0" : ">=" + t31 + "." + n17 + ".0 <" + (+t31 + 1) + ".0.0";
        else if (i5) {
            o2("replaceCaret pr", i5);
            s3 = "0" === t31 ? "0" === n17 ? ">=" + t31 + "." + n17 + "." + a + "-" + i5 + " <" + t31 + "." + n17 + "." + (+a + 1) : ">=" + t31 + "." + n17 + "." + a + "-" + i5 + " <" + t31 + "." + (+n17 + 1) + ".0" : ">=" + t31 + "." + n17 + "." + a + "-" + i5 + " <" + (+t31 + 1) + ".0.0";
        } else {
            o2("no pr");
            s3 = "0" === t31 ? "0" === n17 ? ">=" + t31 + "." + n17 + "." + a + " <" + t31 + "." + n17 + "." + (+a + 1) : ">=" + t31 + "." + n17 + "." + a + " <" + t31 + "." + (+n17 + 1) + ".0" : ">=" + t31 + "." + n17 + "." + a + " <" + (+t31 + 1) + ".0.0";
        }
        o2("caret return", s3);
        return s3;
    });
}
function replaceXRanges(e62, r36) {
    o2("replaceXRanges", e62, r36);
    return e62.split(/\s+/).map(function(e63) {
        return replaceXRange(e63, r36);
    }).join(" ");
}
function replaceXRange(e64, r37) {
    e64 = e64.trim();
    var t32 = r37.loose ? p2[l2.XRANGELOOSE] : p2[l2.XRANGE];
    return e64.replace(t32, function(t33, n18, a, i6, s4, p21) {
        o2("xRange", e64, t33, n18, a, i6, s4, p21);
        var c21 = isX(a);
        var l11 = c21 || isX(i6);
        var E11 = l11 || isX(s4);
        var u11 = E11;
        "=" === n18 && u11 && (n18 = "");
        p21 = r37.includePrerelease ? "-0" : "";
        if (c21) t33 = ">" === n18 || "<" === n18 ? "<0.0.0-0" : "*";
        else if (n18 && u11) {
            l11 && (i6 = 0);
            s4 = 0;
            if (">" === n18) {
                n18 = ">=";
                if (l11) {
                    a = +a + 1;
                    i6 = 0;
                    s4 = 0;
                } else {
                    i6 = +i6 + 1;
                    s4 = 0;
                }
            } else if ("<=" === n18) {
                n18 = "<";
                l11 ? a = +a + 1 : i6 = +i6 + 1;
            }
            t33 = n18 + a + "." + i6 + "." + s4 + p21;
        } else l11 ? t33 = ">=" + a + ".0.0" + p21 + " <" + (+a + 1) + ".0.0" + p21 : E11 && (t33 = ">=" + a + "." + i6 + ".0" + p21 + " <" + a + "." + (+i6 + 1) + ".0" + p21);
        o2("xRange return", t33);
        return t33;
    });
}
function replaceStars(e65, r38) {
    o2("replaceStars", e65, r38);
    return e65.trim().replace(p2[l2.STAR], "");
}
function hyphenReplace(e, r39, t34, n19, o5, a, i, s5, p3, c3, l21, E2, u) {
    r39 = isX(t34) ? "" : isX(n19) ? ">=" + t34 + ".0.0" : isX(o5) ? ">=" + t34 + "." + n19 + ".0" : ">=" + r39;
    s5 = isX(p3) ? "" : isX(c3) ? "<" + (+p3 + 1) + ".0.0" : isX(l21) ? "<" + p3 + "." + (+c3 + 1) + ".0" : E2 ? "<=" + p3 + "." + c3 + "." + l21 + "-" + E2 : "<=" + s5;
    return (r39 + " " + s5).trim();
}
Range.prototype.test = function(e66) {
    if (!e66) return false;
    if ("string" === typeof e66) try {
        e66 = new SemVer(e66, (this || r3).options);
    } catch (e) {
        return false;
    }
    for(var t35 = 0; t35 < (this || r3).set.length; t35++)if (testSet((this || r3).set[t35], e66, (this || r3).options)) return true;
    return false;
};
function testSet(e67, r40, t36) {
    for(var n20 = 0; n20 < e67.length; n20++)if (!e67[n20].test(r40)) return false;
    if (r40.prerelease.length && !t36.includePrerelease) {
        for(n20 = 0; n20 < e67.length; n20++){
            o2(e67[n20].semver);
            if (e67[n20].semver !== I1 && e67[n20].semver.prerelease.length > 0) {
                var a = e67[n20].semver;
                if (a.major === r40.major && a.minor === r40.minor && a.patch === r40.patch) return true;
            }
        }
        return false;
    }
    return true;
}
t3.satisfies = satisfies;
function satisfies(e69, r41, t37) {
    try {
        r41 = new Range(r41, t37);
    } catch (e68) {
        return false;
    }
    return r41.test(e69);
}
t3.maxSatisfying = maxSatisfying;
function maxSatisfying(e71, r42, t38) {
    var n21 = null;
    var o6 = null;
    try {
        var a = new Range(r42, t38);
    } catch (e70) {
        return null;
    }
    e71.forEach(function(e72) {
        if (a.test(e72) && (!n21 || -1 === o6.compare(e72))) {
            n21 = e72;
            o6 = new SemVer(n21, t38);
        }
    });
    return n21;
}
t3.minSatisfying = minSatisfying;
function minSatisfying(e74, r43, t39) {
    var n22 = null;
    var o7 = null;
    try {
        var a = new Range(r43, t39);
    } catch (e73) {
        return null;
    }
    e74.forEach(function(e75) {
        if (a.test(e75) && (!n22 || 1 === o7.compare(e75))) {
            n22 = e75;
            o7 = new SemVer(n22, t39);
        }
    });
    return n22;
}
t3.minVersion = minVersion;
function minVersion(e76, r44) {
    e76 = new Range(e76, r44);
    var t40 = new SemVer("0.0.0");
    if (e76.test(t40)) return t40;
    t40 = new SemVer("0.0.0-0");
    if (e76.test(t40)) return t40;
    t40 = null;
    for(var n23 = 0; n23 < e76.set.length; ++n23){
        var o8 = e76.set[n23];
        o8.forEach(function(e77) {
            var r45 = new SemVer(e77.semver.version);
            switch(e77.operator){
                case ">":
                    0 === r45.prerelease.length ? r45.patch++ : r45.prerelease.push(0);
                    r45.raw = r45.format();
                case "":
                case ">=":
                    t40 && !gt1(t40, r45) || (t40 = r45);
                    break;
                case "<":
                case "<=":
                    break;
                default:
                    throw new Error("Unexpected operation: " + e77.operator);
            }
        });
    }
    return t40 && e76.test(t40) ? t40 : null;
}
t3.validRange = validRange;
function validRange(e78, r46) {
    try {
        return new Range(e78, r46).range || "*";
    } catch (e) {
        return null;
    }
}
t3.ltr = ltr;
function ltr(e79, r47, t41) {
    return outside(e79, r47, "<", t41);
}
t3.gtr = gtr;
function gtr(e80, r48, t42) {
    return outside(e80, r48, ">", t42);
}
t3.outside = outside;
function outside(e81, r49, t43, n24) {
    e81 = new SemVer(e81, n24);
    r49 = new Range(r49, n24);
    var o9, a, i7, s6, p4;
    switch(t43){
        case ">":
            o9 = gt1;
            a = lte;
            i7 = lt1;
            s6 = ">";
            p4 = ">=";
            break;
        case "<":
            o9 = lt1;
            a = gte;
            i7 = gt1;
            s6 = "<";
            p4 = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(e81, r49, n24)) return false;
    for(var c4 = 0; c4 < r49.set.length; ++c4){
        var l3 = r49.set[c4];
        var E3 = null;
        var u21 = null;
        l3.forEach(function(e82) {
            e82.semver === I1 && (e82 = new Comparator(">=0.0.0"));
            E3 = E3 || e82;
            u21 = u21 || e82;
            o9(e82.semver, E3.semver, n24) ? E3 = e82 : i7(e82.semver, u21.semver, n24) && (u21 = e82);
        });
        if (E3.operator === s6 || E3.operator === p4) return false;
        if ((!u21.operator || u21.operator === s6) && a(e81, u21.semver)) return false;
        if (u21.operator === p4 && i7(e81, u21.semver)) return false;
    }
    return true;
}
t3.prerelease = prerelease;
function prerelease(e83, r50) {
    var t44 = parse4(e83, r50);
    return t44 && t44.prerelease.length ? t44.prerelease : null;
}
t3.intersects = intersects;
function intersects(e84, r51, t45) {
    e84 = new Range(e84, t45);
    r51 = new Range(r51, t45);
    return e84.intersects(r51);
}
t3.coerce = coerce;
function coerce(e85, r52) {
    if (e85 instanceof SemVer) return e85;
    "number" === typeof e85 && (e85 = String(e85));
    if ("string" !== typeof e85) return null;
    r52 = r52 || {};
    var t46 = null;
    if (r52.rtl) {
        var n25;
        while((n25 = p2[l2.COERCERTL].exec(e85)) && (!t46 || t46.index + t46[0].length !== e85.length)){
            t46 && n25.index + n25[0].length === t46.index + t46[0].length || (t46 = n25);
            p2[l2.COERCERTL].lastIndex = n25.index + n25[1].length + n25[2].length;
        }
        p2[l2.COERCERTL].lastIndex = -1;
    } else t46 = e85.match(p2[l2.COERCE]);
    return null === t46 ? null : parse4(t46[2] + "." + (t46[3] || "0") + "." + (t46[4] || "0"), r52);
}
var v2 = t3;
const O1 = t3.SEMVER_SPEC_VERSION, L1 = t3.tokens;
const N1 = t3.re, S2 = t3.src, T1 = t3.parse, g2 = t3.valid, A1 = t3.clean, d2 = t3.SemVer, C1 = t3.inc, w1 = t3.diff, y1 = t3.compareIdentifiers, P1 = t3.rcompareIdentifiers, D1 = t3.major, V1 = t3.minor, M1 = t3.patch, X1 = t3.compare, k1 = t3.compareLoose, F2 = t3.compareBuild, G1 = t3.rcompare, j1 = t3.sort, U1 = t3.rsort, b1 = t3.gt, x1 = t3.lt, $1 = t3.eq, B1 = t3.neq, q1 = t3.gte, H1 = t3.lte, _1 = t3.cmp, Y1 = t3.Comparator, z1 = t3.Range, Z1 = t3.toComparators, J1 = t3.satisfies, K1 = t3.maxSatisfying, Q1 = t3.minSatisfying, W1 = t3.minVersion, ee1 = t3.validRange, re1 = t3.ltr, te1 = t3.gtr, ne1 = t3.outside, oe1 = t3.prerelease, ae1 = t3.intersects, ie1 = t3.coerce;
const mod4 = {
    Comparator: Y1,
    Range: z1,
    SEMVER_SPEC_VERSION: O1,
    SemVer: d2,
    clean: A1,
    cmp: _1,
    coerce: ie1,
    compare: X1,
    compareBuild: F2,
    compareIdentifiers: y1,
    compareLoose: k1,
    diff: w1,
    eq: $1,
    gt: b1,
    gte: q1,
    gtr: te1,
    inc: C1,
    intersects: ae1,
    lt: x1,
    lte: H1,
    ltr: re1,
    major: D1,
    maxSatisfying: K1,
    minSatisfying: Q1,
    minVersion: W1,
    minor: V1,
    neq: B1,
    outside: ne1,
    parse: T1,
    patch: M1,
    prerelease: oe1,
    rcompare: G1,
    rcompareIdentifiers: P1,
    re: N1,
    rsort: U1,
    satisfies: J1,
    sort: j1,
    src: S2,
    toComparators: Z1,
    tokens: L1,
    valid: g2,
    validRange: ee1,
    default: v2
};
var n3 = "default" in mod4 ? mod4.default : mod4;
var r4 = {};
const i3 = n3;
const { Semver: o3 , SemverRange: a2  } = e1;
r4 = function nodeRangeToSemverRange(e2) {
    let t14 = i3.validRange(e2);
    if (!t14) return new a2(e2);
    if ("*" === t14) return new a2(t14);
    try {
        let t23 = new a2(e2);
        if (!t23.version.tag) return t23;
    } catch (e3) {
        if ("ENOTSEMVER" !== e3.code) throw e3;
    }
    let n211;
    for (let e19 of t14.split("||")){
        let t32, r112, i13, f11;
        for (let n112 of e19.split(" ")){
            let e4 = "<" === n112[0];
            let a12 = ">" === n112[0];
            if (!e4 && !a12) {
                t32 = n112;
                i13 = true;
                break;
            }
            let l6 = "=" === n112[1];
            if (a12) {
                if (!e4) {
                    let e5 = "=" === n112[1];
                    let t4 = new o3(n112.substr(1 + e5));
                    if (!r112 || r112.lt(t4)) {
                        r112 = t4;
                        f11 = e5;
                    }
                }
            } else {
                let e6 = new o3(n112.substr(1 + l6));
                if (!t32 || t32.gt(e6)) {
                    t32 = e6;
                    i13 = l6;
                }
            }
        }
        if (!t32) {
            n211 = new a2("*");
            continue;
        }
        if (r112 && t32 && r112.gt(t32)) {
            let e7 = new a2(r112.toString());
            n211 && (n211.contains(e7) || !e7.gt(n211) && !e7.contains(n211)) || (n211 = e7);
            continue;
        }
        let l7;
        if (t32) {
            if (i13) {
                let e8 = new a2(t32.toString());
                n211 && (n211.contains(e8) || !e8.gt(n211) && !e8.contains(n211)) || (n211 = e8);
                continue;
            }
            let e9 = 0, o12 = 0, f21 = 0, c15 = "";
            if (t32.pre && r112.major === t32.major && r112.minor === t32.minor && r112.patch === t32.patch) {
                n211 = new a2("~" + r112.toString());
                continue;
            }
            if (0 === t32.patch) if (0 === t32.minor) {
                if (t32.major > 0) {
                    e9 = t32.major - 1;
                    c15 = "^";
                }
            } else {
                e9 = t32.major;
                o12 = t32.minor - 1;
                c15 = "~";
            }
            else {
                e9 = t32.major;
                o12 = t32.minor;
                f21 = 0;
                c15 = "~";
            }
            l7 = new a2(0 === e9 && "^" === c15 ? "0" : c15 + e9 + "." + o12 + "." + f21);
        }
        if (!r112) {
            n211 = l7;
            continue;
        }
        let c16;
        c16 = f11 ? new a2("^^" + r112.toString()) : r112.pre ? new a2("^^" + r112.major + "." + r112.minor + "." + r112.patch + "-" + [
            ...r112.pre,
            1
        ].join(".")) : new a2("^^" + r112.major + "." + r112.minor + "." + (r112.patch + 1));
        let m10 = l7 ? c16.intersect(l7) || l7 : c16;
        n211 && (n211.contains(m10) || !m10.gt(n211) && !m10.contains(n211)) || (n211 = m10);
    }
    return n211;
};
var f3 = r4;
const fetch1 = async function(r27, ...e20) {
    const n30 = r27.toString();
    if (!(n30.startsWith("file:") || n30.startsWith("data:") || n30.startsWith("node:"))) return globalThis.fetch(n30, ...e20);
    try {
        let r28;
        r28 = n30.startsWith("file:") ? await Deno.readTextFile(fileURLToPath(n30)) : n30.startsWith("node:") ? "" : decodeURIComponent(n30.slice(n30.indexOf(",")));
        return {
            status: 200,
            async text () {
                return r28.toString();
            },
            async json () {
                return JSON.parse(r28.toString());
            },
            arrayBuffer () {
                return r28;
            }
        };
    } catch (t15) {
        return "EISDIR" === t15.code ? {
            status: 200,
            async text () {
                return "";
            },
            async json () {
                throw new Error("Not JSON");
            },
            arrayBuffer () {
                return new ArrayBuffer(0);
            }
        } : "NotFound" === t15.name ? {
            status: 404,
            statusText: t15.toString()
        } : {
            status: 500,
            statusText: t15.toString()
        };
    }
};
var e2;
if ("undefined" !== typeof Deno) new URL("file://" + Deno.cwd() + "/");
else if ("undefined" !== typeof process && (null === (e2 = process.versions) || void 0 === e2 ? void 0 : e2.node)) new URL("file://" + process.cwd() + "/");
else if ("undefined" !== typeof document) {
    const e = document.querySelector("base[href]");
    e ? new URL(e.href + (e.href.endsWith("/") ? "" : "/")) : "undefined" !== typeof location && new URL("../", new URL(location.href));
}
function matchesRoot(e110, t9) {
    return e110.protocol === t9.protocol && e110.host === t9.host && e110.port === t9.port && e110.username === t9.username && e110.password === t9.password;
}
function rebase(e21, t10 = new URL("/", e21), s14 = false) {
    "boolean" === typeof s14 ? s14 = s14 ? "/" : "./" : s14.endsWith("/") || (s14 += "/");
    t10.search = t10.hash = "";
    t10.pathname.endsWith("/") || (t10.pathname += "/");
    const r29 = e21.href;
    const i = t10.href;
    if (r29.startsWith(i)) return s14 + r29.slice(i.length);
    if (!matchesRoot(e21, t10)) return e21.href;
    const o9 = t10.pathname;
    const n31 = e21.pathname;
    const l8 = Math.min(o9.length, n31.length);
    let c17 = -1;
    for(let e3 = 0; e3 < l8; e3++){
        if (o9[e3] !== n31[e3]) break;
        "/" === n31[e3] && (c17 = e3);
    }
    return "../".repeat(o9.slice(c17 + 1).split("/").length - 1) + n31.slice(c17 + 1) + e21.search + e21.hash;
}
function isURL(e4) {
    try {
        if ("#" === e4[0]) return false;
        new URL(e4);
    } catch  {
        return false;
    }
    return true;
}
function isPlain(e5) {
    return !isRelative(e5) && !isURL(e5);
}
function isRelative(e6) {
    return e6.startsWith("./") || e6.startsWith("../") || e6.startsWith("/");
}
function alphabetize(e7) {
    const t16 = {};
    for (const s of Object.keys(e7).sort())t16[s] = e7[s];
    return t16;
}
function replaceTarget(e9, t, s15) {
    const r30 = e9[t];
    if ("string" === typeof r30 || null === r30) {
        const i = s15(r30);
        void 0 !== i && (e9[t] = i);
    } else for (const e8 of Object.keys(r30))replaceTarget(r30, e8, s15);
}
function mapTarget(e10, t17) {
    if ("string" === typeof e10 || null === e10) return t17(e10);
    const s16 = {};
    for (const r of Object.keys(e10))s16[r] = mapTarget(e10[r], t17);
    return s16;
}
function targetEquals(e11, t18, s17) {
    if (null === e11 || null === t18) return e11 === t18;
    if ("string" === typeof e11 || "string" === typeof t18) return "string" === typeof e11 && "string" === typeof t18 && new URL(e11, s17).href === new URL(t18, s17).href;
    const r32 = Object.keys(e11);
    const i = Object.keys(t18);
    if (r32.length !== i.length) return false;
    for(let o10 = 0; o10 < r32.length; o10++){
        const n32 = r32[o10];
        const l9 = i[o10];
        if (n32 !== l9) return false;
        if (!targetEquals(e11[n32], t18[l9], s17)) return false;
    }
    return true;
}
class ImportMap {
    constructor(e12, t19){
        this.imports = Object.create(null);
        this.scopes = Object.create(null);
        "string" === typeof e12 && (e12 = new URL(e12));
        this.baseUrl = e12;
        t19 && this.extend(t19, true);
    }
    clone() {
        return new ImportMap(this.baseUrl, this.toJSON());
    }
    extend(e13, t20 = false) {
        Object.assign(this.imports, e13.imports);
        if (t20) Object.assign(this.scopes, e13.scopes);
        else if (e13.scopes) for (const t1 of Object.keys(e13.scopes))Object.assign(this.scopes[t1] = this.scopes[t1] || Object.create(null), e13.scopes[t1]);
        this.rebase(this.baseUrl.href);
        return this;
    }
    sort() {
        this.imports = alphabetize(this.imports);
        this.scopes = alphabetize(this.scopes);
        for (const e of Object.keys(this.scopes))this.scopes[e] = alphabetize(this.scopes[e]);
    }
    set(e, t24, s18) {
        if (s18) {
            this.scopes[s18] = this.scopes[s18] || {};
            this.scopes[s18][e] = t24;
        } else this.imports[e] = t24;
    }
    replace(e14, t4) {
        const s19 = e14.endsWith("/");
        if (!isURL(e14)) throw new Error("URL remapping only supports URLs");
        const r33 = rebase(new URL(t4), this.baseUrl);
        for (const t25 of Object.keys(this.imports))replaceTarget(this.imports, t25, (t27)=>{
            if (null !== t27) return s19 && t27.startsWith(e14) || t27 === e14 ? r33 + t27.slice(e14.length) : void 0;
        });
        for (const t33 of Object.keys(this.scopes)){
            const i = this.scopes[t33];
            const o13 = new URL(t33, this.baseUrl).href;
            if (s19 && o13.startsWith(e14) || o13 === e14) {
                const s = r33 + o13.slice(e14.length);
                delete this.scopes[t33];
                this.scopes[s] = i;
            }
            for (const t5 of Object.keys(i))replaceTarget(i, t5, (t28)=>{
                if (null !== t28) return s19 && t28.startsWith(e14) || t28 === e14 ? r33 + t28.slice(e14.length) : void 0;
            });
        }
        return this;
    }
    combineSubpaths() {}
    flatten(e15 = this.baseUrl) {
        "string" === typeof e15 && (e15 = new URL(e15.endsWith("/") ? e15 : e15 + "/"));
        if (!e15.pathname.endsWith("/")) {
            e15 = new URL(e15.href);
            e15.pathname += "/";
        }
        for (const t29 of Object.keys(this.scopes)){
            const s20 = this.scopes[t29];
            const r34 = new URL(t29, this.baseUrl);
            let i;
            i = r34.protocol === this.baseUrl.protocol && r34.hostname === this.baseUrl.hostname && r34.port === this.baseUrl.port ? rebase(r34.href.startsWith(e15.href) ? e15 : r34, this.baseUrl) : r34.protocol + "//" + r34.hostname + (r34.port ? ":" + r34.port : "") + "/";
            let o14 = this.scopes[i] || {};
            o14 === s20 && (o14 = null);
            let n33 = true;
            for (const e16 of Object.keys(s20)){
                const t30 = s20[e16];
                if (targetEquals(this.imports[e16], t30, this.baseUrl)) delete s20[e16];
                else if (!o14 || o14[e16] && !targetEquals(o14[e16], t30, this.baseUrl)) n33 = false;
                else {
                    o14[e16] = t30;
                    replaceTarget(o14, e16, (e17)=>rebase(new URL(e17, this.baseUrl), this.baseUrl)
                    );
                    delete s20[e16];
                    this.scopes[i] = alphabetize(o14);
                }
            }
            n33 && delete this.scopes[t29];
        }
        return this;
    }
    rebase(e20 = this.baseUrl.href, t34 = false) {
        const s22 = this.baseUrl;
        this.baseUrl = new URL(e20, this.baseUrl);
        this.baseUrl.pathname.endsWith("/") || (this.baseUrl.pathname += "/");
        let r35 = false;
        for (const e18 of Object.keys(this.imports)){
            replaceTarget(this.imports, e18, (e21)=>{
                if (null !== e21) return rebase(new URL(e21, s22), this.baseUrl, t34);
            });
            if (!isPlain(e18)) {
                const i = rebase(new URL(e18, s22), this.baseUrl, t34);
                if (i !== e18) {
                    r35 = true;
                    this.imports[i] = this.imports[e18];
                    delete this.imports[e18];
                }
            }
        }
        r35 && (this.imports = alphabetize(this.imports));
        let i = false;
        for (const e19 of Object.keys(this.scopes)){
            const r36 = this.scopes[e19];
            let o15 = false;
            for (let e22 of Object.keys(r36)){
                replaceTarget(r36, e22, (e23)=>{
                    if (null !== e23) return rebase(new URL(e23, s22), this.baseUrl, t34);
                });
                if (!isPlain(e22)) {
                    const i = rebase(new URL(e22, s22), this.baseUrl, t34);
                    if (i !== e22) {
                        o15 = true;
                        r36[i] = r36[e22];
                        delete r36[e22];
                    }
                }
            }
            o15 && (this.scopes[e19] = alphabetize(r36));
            const n34 = rebase(new URL(e19, s22), this.baseUrl, t34);
            if (e19 !== n34) {
                i = true;
                delete this.scopes[e19];
                this.scopes[n34] = r36;
            }
        }
        i && (this.scopes = alphabetize(this.scopes));
        return this;
    }
    setEnv(e24) {
        for (const t of Object.keys(this.imports)){
            const s23 = this.imports[t];
            "string" !== typeof s23 && null !== s23 && (this.imports[t] = resolveConditional(s23, e24));
        }
        for (const t7 of Object.keys(this.scopes)){
            const s24 = this.scopes[t7];
            for (const t of Object.keys(s24)){
                const r37 = s24[t];
                "string" !== typeof r37 && null !== r37 && (s24[t] = resolveConditional(r37, e24));
            }
        }
        return this;
    }
    resolve(e25, t9 = this.baseUrl, s25) {
        "string" === typeof t9 && (t9 = new URL(t9));
        let r38;
        if (!isPlain(e25)) {
            r38 = new URL(e25, t9);
            e25 = r38.href;
        }
        const i = getScopeMatches(t9, this.scopes, this.baseUrl);
        for (const [t8] of i){
            let i = getMapMatch(e25, this.scopes[t8]);
            !i && r38 && (i = getMapMatch(e25 = rebase(r38, this.baseUrl, true), this.scopes[t8]) || getMapMatch(e25 = rebase(r38, this.baseUrl, false), this.scopes[t8]));
            if (i) {
                const r39 = s25 ? resolveConditional(this.scopes[t8][i], s25) : this.scopes[t8][i];
                return mapTarget(r39, (t35)=>null === t35 ? null : new URL(t35 + e25.slice(i.length), this.baseUrl).href
                );
            }
        }
        let o16 = getMapMatch(e25, this.imports);
        !o16 && r38 && (o16 = getMapMatch(e25 = rebase(r38, this.baseUrl, true), this.imports) || getMapMatch(e25 = rebase(r38, this.baseUrl, false), this.imports));
        if (o16) {
            const t10 = s25 ? resolveConditional(this.imports[o16], s25) : this.imports[o16];
            return mapTarget(t10, (t36)=>null === t36 ? null : new URL(t36 + e25.slice(o16.length), this.baseUrl).href
            );
        }
        return r38 ? r38.href : null;
    }
    toJSON() {
        const e26 = {};
        Object.keys(this.imports).length && (e26.imports = this.imports);
        Object.keys(this.scopes).length && (e26.scopes = this.scopes);
        return JSON.parse(JSON.stringify(e26));
    }
}
function getScopeMatches(e27, t12, s26) {
    const r40 = e27.href;
    let i = Object.keys(t12).map((e28)=>[
            e28,
            new URL(e28, s26).href
        ]
    );
    i = i.sort(([, e29], [, t37])=>e29.length < t37.length ? 1 : -1
    );
    return i.filter(([, e30])=>e30 === r40 || e30.endsWith("/") && r40.startsWith(e30)
    );
}
function getMapMatch(e31, t38) {
    if (e31 in t38) return e31;
    let s27;
    for (const r41 of Object.keys(t38)){
        const t39 = r41.endsWith("*");
        (r41.endsWith("/") || t39) && e31.startsWith(t39 ? r41.slice(0, -1) : r41) && (!s27 || r41.length > s27.length) && (s27 = r41);
    }
    return s27;
}
function resolveConditional(e32, t40 = {}) {
    if ("string" === typeof e32 || null === e32) return e32;
    Array.isArray(t40) && (t40 = {
        include: t40
    });
    const { include: s28 = [] , exclude: r42 = [] , covers: i = []  } = t40;
    const { resolved: o17  } = internalResolveConditional(e32, {
        include: s28,
        exclude: r42,
        covers: i
    }, [], []);
    return void 0 === o17 ? null : o17;
}
function internalResolveConditional(e33, t41, s29, r43) {
    if ("string" === typeof e33) return {
        exhaustive: true,
        resolved: e33
    };
    if (null === e33) return {
        exhaustive: true,
        resolved: e33
    };
    let { include: i , exclude: o18 , covers: n35  } = t41;
    let l10 = {};
    let c18 = 0;
    const a = [];
    for (const t13 of Object.keys(e33)){
        if (r43.includes(t13)) continue;
        if (a.includes(t13)) continue;
        const h6 = [
            t13,
            ...s29
        ];
        const { exhaustive: f8 , resolved: p20  } = internalResolveConditional(e33[t13], {
            include: i,
            exclude: o18,
            covers: n35
        }, h6, [
            ...r43,
            ...a
        ]);
        f8 && a.push(t13);
        if (void 0 !== p20 && !o18.includes(t13)) {
            l10[t13] = p20;
            c18++;
        }
        if ("default" === t13 || i.includes(t13) || s29.includes(t13)) return {
            exhaustive: true,
            resolved: 1 === c18 ? l10[t13] : l10
        };
        if (n35.some((e34)=>e34.every((e35)=>i.includes(e35) || s29.includes(e35) || r43.includes(e35) || a.includes(e35)
            )
        )) return {
            exhaustive: true,
            resolved: l10
        };
    }
    return 0 === c18 ? {
        exhaustive: false,
        resolved: void 0
    } : {
        exhaustive: false,
        resolved: l10
    };
}
let e3, r5, a4, i4 = 4194304;
const s3 = 1 === new Uint8Array(new Uint16Array([
    1
]).buffer)[0];
let t4, f4, c3;
function parse5(ke1, le1 = "@") {
    if (t4 = ke1, f4 = le1, t4.length > i4 || !e3) {
        for(; t4.length > i4;)i4 *= 2;
        r5 = new ArrayBuffer(4 * i4), e3 = (function(e111, r1, a13) {
            "use asm";
            var i14 = new e111.Int8Array(a13), s110 = new e111.Int16Array(a13), t110 = new e111.Int32Array(a13), f12 = new e111.Uint8Array(a13), c19 = new e111.Uint16Array(a13), ke2 = 816;
            function b11(e22) {
                e22 = e22 | 0;
                var r210 = 0, a21 = 0, f22 = 0, le2 = 0, oe2 = 0;
                oe2 = ke2;
                ke2 = ke2 + 14336 | 0;
                le2 = oe2;
                i14[589] = 1;
                s110[291] = 0;
                s110[292] = 0;
                s110[293] = -1;
                t110[15] = t110[2];
                i14[590] = 0;
                t110[14] = 0;
                i14[588] = 0;
                t110[16] = oe2 + 10240;
                t110[17] = oe2 + 2048;
                i14[591] = 0;
                e22 = (t110[3] | 0) + -2 | 0;
                t110[18] = e22;
                r210 = e22 + (t110[12] << 1) | 0;
                t110[19] = r210;
                e: while(1){
                    a21 = e22 + 2 | 0;
                    t110[18] = a21;
                    if (e22 >>> 0 >= r210 >>> 0) {
                        f22 = 18;
                        break;
                    }
                    r: do {
                        switch(s110[a21 >> 1] | 0){
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 32:
                                break;
                            case 101:
                                {
                                    if ((((s110[292] | 0) == 0 ? R4(a21) | 0 : 0) ? B3(e22 + 4 | 0, 120, 112, 111, 114, 116) | 0 : 0) ? (u12(), (i14[589] | 0) == 0) : 0) {
                                        f22 = 9;
                                        break e;
                                    } else f22 = 17;
                                    break;
                                }
                            case 105:
                                {
                                    if (R4(a21) | 0 ? B3(e22 + 4 | 0, 109, 112, 111, 114, 116) | 0 : 0) {
                                        k11();
                                        f22 = 17;
                                    } else f22 = 17;
                                    break;
                                }
                            case 59:
                                {
                                    f22 = 17;
                                    break;
                                }
                            case 47:
                                switch(s110[e22 + 4 >> 1] | 0){
                                    case 47:
                                        {
                                            G3();
                                            break r;
                                        }
                                    case 42:
                                        {
                                            p22(1);
                                            break r;
                                        }
                                    default:
                                        {
                                            f22 = 16;
                                            break e;
                                        }
                                }
                            default:
                                {
                                    f22 = 16;
                                    break e;
                                }
                        }
                    }while (0)
                    if ((f22 | 0) == 17) {
                        f22 = 0;
                        t110[15] = t110[18];
                    }
                    e22 = t110[18] | 0;
                    r210 = t110[19] | 0;
                }
                if ((f22 | 0) == 9) {
                    e22 = t110[18] | 0;
                    t110[15] = e22;
                    f22 = 19;
                } else if ((f22 | 0) == 16) {
                    i14[589] = 0;
                    t110[18] = e22;
                    f22 = 19;
                } else if ((f22 | 0) == 18) if (!(i14[588] | 0)) {
                    e22 = a21;
                    f22 = 19;
                } else e22 = 0;
                do {
                    if ((f22 | 0) == 19) {
                        e: while(1){
                            r210 = e22 + 2 | 0;
                            t110[18] = r210;
                            a21 = r210;
                            if (e22 >>> 0 >= (t110[19] | 0) >>> 0) {
                                f22 = 75;
                                break;
                            }
                            r: do {
                                switch(s110[r210 >> 1] | 0){
                                    case 9:
                                    case 10:
                                    case 11:
                                    case 12:
                                    case 13:
                                    case 32:
                                        break;
                                    case 101:
                                        {
                                            if (((s110[292] | 0) == 0 ? R4(r210) | 0 : 0) ? B3(e22 + 4 | 0, 120, 112, 111, 114, 116) | 0 : 0) {
                                                u12();
                                                f22 = 74;
                                            } else f22 = 74;
                                            break;
                                        }
                                    case 105:
                                        {
                                            if (R4(r210) | 0 ? B3(e22 + 4 | 0, 109, 112, 111, 114, 116) | 0 : 0) {
                                                k11();
                                                f22 = 74;
                                            } else f22 = 74;
                                            break;
                                        }
                                    case 99:
                                        {
                                            if ((R4(r210) | 0 ? z5(e22 + 4 | 0, 108, 97, 115, 115) | 0 : 0) ? Z3(s110[e22 + 12 >> 1] | 0) | 0 : 0) {
                                                i14[591] = 1;
                                                f22 = 74;
                                            } else f22 = 74;
                                            break;
                                        }
                                    case 40:
                                        {
                                            r210 = t110[15] | 0;
                                            a21 = t110[17] | 0;
                                            f22 = s110[292] | 0;
                                            s110[292] = f22 + 1 << 16 >> 16;
                                            t110[a21 + ((f22 & 65535) << 2) >> 2] = r210;
                                            f22 = 74;
                                            break;
                                        }
                                    case 41:
                                        {
                                            e22 = s110[292] | 0;
                                            if (!(e22 << 16 >> 16)) {
                                                f22 = 36;
                                                break e;
                                            }
                                            f22 = e22 + -1 << 16 >> 16;
                                            s110[292] = f22;
                                            e22 = t110[11] | 0;
                                            if ((e22 | 0) != 0 ? (t110[e22 + 20 >> 2] | 0) == (t110[(t110[17] | 0) + ((f22 & 65535) << 2) >> 2] | 0) : 0) {
                                                r210 = e22 + 4 | 0;
                                                if (!(t110[r210 >> 2] | 0)) t110[r210 >> 2] = a21;
                                                t110[e22 + 12 >> 2] = a21;
                                                t110[11] = 0;
                                                f22 = 74;
                                            } else f22 = 74;
                                            break;
                                        }
                                    case 123:
                                        {
                                            f22 = t110[15] | 0;
                                            a21 = t110[8] | 0;
                                            e22 = f22;
                                            do {
                                                if ((s110[f22 >> 1] | 0) == 41 & (a21 | 0) != 0 ? (t110[a21 + 4 >> 2] | 0) == (f22 | 0) : 0) {
                                                    r210 = t110[9] | 0;
                                                    t110[8] = r210;
                                                    if (!r210) {
                                                        t110[4] = 0;
                                                        break;
                                                    } else {
                                                        t110[r210 + 28 >> 2] = 0;
                                                        break;
                                                    }
                                                }
                                            }while (0)
                                            r210 = s110[292] | 0;
                                            f22 = r210 & 65535;
                                            i14[le2 + f22 >> 0] = i14[591] | 0;
                                            i14[591] = 0;
                                            a21 = t110[17] | 0;
                                            s110[292] = r210 + 1 << 16 >> 16;
                                            t110[a21 + (f22 << 2) >> 2] = e22;
                                            f22 = 74;
                                            break;
                                        }
                                    case 125:
                                        {
                                            e22 = s110[292] | 0;
                                            if (!(e22 << 16 >> 16)) {
                                                f22 = 49;
                                                break e;
                                            }
                                            a21 = e22 + -1 << 16 >> 16;
                                            s110[292] = a21;
                                            r210 = s110[293] | 0;
                                            if (e22 << 16 >> 16 != r210 << 16 >> 16) if (r210 << 16 >> 16 != -1 & (a21 & 65535) < (r210 & 65535)) {
                                                f22 = 53;
                                                break e;
                                            } else {
                                                f22 = 74;
                                                break r;
                                            }
                                            else {
                                                a21 = t110[16] | 0;
                                                f22 = (s110[291] | 0) + -1 << 16 >> 16;
                                                s110[291] = f22;
                                                s110[293] = s110[a21 + ((f22 & 65535) << 1) >> 1] | 0;
                                                h11();
                                                f22 = 74;
                                                break r;
                                            }
                                        }
                                    case 39:
                                        {
                                            d6(39);
                                            f22 = 74;
                                            break;
                                        }
                                    case 34:
                                        {
                                            d6(34);
                                            f22 = 74;
                                            break;
                                        }
                                    case 47:
                                        switch(s110[e22 + 4 >> 1] | 0){
                                            case 47:
                                                {
                                                    G3();
                                                    break r;
                                                }
                                            case 42:
                                                {
                                                    p22(1);
                                                    break r;
                                                }
                                            default:
                                                {
                                                    r210 = t110[15] | 0;
                                                    a21 = s110[r210 >> 1] | 0;
                                                    a: do {
                                                        if (!(x18(a21) | 0)) {
                                                            switch(a21 << 16 >> 16){
                                                                case 41:
                                                                    if (L3(t110[(t110[17] | 0) + (c19[292] << 2) >> 2] | 0) | 0) {
                                                                        f22 = 71;
                                                                        break a;
                                                                    } else {
                                                                        f22 = 68;
                                                                        break a;
                                                                    }
                                                                case 125:
                                                                    break;
                                                                default:
                                                                    {
                                                                        f22 = 68;
                                                                        break a;
                                                                    }
                                                            }
                                                            e22 = c19[292] | 0;
                                                            if (!(y10(t110[(t110[17] | 0) + (e22 << 2) >> 2] | 0) | 0) ? (i14[le2 + e22 >> 0] | 0) == 0 : 0) f22 = 68;
                                                            else f22 = 71;
                                                        } else switch(a21 << 16 >> 16){
                                                            case 46:
                                                                if (((s110[r210 + -2 >> 1] | 0) + -48 & 65535) < 10) {
                                                                    f22 = 68;
                                                                    break a;
                                                                } else {
                                                                    f22 = 71;
                                                                    break a;
                                                                }
                                                            case 43:
                                                                if ((s110[r210 + -2 >> 1] | 0) == 43) {
                                                                    f22 = 68;
                                                                    break a;
                                                                } else {
                                                                    f22 = 71;
                                                                    break a;
                                                                }
                                                            case 45:
                                                                if ((s110[r210 + -2 >> 1] | 0) == 45) {
                                                                    f22 = 68;
                                                                    break a;
                                                                } else {
                                                                    f22 = 71;
                                                                    break a;
                                                                }
                                                            default:
                                                                {
                                                                    f22 = 71;
                                                                    break a;
                                                                }
                                                        }
                                                    }while (0)
                                                    a: do {
                                                        if ((f22 | 0) == 68) {
                                                            f22 = 0;
                                                            if (!(o19(r210) | 0)) {
                                                                switch(a21 << 16 >> 16){
                                                                    case 0:
                                                                        {
                                                                            f22 = 71;
                                                                            break a;
                                                                        }
                                                                    case 47:
                                                                        break;
                                                                    default:
                                                                        {
                                                                            e22 = 1;
                                                                            break a;
                                                                        }
                                                                }
                                                                if (!(i14[590] | 0)) e22 = 1;
                                                                else f22 = 71;
                                                            } else f22 = 71;
                                                        }
                                                    }while (0)
                                                    if ((f22 | 0) == 71) {
                                                        I3();
                                                        e22 = 0;
                                                    }
                                                    i14[590] = e22;
                                                    f22 = 74;
                                                    break r;
                                                }
                                        }
                                    case 96:
                                        {
                                            h11();
                                            f22 = 74;
                                            break;
                                        }
                                    default:
                                        f22 = 74;
                                }
                            }while (0)
                            if ((f22 | 0) == 74) {
                                f22 = 0;
                                t110[15] = t110[18];
                            }
                            e22 = t110[18] | 0;
                        }
                        if ((f22 | 0) == 36) {
                            Y3();
                            e22 = 0;
                            break;
                        } else if ((f22 | 0) == 49) {
                            Y3();
                            e22 = 0;
                            break;
                        } else if ((f22 | 0) == 53) {
                            Y3();
                            e22 = 0;
                            break;
                        } else if ((f22 | 0) == 75) {
                            e22 = (s110[293] | 0) == -1 & (s110[292] | 0) == 0 & (i14[588] | 0) == 0;
                            break;
                        }
                    }
                }while (0)
                ke2 = oe2;
                return e22 | 0;
            }
            function u12() {
                var e31 = 0, r310 = 0, a33 = 0, f31 = 0, c22 = 0, ke3 = 0;
                c22 = t110[18] | 0;
                ke3 = c22 + 12 | 0;
                t110[18] = ke3;
                r310 = w13(1) | 0;
                e31 = t110[18] | 0;
                if (!((e31 | 0) == (ke3 | 0) ? !(S4(r310) | 0) : 0)) f31 = 3;
                e: do {
                    if ((f31 | 0) == 3) {
                        r: do {
                            switch(r310 << 16 >> 16){
                                case 100:
                                    {
                                        J3(e31, e31 + 14 | 0);
                                        break e;
                                    }
                                case 97:
                                    {
                                        t110[18] = e31 + 10;
                                        w13(1) | 0;
                                        e31 = t110[18] | 0;
                                        f31 = 6;
                                        break;
                                    }
                                case 102:
                                    {
                                        f31 = 6;
                                        break;
                                    }
                                case 99:
                                    {
                                        if (z5(e31 + 2 | 0, 108, 97, 115, 115) | 0 ? (a33 = e31 + 10 | 0, F5(s110[a33 >> 1] | 0) | 0) : 0) {
                                            t110[18] = a33;
                                            c22 = w13(1) | 0;
                                            ke3 = t110[18] | 0;
                                            H3(c22) | 0;
                                            J3(ke3, t110[18] | 0);
                                            t110[18] = (t110[18] | 0) + -2;
                                            break e;
                                        }
                                        e31 = e31 + 4 | 0;
                                        t110[18] = e31;
                                        f31 = 13;
                                        break;
                                    }
                                case 108:
                                case 118:
                                    {
                                        f31 = 13;
                                        break;
                                    }
                                case 123:
                                    {
                                        t110[18] = e31 + 2;
                                        e31 = w13(1) | 0;
                                        a33 = t110[18] | 0;
                                        while(1){
                                            if (_3(e31) | 0) {
                                                d6(e31);
                                                e31 = (t110[18] | 0) + 2 | 0;
                                                t110[18] = e31;
                                            } else {
                                                H3(e31) | 0;
                                                e31 = t110[18] | 0;
                                            }
                                            w13(1) | 0;
                                            e31 = g6(a33, e31) | 0;
                                            if (e31 << 16 >> 16 == 44) {
                                                t110[18] = (t110[18] | 0) + 2;
                                                e31 = w13(1) | 0;
                                            }
                                            r310 = a33;
                                            a33 = t110[18] | 0;
                                            if (e31 << 16 >> 16 == 125) {
                                                f31 = 32;
                                                break;
                                            }
                                            if ((a33 | 0) == (r310 | 0)) {
                                                f31 = 29;
                                                break;
                                            }
                                            if (a33 >>> 0 > (t110[19] | 0) >>> 0) {
                                                f31 = 31;
                                                break;
                                            }
                                        }
                                        if ((f31 | 0) == 29) {
                                            Y3();
                                            break e;
                                        } else if ((f31 | 0) == 31) {
                                            Y3();
                                            break e;
                                        } else if ((f31 | 0) == 32) {
                                            t110[18] = a33 + 2;
                                            f31 = 34;
                                            break r;
                                        }
                                        break;
                                    }
                                case 42:
                                    {
                                        t110[18] = e31 + 2;
                                        w13(1) | 0;
                                        f31 = t110[18] | 0;
                                        g6(f31, f31) | 0;
                                        f31 = 34;
                                        break;
                                    }
                                default:
                            }
                        }while (0)
                        if ((f31 | 0) == 6) {
                            t110[18] = e31 + 16;
                            e31 = w13(1) | 0;
                            if (e31 << 16 >> 16 == 42) {
                                t110[18] = (t110[18] | 0) + 2;
                                e31 = w13(1) | 0;
                            }
                            ke3 = t110[18] | 0;
                            H3(e31) | 0;
                            J3(ke3, t110[18] | 0);
                            t110[18] = (t110[18] | 0) + -2;
                            break;
                        } else if ((f31 | 0) == 13) {
                            e31 = e31 + 4 | 0;
                            t110[18] = e31;
                            i14[589] = 0;
                            r: while(1){
                                t110[18] = e31 + 2;
                                ke3 = w13(1) | 0;
                                e31 = t110[18] | 0;
                                switch((H3(ke3) | 0) << 16 >> 16){
                                    case 91:
                                    case 123:
                                        {
                                            f31 = 15;
                                            break r;
                                        }
                                    default:
                                }
                                r310 = t110[18] | 0;
                                if ((r310 | 0) == (e31 | 0)) break e;
                                J3(e31, r310);
                                switch((w13(1) | 0) << 16 >> 16){
                                    case 61:
                                        {
                                            f31 = 19;
                                            break r;
                                        }
                                    case 44:
                                        break;
                                    default:
                                        {
                                            f31 = 20;
                                            break r;
                                        }
                                }
                                e31 = t110[18] | 0;
                            }
                            if ((f31 | 0) == 15) {
                                t110[18] = (t110[18] | 0) + -2;
                                break;
                            } else if ((f31 | 0) == 19) {
                                t110[18] = (t110[18] | 0) + -2;
                                break;
                            } else if ((f31 | 0) == 20) {
                                t110[18] = (t110[18] | 0) + -2;
                                break;
                            }
                        } else if ((f31 | 0) == 34) r310 = w13(1) | 0;
                        e31 = t110[18] | 0;
                        if (r310 << 16 >> 16 == 102 ? K3(e31 + 2 | 0, 114, 111, 109) | 0 : 0) {
                            t110[18] = e31 + 8;
                            l12(c22, w13(1) | 0);
                            break;
                        }
                        t110[18] = e31 + -2;
                    }
                }while (0)
                return;
            }
            function k11() {
                var e4 = 0, r44 = 0, a41 = 0, f41 = 0, c31 = 0;
                c31 = t110[18] | 0;
                r44 = c31 + 12 | 0;
                t110[18] = r44;
                e: do {
                    switch((w13(1) | 0) << 16 >> 16){
                        case 40:
                            {
                                r44 = t110[17] | 0;
                                a41 = s110[292] | 0;
                                s110[292] = a41 + 1 << 16 >> 16;
                                t110[r44 + ((a41 & 65535) << 2) >> 2] = c31;
                                if ((s110[t110[15] >> 1] | 0) != 46) {
                                    v8(c31, (t110[18] | 0) + 2 | 0, 0, c31);
                                    t110[11] = t110[8];
                                    t110[18] = (t110[18] | 0) + 2;
                                    switch((w13(1) | 0) << 16 >> 16){
                                        case 39:
                                            {
                                                d6(39);
                                                break;
                                            }
                                        case 34:
                                            {
                                                d6(34);
                                                break;
                                            }
                                        default:
                                            {
                                                t110[18] = (t110[18] | 0) + -2;
                                                break e;
                                            }
                                    }
                                    t110[18] = (t110[18] | 0) + 2;
                                    switch((w13(1) | 0) << 16 >> 16){
                                        case 44:
                                            {
                                                c31 = t110[18] | 0;
                                                t110[(t110[8] | 0) + 4 >> 2] = c31;
                                                t110[18] = c31 + 2;
                                                w13(1) | 0;
                                                c31 = t110[18] | 0;
                                                a41 = t110[8] | 0;
                                                t110[a41 + 16 >> 2] = c31;
                                                i14[a41 + 24 >> 0] = 1;
                                                t110[18] = c31 + -2;
                                                break e;
                                            }
                                        case 41:
                                            {
                                                s110[292] = (s110[292] | 0) + -1 << 16 >> 16;
                                                a41 = t110[18] | 0;
                                                c31 = t110[8] | 0;
                                                t110[c31 + 4 >> 2] = a41;
                                                t110[c31 + 12 >> 2] = a41;
                                                i14[c31 + 24 >> 0] = 1;
                                                break e;
                                            }
                                        default:
                                            {
                                                t110[18] = (t110[18] | 0) + -2;
                                                break e;
                                            }
                                    }
                                }
                                break;
                            }
                        case 46:
                            {
                                t110[18] = (t110[18] | 0) + 2;
                                if (((w13(1) | 0) << 16 >> 16 == 109 ? (e4 = t110[18] | 0, K3(e4 + 2 | 0, 101, 116, 97) | 0) : 0) ? (s110[t110[15] >> 1] | 0) != 46 : 0) v8(c31, c31, e4 + 8 | 0, 2);
                                break;
                            }
                        case 42:
                        case 39:
                        case 34:
                            {
                                f41 = 16;
                                break;
                            }
                        case 123:
                            {
                                e4 = t110[18] | 0;
                                if (s110[292] | 0) {
                                    t110[18] = e4 + -2;
                                    break e;
                                }
                                while(1){
                                    if (e4 >>> 0 >= (t110[19] | 0) >>> 0) break;
                                    e4 = w13(1) | 0;
                                    if (!(_3(e4) | 0)) {
                                        if (e4 << 16 >> 16 == 125) {
                                            f41 = 31;
                                            break;
                                        }
                                    } else d6(e4);
                                    e4 = (t110[18] | 0) + 2 | 0;
                                    t110[18] = e4;
                                }
                                if ((f41 | 0) == 31) t110[18] = (t110[18] | 0) + 2;
                                w13(1) | 0;
                                e4 = t110[18] | 0;
                                if (!(z5(e4, 102, 114, 111, 109) | 0)) {
                                    Y3();
                                    break e;
                                }
                                t110[18] = e4 + 8;
                                e4 = w13(1) | 0;
                                if (_3(e4) | 0) {
                                    l12(c31, e4);
                                    break e;
                                } else {
                                    Y3();
                                    break e;
                                }
                            }
                        default:
                            if ((t110[18] | 0) != (r44 | 0)) f41 = 16;
                    }
                }while (0)
                do {
                    if ((f41 | 0) == 16) {
                        if (s110[292] | 0) {
                            t110[18] = (t110[18] | 0) + -2;
                            break;
                        }
                        e4 = t110[19] | 0;
                        r44 = t110[18] | 0;
                        while(1){
                            if (r44 >>> 0 >= e4 >>> 0) {
                                f41 = 23;
                                break;
                            }
                            a41 = s110[r44 >> 1] | 0;
                            if (_3(a41) | 0) {
                                f41 = 21;
                                break;
                            }
                            f41 = r44 + 2 | 0;
                            t110[18] = f41;
                            r44 = f41;
                        }
                        if ((f41 | 0) == 21) {
                            l12(c31, a41);
                            break;
                        } else if ((f41 | 0) == 23) {
                            Y3();
                            break;
                        }
                    }
                }while (0)
                return;
            }
            function l12(e5, r51) {
                e5 = e5 | 0;
                r51 = r51 | 0;
                var a5 = 0, i22 = 0;
                a5 = (t110[18] | 0) + 2 | 0;
                switch(r51 << 16 >> 16){
                    case 39:
                        {
                            d6(39);
                            i22 = 5;
                            break;
                        }
                    case 34:
                        {
                            d6(34);
                            i22 = 5;
                            break;
                        }
                    default:
                        Y3();
                }
                do {
                    if ((i22 | 0) == 5) {
                        v8(e5, a5, t110[18] | 0, 1);
                        t110[18] = (t110[18] | 0) + 2;
                        i22 = (w13(0) | 0) << 16 >> 16 == 97;
                        r51 = t110[18] | 0;
                        if (i22 ? B3(r51 + 2 | 0, 115, 115, 101, 114, 116) | 0 : 0) {
                            t110[18] = r51 + 12;
                            if ((w13(1) | 0) << 16 >> 16 != 123) {
                                t110[18] = r51;
                                break;
                            }
                            e5 = t110[18] | 0;
                            a5 = e5;
                            e: while(1){
                                t110[18] = a5 + 2;
                                a5 = w13(1) | 0;
                                switch(a5 << 16 >> 16){
                                    case 39:
                                        {
                                            d6(39);
                                            t110[18] = (t110[18] | 0) + 2;
                                            a5 = w13(1) | 0;
                                            break;
                                        }
                                    case 34:
                                        {
                                            d6(34);
                                            t110[18] = (t110[18] | 0) + 2;
                                            a5 = w13(1) | 0;
                                            break;
                                        }
                                    default:
                                        a5 = H3(a5) | 0;
                                }
                                if (a5 << 16 >> 16 != 58) {
                                    i22 = 16;
                                    break;
                                }
                                t110[18] = (t110[18] | 0) + 2;
                                switch((w13(1) | 0) << 16 >> 16){
                                    case 39:
                                        {
                                            d6(39);
                                            break;
                                        }
                                    case 34:
                                        {
                                            d6(34);
                                            break;
                                        }
                                    default:
                                        {
                                            i22 = 20;
                                            break e;
                                        }
                                }
                                t110[18] = (t110[18] | 0) + 2;
                                switch((w13(1) | 0) << 16 >> 16){
                                    case 125:
                                        {
                                            i22 = 25;
                                            break e;
                                        }
                                    case 44:
                                        break;
                                    default:
                                        {
                                            i22 = 24;
                                            break e;
                                        }
                                }
                                t110[18] = (t110[18] | 0) + 2;
                                if ((w13(1) | 0) << 16 >> 16 == 125) {
                                    i22 = 25;
                                    break;
                                }
                                a5 = t110[18] | 0;
                            }
                            if ((i22 | 0) == 16) {
                                t110[18] = r51;
                                break;
                            } else if ((i22 | 0) == 20) {
                                t110[18] = r51;
                                break;
                            } else if ((i22 | 0) == 24) {
                                t110[18] = r51;
                                break;
                            } else if ((i22 | 0) == 25) {
                                i22 = t110[8] | 0;
                                t110[i22 + 16 >> 2] = e5;
                                t110[i22 + 12 >> 2] = (t110[18] | 0) + 2;
                                break;
                            }
                        }
                        t110[18] = r51 + -2;
                    }
                }while (0)
                return;
            }
            function o19(e6) {
                e6 = e6 | 0;
                e: do {
                    switch(s110[e6 >> 1] | 0){
                        case 100:
                            switch(s110[e6 + -2 >> 1] | 0){
                                case 105:
                                    {
                                        e6 = q3(e6 + -4 | 0, 118, 111) | 0;
                                        break e;
                                    }
                                case 108:
                                    {
                                        e6 = P4(e6 + -4 | 0, 121, 105, 101) | 0;
                                        break e;
                                    }
                                default:
                                    {
                                        e6 = 0;
                                        break e;
                                    }
                            }
                        case 101:
                            {
                                switch(s110[e6 + -2 >> 1] | 0){
                                    case 115:
                                        break;
                                    case 116:
                                        {
                                            e6 = E3(e6 + -4 | 0, 100, 101, 108, 101) | 0;
                                            break e;
                                        }
                                    default:
                                        {
                                            e6 = 0;
                                            break e;
                                        }
                                }
                                switch(s110[e6 + -4 >> 1] | 0){
                                    case 108:
                                        {
                                            e6 = D3(e6 + -6 | 0, 101) | 0;
                                            break e;
                                        }
                                    case 97:
                                        {
                                            e6 = D3(e6 + -6 | 0, 99) | 0;
                                            break e;
                                        }
                                    default:
                                        {
                                            e6 = 0;
                                            break e;
                                        }
                                }
                            }
                        case 102:
                            {
                                if ((s110[e6 + -2 >> 1] | 0) == 111 ? (s110[e6 + -4 >> 1] | 0) == 101 : 0) switch(s110[e6 + -6 >> 1] | 0){
                                    case 99:
                                        {
                                            e6 = O3(e6 + -8 | 0, 105, 110, 115, 116, 97, 110) | 0;
                                            break e;
                                        }
                                    case 112:
                                        {
                                            e6 = q3(e6 + -8 | 0, 116, 121) | 0;
                                            break e;
                                        }
                                    default:
                                        {
                                            e6 = 0;
                                            break e;
                                        }
                                }
                                else e6 = 0;
                                break;
                            }
                        case 110:
                            {
                                e6 = e6 + -2 | 0;
                                if (D3(e6, 105) | 0) e6 = 1;
                                else e6 = $3(e6, 114, 101, 116, 117, 114) | 0;
                                break;
                            }
                        case 111:
                            {
                                e6 = D3(e6 + -2 | 0, 100) | 0;
                                break;
                            }
                        case 114:
                            {
                                e6 = m11(e6 + -2 | 0, 100, 101, 98, 117, 103, 103, 101) | 0;
                                break;
                            }
                        case 116:
                            {
                                e6 = E3(e6 + -2 | 0, 97, 119, 97, 105) | 0;
                                break;
                            }
                        case 119:
                            switch(s110[e6 + -2 >> 1] | 0){
                                case 101:
                                    {
                                        e6 = D3(e6 + -4 | 0, 110) | 0;
                                        break e;
                                    }
                                case 111:
                                    {
                                        e6 = P4(e6 + -4 | 0, 116, 104, 114) | 0;
                                        break e;
                                    }
                                default:
                                    {
                                        e6 = 0;
                                        break e;
                                    }
                            }
                        default:
                            e6 = 0;
                    }
                }while (0)
                return e6 | 0;
            }
            function h11() {
                var e7 = 0, r6 = 0, a6 = 0;
                r6 = t110[19] | 0;
                a6 = t110[18] | 0;
                e: while(1){
                    e7 = a6 + 2 | 0;
                    if (a6 >>> 0 >= r6 >>> 0) {
                        r6 = 8;
                        break;
                    }
                    switch(s110[e7 >> 1] | 0){
                        case 96:
                            {
                                r6 = 9;
                                break e;
                            }
                        case 36:
                            {
                                if ((s110[a6 + 4 >> 1] | 0) == 123) {
                                    r6 = 6;
                                    break e;
                                }
                                break;
                            }
                        case 92:
                            {
                                e7 = a6 + 4 | 0;
                                break;
                            }
                        default:
                    }
                    a6 = e7;
                }
                if ((r6 | 0) == 6) {
                    t110[18] = a6 + 4;
                    e7 = s110[293] | 0;
                    r6 = t110[16] | 0;
                    a6 = s110[291] | 0;
                    s110[291] = a6 + 1 << 16 >> 16;
                    s110[r6 + ((a6 & 65535) << 1) >> 1] = e7;
                    a6 = (s110[292] | 0) + 1 << 16 >> 16;
                    s110[292] = a6;
                    s110[293] = a6;
                } else if ((r6 | 0) == 8) {
                    t110[18] = e7;
                    Y3();
                } else if ((r6 | 0) == 9) t110[18] = e7;
                return;
            }
            function w13(e8) {
                e8 = e8 | 0;
                var r7 = 0, a7 = 0, i31 = 0;
                a7 = t110[18] | 0;
                e: do {
                    r7 = s110[a7 >> 1] | 0;
                    r: do {
                        if (r7 << 16 >> 16 != 47) if (e8) if (Z3(r7) | 0) break;
                        else break e;
                        else if (Q3(r7) | 0) break;
                        else break e;
                        else switch(s110[a7 + 2 >> 1] | 0){
                            case 47:
                                {
                                    G3();
                                    break r;
                                }
                            case 42:
                                {
                                    p22(e8);
                                    break r;
                                }
                            default:
                                {
                                    r7 = 47;
                                    break e;
                                }
                        }
                    }while (0)
                    i31 = t110[18] | 0;
                    a7 = i31 + 2 | 0;
                    t110[18] = a7;
                }while (i31 >>> 0 < (t110[19] | 0) >>> 0)
                return r7 | 0;
            }
            function d6(e9) {
                e9 = e9 | 0;
                var r8 = 0, a8 = 0, i41 = 0, f5 = 0;
                f5 = t110[19] | 0;
                r8 = t110[18] | 0;
                while(1){
                    i41 = r8 + 2 | 0;
                    if (r8 >>> 0 >= f5 >>> 0) {
                        r8 = 9;
                        break;
                    }
                    a8 = s110[i41 >> 1] | 0;
                    if (a8 << 16 >> 16 == e9 << 16 >> 16) {
                        r8 = 10;
                        break;
                    }
                    if (a8 << 16 >> 16 == 92) {
                        a8 = r8 + 4 | 0;
                        if ((s110[a8 >> 1] | 0) == 13) {
                            r8 = r8 + 6 | 0;
                            r8 = (s110[r8 >> 1] | 0) == 10 ? r8 : a8;
                        } else r8 = a8;
                    } else if (ae2(a8) | 0) {
                        r8 = 9;
                        break;
                    } else r8 = i41;
                }
                if ((r8 | 0) == 9) {
                    t110[18] = i41;
                    Y3();
                } else if ((r8 | 0) == 10) t110[18] = i41;
                return;
            }
            function v8(e10, r9, a9, s210) {
                e10 = e10 | 0;
                r9 = r9 | 0;
                a9 = a9 | 0;
                s210 = s210 | 0;
                var f6 = 0, c4 = 0;
                f6 = t110[13] | 0;
                t110[13] = f6 + 32;
                c4 = t110[8] | 0;
                t110[((c4 | 0) == 0 ? 16 : c4 + 28 | 0) >> 2] = f6;
                t110[9] = c4;
                t110[8] = f6;
                t110[f6 + 8 >> 2] = e10;
                do {
                    if (2 != (s210 | 0)) if (1 == (s210 | 0)) {
                        t110[f6 + 12 >> 2] = a9 + 2;
                        break;
                    } else {
                        t110[f6 + 12 >> 2] = t110[3];
                        break;
                    }
                    else t110[f6 + 12 >> 2] = a9;
                }while (0)
                t110[f6 >> 2] = r9;
                t110[f6 + 4 >> 2] = a9;
                t110[f6 + 16 >> 2] = 0;
                t110[f6 + 20 >> 2] = s210;
                i14[f6 + 24 >> 0] = 1 == (s210 | 0) & 1;
                t110[f6 + 28 >> 2] = 0;
                return;
            }
            function A3() {
                var e11 = 0, r10 = 0, a10 = 0;
                a10 = t110[19] | 0;
                r10 = t110[18] | 0;
                e: while(1){
                    e11 = r10 + 2 | 0;
                    if (r10 >>> 0 >= a10 >>> 0) {
                        r10 = 6;
                        break;
                    }
                    switch(s110[e11 >> 1] | 0){
                        case 13:
                        case 10:
                            {
                                r10 = 6;
                                break e;
                            }
                        case 93:
                            {
                                r10 = 7;
                                break e;
                            }
                        case 92:
                            {
                                e11 = r10 + 4 | 0;
                                break;
                            }
                        default:
                    }
                    r10 = e11;
                }
                if ((r10 | 0) == 6) {
                    t110[18] = e11;
                    Y3();
                    e11 = 0;
                } else if ((r10 | 0) == 7) {
                    t110[18] = e11;
                    e11 = 93;
                }
                return e11 | 0;
            }
            function C3(e12, r11, a11, i5, t210, f7, c5, ke4) {
                e12 = e12 | 0;
                r11 = r11 | 0;
                a11 = a11 | 0;
                i5 = i5 | 0;
                t210 = t210 | 0;
                f7 = f7 | 0;
                c5 = c5 | 0;
                ke4 = ke4 | 0;
                if ((((((s110[e12 + 12 >> 1] | 0) == ke4 << 16 >> 16 ? (s110[e12 + 10 >> 1] | 0) == c5 << 16 >> 16 : 0) ? (s110[e12 + 8 >> 1] | 0) == f7 << 16 >> 16 : 0) ? (s110[e12 + 6 >> 1] | 0) == t210 << 16 >> 16 : 0) ? (s110[e12 + 4 >> 1] | 0) == i5 << 16 >> 16 : 0) ? (s110[e12 + 2 >> 1] | 0) == a11 << 16 >> 16 : 0) r11 = (s110[e12 >> 1] | 0) == r11 << 16 >> 16;
                else r11 = 0;
                return r11 | 0;
            }
            function y10(e13) {
                e13 = e13 | 0;
                switch(s110[e13 >> 1] | 0){
                    case 62:
                        {
                            e13 = (s110[e13 + -2 >> 1] | 0) == 61;
                            break;
                        }
                    case 41:
                    case 59:
                        {
                            e13 = 1;
                            break;
                        }
                    case 104:
                        {
                            e13 = E3(e13 + -2 | 0, 99, 97, 116, 99) | 0;
                            break;
                        }
                    case 121:
                        {
                            e13 = O3(e13 + -2 | 0, 102, 105, 110, 97, 108, 108) | 0;
                            break;
                        }
                    case 101:
                        {
                            e13 = P4(e13 + -2 | 0, 101, 108, 115) | 0;
                            break;
                        }
                    default:
                        e13 = 0;
                }
                return e13 | 0;
            }
            function g6(e14, r12) {
                e14 = e14 | 0;
                r12 = r12 | 0;
                var a12 = 0, i6 = 0;
                a12 = t110[18] | 0;
                i6 = s110[a12 >> 1] | 0;
                if (i6 << 16 >> 16 == 97) {
                    t110[18] = a12 + 4;
                    a12 = w13(1) | 0;
                    e14 = t110[18] | 0;
                    if (_3(a12) | 0) {
                        d6(a12);
                        r12 = (t110[18] | 0) + 2 | 0;
                        t110[18] = r12;
                    } else {
                        H3(a12) | 0;
                        r12 = t110[18] | 0;
                    }
                    i6 = w13(1) | 0;
                    a12 = t110[18] | 0;
                }
                if ((a12 | 0) != (e14 | 0)) J3(e14, r12);
                return i6 | 0;
            }
            function I3() {
                var e15 = 0, r13 = 0, a13 = 0;
                e: while(1){
                    e15 = t110[18] | 0;
                    r13 = e15 + 2 | 0;
                    t110[18] = r13;
                    if (e15 >>> 0 >= (t110[19] | 0) >>> 0) {
                        a13 = 7;
                        break;
                    }
                    switch(s110[r13 >> 1] | 0){
                        case 13:
                        case 10:
                            {
                                a13 = 7;
                                break e;
                            }
                        case 47:
                            break e;
                        case 91:
                            {
                                A3() | 0;
                                break;
                            }
                        case 92:
                            {
                                t110[18] = e15 + 4;
                                break;
                            }
                        default:
                    }
                }
                if ((a13 | 0) == 7) Y3();
                return;
            }
            function p22(e16) {
                e16 = e16 | 0;
                var r14 = 0, a14 = 0, i7 = 0, f8 = 0, c6 = 0;
                f8 = (t110[18] | 0) + 2 | 0;
                t110[18] = f8;
                a14 = t110[19] | 0;
                while(1){
                    r14 = f8 + 2 | 0;
                    if (f8 >>> 0 >= a14 >>> 0) break;
                    i7 = s110[r14 >> 1] | 0;
                    if (!e16 ? ae2(i7) | 0 : 0) break;
                    if (i7 << 16 >> 16 == 42 ? (s110[f8 + 4 >> 1] | 0) == 47 : 0) {
                        c6 = 8;
                        break;
                    }
                    f8 = r14;
                }
                if ((c6 | 0) == 8) {
                    t110[18] = r14;
                    r14 = f8 + 4 | 0;
                }
                t110[18] = r14;
                return;
            }
            function U3(e17, r15, a15, i8, t310, f9, c7) {
                e17 = e17 | 0;
                r15 = r15 | 0;
                a15 = a15 | 0;
                i8 = i8 | 0;
                t310 = t310 | 0;
                f9 = f9 | 0;
                c7 = c7 | 0;
                if (((((s110[e17 + 10 >> 1] | 0) == c7 << 16 >> 16 ? (s110[e17 + 8 >> 1] | 0) == f9 << 16 >> 16 : 0) ? (s110[e17 + 6 >> 1] | 0) == t310 << 16 >> 16 : 0) ? (s110[e17 + 4 >> 1] | 0) == i8 << 16 >> 16 : 0) ? (s110[e17 + 2 >> 1] | 0) == a15 << 16 >> 16 : 0) r15 = (s110[e17 >> 1] | 0) == r15 << 16 >> 16;
                else r15 = 0;
                return r15 | 0;
            }
            function m11(e18, r16, a16, i9, f10, c8, ke5, le3) {
                e18 = e18 | 0;
                r16 = r16 | 0;
                a16 = a16 | 0;
                i9 = i9 | 0;
                f10 = f10 | 0;
                c8 = c8 | 0;
                ke5 = ke5 | 0;
                le3 = le3 | 0;
                var oe3 = 0, we2 = 0;
                we2 = e18 + -12 | 0;
                oe3 = t110[3] | 0;
                if (we2 >>> 0 >= oe3 >>> 0 ? C3(we2, r16, a16, i9, f10, c8, ke5, le3) | 0 : 0) if ((we2 | 0) == (oe3 | 0)) oe3 = 1;
                else oe3 = F5(s110[e18 + -14 >> 1] | 0) | 0;
                else oe3 = 0;
                return oe3 | 0;
            }
            function S4(e19) {
                e19 = e19 | 0;
                e: do {
                    switch(e19 << 16 >> 16){
                        case 38:
                        case 37:
                        case 33:
                            {
                                e19 = 1;
                                break;
                            }
                        default:
                            if ((e19 & -8) << 16 >> 16 == 40 | (e19 + -58 & 65535) < 6) e19 = 1;
                            else {
                                switch(e19 << 16 >> 16){
                                    case 91:
                                    case 93:
                                    case 94:
                                        {
                                            e19 = 1;
                                            break e;
                                        }
                                    default:
                                }
                                e19 = (e19 + -123 & 65535) < 4;
                            }
                    }
                }while (0)
                return e19 | 0;
            }
            function x18(e20) {
                e20 = e20 | 0;
                e: do {
                    switch(e20 << 16 >> 16){
                        case 38:
                        case 37:
                        case 33:
                            break;
                        default:
                            if (!((e20 + -58 & 65535) < 6 | (e20 + -40 & 65535) < 7 & e20 << 16 >> 16 != 41)) {
                                switch(e20 << 16 >> 16){
                                    case 91:
                                    case 94:
                                        break e;
                                    default:
                                }
                                return e20 << 16 >> 16 != 125 & (e20 + -123 & 65535) < 4 | 0;
                            }
                    }
                }while (0)
                return 1;
            }
            function O3(e21, r17, a17, i10, f11, c9, ke6) {
                e21 = e21 | 0;
                r17 = r17 | 0;
                a17 = a17 | 0;
                i10 = i10 | 0;
                f11 = f11 | 0;
                c9 = c9 | 0;
                ke6 = ke6 | 0;
                var le4 = 0, oe4 = 0;
                oe4 = e21 + -10 | 0;
                le4 = t110[3] | 0;
                if (oe4 >>> 0 >= le4 >>> 0 ? U3(oe4, r17, a17, i10, f11, c9, ke6) | 0 : 0) if ((oe4 | 0) == (le4 | 0)) le4 = 1;
                else le4 = F5(s110[e21 + -12 >> 1] | 0) | 0;
                else le4 = 0;
                return le4 | 0;
            }
            function $3(e22, r18, a18, i11, f12, c10) {
                e22 = e22 | 0;
                r18 = r18 | 0;
                a18 = a18 | 0;
                i11 = i11 | 0;
                f12 = f12 | 0;
                c10 = c10 | 0;
                var ke7 = 0, le5 = 0;
                le5 = e22 + -8 | 0;
                ke7 = t110[3] | 0;
                if (le5 >>> 0 >= ke7 >>> 0 ? B3(le5, r18, a18, i11, f12, c10) | 0 : 0) if ((le5 | 0) == (ke7 | 0)) ke7 = 1;
                else ke7 = F5(s110[e22 + -10 >> 1] | 0) | 0;
                else ke7 = 0;
                return ke7 | 0;
            }
            function j9(e23) {
                e23 = e23 | 0;
                var r19 = 0, a19 = 0, i12 = 0, f13 = 0;
                a19 = ke2;
                ke2 = ke2 + 16 | 0;
                i12 = a19;
                t110[i12 >> 2] = 0;
                t110[12] = e23;
                r19 = t110[3] | 0;
                f13 = r19 + (e23 << 1) | 0;
                e23 = f13 + 2 | 0;
                s110[f13 >> 1] = 0;
                t110[i12 >> 2] = e23;
                t110[13] = e23;
                t110[4] = 0;
                t110[8] = 0;
                t110[6] = 0;
                t110[5] = 0;
                t110[10] = 0;
                t110[7] = 0;
                ke2 = a19;
                return r19 | 0;
            }
            function B3(e24, r20, a20, i13, t42, f14) {
                e24 = e24 | 0;
                r20 = r20 | 0;
                a20 = a20 | 0;
                i13 = i13 | 0;
                t42 = t42 | 0;
                f14 = f14 | 0;
                if ((((s110[e24 + 8 >> 1] | 0) == f14 << 16 >> 16 ? (s110[e24 + 6 >> 1] | 0) == t42 << 16 >> 16 : 0) ? (s110[e24 + 4 >> 1] | 0) == i13 << 16 >> 16 : 0) ? (s110[e24 + 2 >> 1] | 0) == a20 << 16 >> 16 : 0) r20 = (s110[e24 >> 1] | 0) == r20 << 16 >> 16;
                else r20 = 0;
                return r20 | 0;
            }
            function E3(e25, r21, a21, i14, f15) {
                e25 = e25 | 0;
                r21 = r21 | 0;
                a21 = a21 | 0;
                i14 = i14 | 0;
                f15 = f15 | 0;
                var c11 = 0, ke8 = 0;
                ke8 = e25 + -6 | 0;
                c11 = t110[3] | 0;
                if (ke8 >>> 0 >= c11 >>> 0 ? z5(ke8, r21, a21, i14, f15) | 0 : 0) if ((ke8 | 0) == (c11 | 0)) c11 = 1;
                else c11 = F5(s110[e25 + -8 >> 1] | 0) | 0;
                else c11 = 0;
                return c11 | 0;
            }
            function P4(e26, r22, a22, i15) {
                e26 = e26 | 0;
                r22 = r22 | 0;
                a22 = a22 | 0;
                i15 = i15 | 0;
                var f16 = 0, c12 = 0;
                c12 = e26 + -4 | 0;
                f16 = t110[3] | 0;
                if (c12 >>> 0 >= f16 >>> 0 ? K3(c12, r22, a22, i15) | 0 : 0) if ((c12 | 0) == (f16 | 0)) f16 = 1;
                else f16 = F5(s110[e26 + -6 >> 1] | 0) | 0;
                else f16 = 0;
                return f16 | 0;
            }
            function q3(e27, r23, a23) {
                e27 = e27 | 0;
                r23 = r23 | 0;
                a23 = a23 | 0;
                var i16 = 0, f17 = 0;
                f17 = e27 + -2 | 0;
                i16 = t110[3] | 0;
                if (f17 >>> 0 >= i16 >>> 0 ? N3(f17, r23, a23) | 0 : 0) if ((f17 | 0) == (i16 | 0)) i16 = 1;
                else i16 = F5(s110[e27 + -4 >> 1] | 0) | 0;
                else i16 = 0;
                return i16 | 0;
            }
            function z5(e28, r24, a24, i17, t5) {
                e28 = e28 | 0;
                r24 = r24 | 0;
                a24 = a24 | 0;
                i17 = i17 | 0;
                t5 = t5 | 0;
                if (((s110[e28 + 6 >> 1] | 0) == t5 << 16 >> 16 ? (s110[e28 + 4 >> 1] | 0) == i17 << 16 >> 16 : 0) ? (s110[e28 + 2 >> 1] | 0) == a24 << 16 >> 16 : 0) r24 = (s110[e28 >> 1] | 0) == r24 << 16 >> 16;
                else r24 = 0;
                return r24 | 0;
            }
            function D3(e29, r25) {
                e29 = e29 | 0;
                r25 = r25 | 0;
                var a25 = 0;
                a25 = t110[3] | 0;
                if (a25 >>> 0 <= e29 >>> 0 ? (s110[e29 >> 1] | 0) == r25 << 16 >> 16 : 0) if ((a25 | 0) == (e29 | 0)) a25 = 1;
                else a25 = F5(s110[e29 + -2 >> 1] | 0) | 0;
                else a25 = 0;
                return a25 | 0;
            }
            function F5(e30) {
                e30 = e30 | 0;
                e: do {
                    if ((e30 + -9 & 65535) < 5) e30 = 1;
                    else {
                        switch(e30 << 16 >> 16){
                            case 32:
                            case 160:
                                {
                                    e30 = 1;
                                    break e;
                                }
                            default:
                        }
                        e30 = e30 << 16 >> 16 != 46 & (S4(e30) | 0);
                    }
                }while (0)
                return e30 | 0;
            }
            function G3() {
                var e31 = 0, r26 = 0, a26 = 0;
                e31 = t110[19] | 0;
                a26 = t110[18] | 0;
                e: while(1){
                    r26 = a26 + 2 | 0;
                    if (a26 >>> 0 >= e31 >>> 0) break;
                    switch(s110[r26 >> 1] | 0){
                        case 13:
                        case 10:
                            break e;
                        default:
                            a26 = r26;
                    }
                }
                t110[18] = r26;
                return;
            }
            function H3(e32) {
                e32 = e32 | 0;
                while(1){
                    if (Z3(e32) | 0) break;
                    if (S4(e32) | 0) break;
                    e32 = (t110[18] | 0) + 2 | 0;
                    t110[18] = e32;
                    e32 = s110[e32 >> 1] | 0;
                    if (!(e32 << 16 >> 16)) {
                        e32 = 0;
                        break;
                    }
                }
                return e32 | 0;
            }
            function J3(e33, r27) {
                e33 = e33 | 0;
                r27 = r27 | 0;
                var a27 = 0, i18 = 0;
                a27 = t110[13] | 0;
                t110[13] = a27 + 12;
                i18 = t110[10] | 0;
                t110[((i18 | 0) == 0 ? 20 : i18 + 8 | 0) >> 2] = a27;
                t110[10] = a27;
                t110[a27 >> 2] = e33;
                t110[a27 + 4 >> 2] = r27;
                t110[a27 + 8 >> 2] = 0;
                return;
            }
            function K3(e34, r28, a28, i19) {
                e34 = e34 | 0;
                r28 = r28 | 0;
                a28 = a28 | 0;
                i19 = i19 | 0;
                if ((s110[e34 + 4 >> 1] | 0) == i19 << 16 >> 16 ? (s110[e34 + 2 >> 1] | 0) == a28 << 16 >> 16 : 0) r28 = (s110[e34 >> 1] | 0) == r28 << 16 >> 16;
                else r28 = 0;
                return r28 | 0;
            }
            function L3(e35) {
                e35 = e35 | 0;
                if (!($3(e35, 119, 104, 105, 108, 101) | 0) ? !(P4(e35, 102, 111, 114) | 0) : 0) e35 = q3(e35, 105, 102) | 0;
                else e35 = 1;
                return e35 | 0;
            }
            function M3() {
                var e36 = 0;
                e36 = t110[(t110[6] | 0) + 20 >> 2] | 0;
                switch(e36 | 0){
                    case 1:
                        {
                            e36 = -1;
                            break;
                        }
                    case 2:
                        {
                            e36 = -2;
                            break;
                        }
                    default:
                        e36 = e36 - (t110[3] | 0) >> 1;
                }
                return e36 | 0;
            }
            function N3(e37, r29, a29) {
                e37 = e37 | 0;
                r29 = r29 | 0;
                a29 = a29 | 0;
                if ((s110[e37 + 2 >> 1] | 0) == a29 << 16 >> 16) r29 = (s110[e37 >> 1] | 0) == r29 << 16 >> 16;
                else r29 = 0;
                return r29 | 0;
            }
            function Q3(e38) {
                e38 = e38 | 0;
                switch(e38 << 16 >> 16){
                    case 160:
                    case 32:
                    case 12:
                    case 11:
                    case 9:
                        {
                            e38 = 1;
                            break;
                        }
                    default:
                        e38 = 0;
                }
                return e38 | 0;
            }
            function R4(e39) {
                e39 = e39 | 0;
                if ((t110[3] | 0) == (e39 | 0)) e39 = 1;
                else e39 = F5(s110[e39 + -2 >> 1] | 0) | 0;
                return e39 | 0;
            }
            function T3() {
                var e40 = 0;
                e40 = t110[(t110[6] | 0) + 16 >> 2] | 0;
                if (!e40) e40 = -1;
                else e40 = e40 - (t110[3] | 0) >> 1;
                return e40 | 0;
            }
            function V3() {
                var e41 = 0;
                e41 = t110[6] | 0;
                e41 = t110[((e41 | 0) == 0 ? 16 : e41 + 28 | 0) >> 2] | 0;
                t110[6] = e41;
                return (e41 | 0) != 0 | 0;
            }
            function W3() {
                var e42 = 0;
                e42 = t110[7] | 0;
                e42 = t110[((e42 | 0) == 0 ? 20 : e42 + 8 | 0) >> 2] | 0;
                t110[7] = e42;
                return (e42 | 0) != 0 | 0;
            }
            function X4(e43) {
                e43 = e43 | 0;
                var r30 = 0;
                r30 = ke2;
                ke2 = ke2 + e43 | 0;
                ke2 = ke2 + 15 & -16;
                return r30 | 0;
            }
            function Y3() {
                i14[588] = 1;
                t110[14] = (t110[18] | 0) - (t110[3] | 0) >> 1;
                t110[18] = (t110[19] | 0) + 2;
                return;
            }
            function Z3(e44) {
                e44 = e44 | 0;
                return (e44 | 128) << 16 >> 16 == 160 | (e44 + -9 & 65535) < 5 | 0;
            }
            function _3(e45) {
                e45 = e45 | 0;
                return e45 << 16 >> 16 == 39 | e45 << 16 >> 16 == 34 | 0;
            }
            function ee2() {
                return (t110[(t110[6] | 0) + 12 >> 2] | 0) - (t110[3] | 0) >> 1 | 0;
            }
            function re2() {
                return (t110[(t110[6] | 0) + 8 >> 2] | 0) - (t110[3] | 0) >> 1 | 0;
            }
            function ae2(e46) {
                e46 = e46 | 0;
                return e46 << 16 >> 16 == 13 | e46 << 16 >> 16 == 10 | 0;
            }
            function ie2() {
                return (t110[(t110[6] | 0) + 4 >> 2] | 0) - (t110[3] | 0) >> 1 | 0;
            }
            function se1() {
                return (t110[(t110[7] | 0) + 4 >> 2] | 0) - (t110[3] | 0) >> 1 | 0;
            }
            function te2() {
                return (t110[t110[6] >> 2] | 0) - (t110[3] | 0) >> 1 | 0;
            }
            function fe() {
                return (t110[t110[7] >> 2] | 0) - (t110[3] | 0) >> 1 | 0;
            }
            function ce1() {
                return f12[(t110[6] | 0) + 24 >> 0] | 0 | 0;
            }
            function ne2(e47) {
                e47 = e47 | 0;
                t110[3] = e47;
                return;
            }
            function be1() {
                return (i14[589] | 0) != 0 | 0;
            }
            function ue1() {
                return t110[14] | 0;
            }
            return {
                ai: T3,
                e: ue1,
                ee: se1,
                es: fe,
                f: be1,
                id: M3,
                ie: ie2,
                ip: ce1,
                is: te2,
                p: b11,
                re: W3,
                ri: V3,
                sa: j9,
                se: ee2,
                ses: ne2,
                ss: re2,
                sta: X4
            };
        })({
            Int8Array: Int8Array,
            Int16Array: Int16Array,
            Int32Array: Int32Array,
            Uint8Array: Uint8Array,
            Uint16Array: Uint16Array
        }, {}, r5), a4 = e3.sta(2 * i4);
    }
    const oe11 = t4.length + 1;
    e3.ses(a4), e3.sa(oe11 - 1), (s3 ? b2 : n4)(t4, new Uint16Array(r5, a4, oe11)), e3.p() || (c3 = e3.e(), h3());
    const we1 = [], he = [];
    for(; e3.ri();){
        const r31 = e3.is(), a30 = e3.ie(), i20 = e3.ai(), s31 = e3.id(), f18 = e3.ss(), c13 = e3.se();
        let ke9;
        e3.ip() && (ke9 = u3(-1 === s31 ? r31 : r31 + 1, t4.charCodeAt(-1 === s31 ? r31 - 1 : r31))), we1.push({
            n: ke9,
            s: r31,
            e: a30,
            ss: f18,
            se: c13,
            d: s31,
            a: i20
        });
    }
    for(; e3.re();){
        const r32 = e3.es(), a31 = t4.charCodeAt(r32);
        he.push(34 === a31 || 39 === a31 ? u3(r32 + 1, a31) : t4.slice(e3.es(), e3.ee()));
    }
    return [
        we1,
        he,
        !!e3.f()
    ];
}
function n4(e48, r33) {
    const a32 = e48.length;
    let i21 = 0;
    for(; i21 < a32;){
        const a33 = e48.charCodeAt(i21);
        r33[i21++] = (255 & a33) << 8 | a33 >>> 8;
    }
}
function b2(e49, r34) {
    const a34 = e49.length;
    let i22 = 0;
    for(; i22 < a34;)r34[i22] = e49.charCodeAt(i22++);
}
function u3(e50, r35) {
    c3 = e50;
    let a35 = "", i23 = c3;
    for(;;){
        c3 >= t4.length && h3();
        const e51 = t4.charCodeAt(c3);
        if (e51 === r35) break;
        92 === e51 ? (a35 += t4.slice(i23, c3), a35 += k2(), i23 = c3) : (8232 === e51 || 8233 === e51 || o4(e51) && h3(), ++c3);
    }
    return a35 += t4.slice(i23, c3++), a35;
}
function k2() {
    let e52 = t4.charCodeAt(++c3);
    switch(++c3, e52){
        case 110:
            return "\n";
        case 114:
            return "\r";
        case 120:
            return String.fromCharCode(l3(2));
        case 117:
            return (function() {
                let e53;
                123 === t4.charCodeAt(c3) ? (++c3, e53 = l3(t4.indexOf("}", c3) - c3), ++c3, e53 > 1114111 && h3()) : e53 = l3(4);
                return e53 <= 65535 ? String.fromCharCode(e53) : (e53 -= 65536, String.fromCharCode(55296 + (e53 >> 10), 56320 + (1023 & e53)));
            })();
        case 116:
            return "\t";
        case 98:
            return "\b";
        case 118:
            return "\v";
        case 102:
            return "\f";
        case 13:
            10 === t4.charCodeAt(c3) && ++c3;
        case 10:
            return "";
        case 56:
        case 57:
            h3();
        default:
            if (e52 >= 48 && e52 <= 55) {
                let r36 = t4.substr(c3 - 1, 3).match(/^[0-7]+/)[0], a36 = parseInt(r36, 8);
                return a36 > 255 && (r36 = r36.slice(0, -1), a36 = parseInt(r36, 8)), c3 += r36.length - 1, e52 = t4.charCodeAt(c3), "0" === r36 && 56 !== e52 && 57 !== e52 || h3(), String.fromCharCode(a36);
            }
            return o4(e52) ? "" : String.fromCharCode(e52);
    }
}
function l3(e54) {
    const r38 = c3;
    let a37 = 0, i24 = 0;
    for(let r37 = 0; r37 < e54; ++r37, ++c3){
        let e55, s4 = t4.charCodeAt(c3);
        if (95 !== s4) {
            if (s4 >= 97) e55 = s4 - 97 + 10;
            else if (s4 >= 65) e55 = s4 - 65 + 10;
            else {
                if (!(s4 >= 48 && s4 <= 57)) break;
                e55 = s4 - 48;
            }
            if (e55 >= 16) break;
            i24 = s4, a37 = 16 * a37 + e55;
        } else 95 !== i24 && 0 !== r37 || h3(), i24 = s4;
    }
    return 95 !== i24 && c3 - r38 === e54 || h3(), a37;
}
function o4(e56) {
    return 13 === e56 || 10 === e56;
}
function h3() {
    throw Object.assign(new Error(`Parse error ${f4}:${t4.slice(0, c3).split("\n").length}:${c3 - t4.lastIndexOf("\n", c3 - 1)}`), {
        idx: c3
    });
}
let c4;
if ("undefined" !== typeof Deno) {
    const t = Deno.cwd();
    c4 = new URL("file://" + ("/" === t[0] ? "" : "/") + t + "/");
} else if ("undefined" !== typeof process && process.versions.node) c4 = new URL("file://" + process.cwd() + "/");
else if ("undefined" !== typeof document) {
    const t = document.querySelector("base[href]");
    t ? c4 = new URL(t.href + (t.href.endsWith("/") ? "" : "/")) : "undefined" !== typeof location && (c4 = new URL("../", new URL(location.href)));
}
function importedFrom(t111) {
    return t111 ? ` imported from ${t111}` : "";
}
function isURL1(t211) {
    try {
        if ("#" === t211[0]) return false;
        new URL(t211);
    } catch  {
        return false;
    }
    return true;
}
function isPlain1(t311) {
    return !isRelative1(t311) && !isURL1(t311);
}
function isRelative1(t43) {
    return t43.startsWith("./") || t43.startsWith("../") || t43.startsWith("/");
}
class JspmError extends Error {
    constructor(t5, e112){
        super(t5);
        this.jspmError = true;
        this.code = e112;
    }
}
function throwInternalError(...t6) {
    throw new Error("Internal Error" + (t6.length ? " " + t6.join(", ") : ""));
}
const { SemverRange: h4  } = e1;
const f5 = [
    "https",
    "http",
    "data",
    "file",
    "ipfs"
];
async function parseUrlTarget(t7, e23, s111) {
    var r113;
    const i15 = e23.indexOf(":");
    if (isRelative1(e23) || -1 !== i15 && f5.includes(e23.slice(0, i15))) {
        const i23 = e23.indexOf("|");
        let n113;
        if (-1 === i23) n113 = ".";
        else {
            n113 = `./${e23.slice(i23 + 1)}`;
            e23 = e23.slice(0, i23);
        }
        const a14 = new URL(e23 + (e23.endsWith("/") ? "" : "/"), s111 || c4);
        const o110 = await t7.getPackageBase(a14.href);
        const l13 = (null === (r113 = o110 ? await t7.getPackageConfig(o110) : null) || void 0 === r113 ? void 0 : r113.name) || a14.pathname.split("/").slice(0, -1).pop();
        if (!l13) throw new JspmError(`Unable to determine an alias for target package ${a14.href}`);
        return {
            alias: l13,
            target: a14,
            subpath: n113
        };
    }
}
async function toPackageTarget(t8, e32, s211) {
    const r211 = await parseUrlTarget(t8, e32, s211);
    if (r211) return r211;
    const i32 = e32.indexOf(":");
    const n212 = e32.indexOf("@");
    if (-1 !== e32.indexOf(":") && -1 !== n212 && n212 < i32) throw new Error("Package aliases not yet supported. PRs welcome.");
    const a22 = parsePkg(e32);
    if (!a22) throw new JspmError(`Invalid package name ${e32}`);
    let o22 = a22.pkgName;
    const l22 = a22.pkgName.indexOf("@", 1);
    o22 = -1 !== l22 ? a22.pkgName.slice(i32 + 1, l22) : a22.pkgName.slice(i32 + 1);
    return {
        alias: o22,
        target: newPackageTarget(a22.pkgName, s211),
        subpath: a22.subpath
    };
}
function newPackageTarget(t9, e4, r311) {
    let i42, n36, a34;
    const o31 = t9.indexOf(":");
    if (t9.startsWith("./") || t9.startsWith("../") || t9.startsWith("/") || 1 === o31) return new URL(t9, e4);
    i42 = o31 < 1 ? "npm" : t9.substr(0, o31);
    if ("file" === i42) return new URL(t9.slice(i42.length + 1), e4);
    if ("https" === i42 || "http" === i42) return new URL(t9);
    const l31 = t9.lastIndexOf("@");
    if (l31 > o31 + 1) {
        n36 = t9.slice(o31 + 1, l31);
        const e5 = t9.slice(l31 + 1);
        a34 = r311 || h4.isValid(e5) ? [
            new h4(e5)
        ] : e5.split("||").map((t10)=>f3(t10)
        );
    } else if (-1 === o31 && r311) {
        n36 = r311;
        a34 = h4.isValid(t9) ? [
            new h4(t9)
        ] : t9.split("||").map((t11)=>f3(t11)
        );
    } else {
        n36 = t9.slice(o31 + 1);
        a34 = [
            new h4("*")
        ];
    }
    -1 === o31 && -1 !== n36.indexOf("/") && "@" !== n36[0] && (i42 = "github");
    const c110 = n36.split("/").length;
    if (c110 > 2 || 1 === c110 && "@" === n36[0]) throw new JspmError(`Invalid package target ${t9}`);
    return {
        registry: i42,
        name: n36,
        ranges: a34
    };
}
function pkgToStr(t12) {
    return `${t12.registry ? t12.registry + ":" : ""}${t12.name}${t12.version ? "@" + t12.version : ""}`;
}
function parsePkg(t13) {
    let e6 = t13.indexOf("/");
    if ("@" === t13[0]) {
        if (-1 === e6) return;
        e6 = t13.indexOf("/", e6 + 1);
    }
    return -1 === e6 ? {
        pkgName: t13,
        subpath: "."
    } : {
        pkgName: t13.slice(0, e6),
        subpath: "." + t13.slice(e6)
    };
}
const u4 = new Set([
    "_http_agent",
    "_http_client",
    "_http_common",
    "_http_incoming",
    "_http_outgoing",
    "_http_server",
    "_stream_duplex",
    "_stream_passthrough",
    "_stream_readable",
    "_stream_transform",
    "_stream_wrap",
    "_stream_writable",
    "_tls_common",
    "_tls_wrap",
    "assert",
    "assert/strict",
    "async_hooks",
    "buffer",
    "child_process",
    "cluster",
    "console",
    "constants",
    "crypto",
    "dgram",
    "diagnostics_channel",
    "dns",
    "dns/promises",
    "domain",
    "events",
    "fs",
    "fs/promises",
    "http",
    "http2",
    "https",
    "inspector",
    "module",
    "net",
    "os",
    "path",
    "path/posix",
    "path/win32",
    "perf_hooks",
    "process",
    "punycode",
    "querystring",
    "readline",
    "repl",
    "stream",
    "stream/promises",
    "string_decoder",
    "sys",
    "timers",
    "timers/promises",
    "tls",
    "trace_events",
    "tty",
    "url",
    "util",
    "util/types",
    "v8",
    "vm",
    "wasi",
    "worker_threads",
    "zlib"
]);
function pkgToUrl$5(t14) {
    if ("node" !== t14.registry) throw new Error("Node a Node.js URL");
    return "node:" + t14.name;
}
function parseUrlPkg$5(t15) {
    if (t15.startsWith("node:")) return {
        registry: "node",
        name: t15.slice(5),
        version: ""
    };
}
async function getPackageConfig$1() {
    return null;
}
async function resolveLatestTarget$2() {
    throw new Error("No version resolution is provided for node:_ builtins");
}
var p3 = Object.freeze({
    __proto__: null,
    nodeBuiltinSet: u4,
    pkgToUrl: pkgToUrl$5,
    parseUrlPkg: parseUrlPkg$5,
    getPackageConfig: getPackageConfig$1,
    resolveLatestTarget: resolveLatestTarget$2
});
const d3 = "https://ga.jspm.io/";
const g3 = "https://ga.system.jspm.io/";
const m3 = "https://api.jspm.io/";
function pkgToUrl$4(t16, e7) {
    return ("system" === e7 ? g3 : d3) + pkgToStr(t16) + "/";
}
const y2 = /^(([a-z]+):)?((?:@[^/\\%@]+\/)?[^./\\%@][^/\\%@]*)@([^\/]+)(\/.*)?$/;
function parseUrlPkg$4(t17) {
    let e8;
    if (t17.startsWith(d3)) e8 = "default";
    else {
        if (!t17.startsWith(g3)) return;
        e8 = "system";
    }
    const [, , s32, r45, i5] = t17.slice(("default" === e8 ? d3 : g3).length).match(y2) || [];
    return {
        pkg: {
            registry: s32,
            name: r45,
            version: i5
        },
        layer: e8
    };
}
let U2 = {};
function clearResolveCache() {
    U2 = {};
}
async function checkBuildOrError(t18, e9) {
    const s4 = pkgToStr(t18);
    const i6 = await fetch1(`${d3}${s4}/package.json`, e9);
    if (i6.ok) return true;
    const n41 = await fetch1(`${d3}${s4}/_error.log`, e9);
    if (n41.ok) {
        const e10 = await n41.text();
        throw new JspmError(`Resolved dependency ${s4} with error:\n\n${e10}\nPlease post an issue at jspm/project on GitHub, or by following the link below:\n\nhttps://github.com/jspm/project/issues/new?title=CDN%20build%20error%20for%20${encodeURIComponent(t18.name + "@" + t18.version)}&body=_Reporting%20CDN%20Build%20Error._%0A%0A%3C!--%20%20No%20further%20description%20necessary,%20just%20click%20%22Submit%20new%20issue%22%20--%3E`);
    }
    return false;
}
async function ensureBuild(t19, e11) {
    const s5 = pkgToStr(t19);
    if (await checkBuildOrError(t19, e11)) return;
    const i7 = await fetch1(`${m3}build/${t19.name}@${t19.version}`, e11);
    if (!i7.ok && 403 !== i7.status) {
        const t20 = (await i7.json()).error;
        throw new JspmError(`Unable to request the JSPM API for a build of ${s5}, with error: ${t20}.`);
    }
    let n5 = Date.now();
    while(true){
        await new Promise((t21)=>setTimeout(t21, 5000)
        );
        if (await checkBuildOrError(t19, e11)) return;
        if (Date.now() - n5 >= 300000) throw new JspmError(`Timed out waiting for the build of ${s5} to be ready on the JSPM CDN. Try again later, or post a JSPM project issue if the issue persists.`);
    }
}
async function resolveLatestTarget$1(t22, e12, s, r52) {
    const { registry: i8 , name: n6 , range: a42  } = t22;
    if (a42.isExact && !a42.version.tag) {
        const t23 = {
            registry: i8,
            name: n6,
            version: a42.version.toString()
        };
        await ensureBuild(t23, this.fetchOpts);
        return t23;
    }
    const o41 = U2[t22.registry + ":" + t22.name] = U2[t22.registry + ":" + t22.name] || {
        latest: null,
        majors: Object.create(null),
        minors: Object.create(null),
        tags: Object.create(null)
    };
    if (a42.isWildcard) {
        let s6 = await (o41.latest || (o41.latest = lookupRange.call(this, i8, n6, "", e12, r52)));
        s6 instanceof Promise && (s6 = await s6);
        if (s6) {
            s6 instanceof Promise && throwInternalError();
            this.log("resolve", `${t22.registry}:${t22.name}@${a42} -> WILDCARD ${s6.version}${r52 ? " [" + r52 + "]" : ""}`);
            await ensureBuild(s6, this.fetchOpts);
            return s6;
        }
    } else if (a42.isExact && a42.version.tag) {
        const s7 = a42.version.tag;
        let l4 = await (o41.tags[s7] || (o41.tags[s7] = lookupRange.call(this, i8, n6, s7, e12, r52)));
        l4 instanceof Promise && (l4 = await l4);
        if (l4) {
            l4 instanceof Promise && throwInternalError();
            this.log("resolve", `${t22.registry}:${t22.name}@${a42} -> TAG ${s7}${r52 ? " [" + r52 + "]" : ""}`);
            await ensureBuild(l4, this.fetchOpts);
            return l4;
        }
    } else if (a42.isMajor) {
        const s8 = a42.version.major;
        let l5 = await (o41.majors[s8] || (o41.majors[s8] = lookupRange.call(this, i8, n6, s8, e12, r52)));
        l5 instanceof Promise && (l5 = await l5);
        if (l5) {
            l5 instanceof Promise && throwInternalError();
            this.log("resolve", `${t22.registry}:${t22.name}@${a42} -> MAJOR ${l5.version}${r52 ? " [" + r52 + "]" : ""}`);
            await ensureBuild(l5, this.fetchOpts);
            return l5;
        }
    } else if (a42.isStable) {
        const s9 = `${a42.version.major}.${a42.version.minor}`;
        let l6 = await (o41.minors[s9] || (o41.minors[s9] = lookupRange.call(this, i8, n6, s9, e12, r52)));
        l6 instanceof Promise && (l6 = await l6);
        if (l6) {
            l6 instanceof Promise && throwInternalError();
            this.log("resolve", `${t22.registry}:${t22.name}@${a42} -> MINOR ${l6.version}${r52 ? " [" + r52 + "]" : ""}`);
            await ensureBuild(l6, this.fetchOpts);
            return l6;
        }
    }
    return null;
}
function pkgToLookupUrl(t24, e13 = false) {
    return `${d3}${t24.registry}:${t24.name}${t24.version ? "@" + t24.version : e13 ? "@" : ""}`;
}
async function lookupRange(t25, e14, s10, i9, n7) {
    const a5 = await fetch1(pkgToLookupUrl({
        registry: t25,
        name: e14,
        version: s10
    }, i9), this.fetchOpts);
    switch(a5.status){
        case 304:
        case 200:
            return {
                registry: t25,
                name: e14,
                version: (await a5.text()).trim()
            };
        case 404:
            return null;
        default:
            throw new JspmError(`Invalid status code ${a5.status} looking up "${t25}:${e14}" - ${a5.statusText}${importedFrom(n7)}`);
    }
}
var k3 = Object.freeze({
    __proto__: null,
    pkgToUrl: pkgToUrl$4,
    parseUrlPkg: parseUrlPkg$4,
    clearResolveCache: clearResolveCache,
    resolveLatestTarget: resolveLatestTarget$1
});
const { Semver: b3 , SemverRange: $2  } = e1;
function addInstalledRange(t27, e15, s11, r6) {
    const i10 = getInstalledRanges(t27, r6);
    for (const t262 of i10)if (t262.name === e15 && t262.pkgUrl === s11) return;
    i10.push({
        name: e15,
        pkgUrl: s11,
        target: r6
    });
}
function getInstalledRanges(t28, e) {
    return t28[e.registry + ":" + e.name] = t28[e.registry + ":" + e.name] || [];
}
function pruneResolutions(t29, e16) {
    const s12 = {};
    for (const [r, i] of e16){
        const e17 = t29[i][r];
        s12[i] = s12[i] || {};
        s12[i][r] = e17;
    }
    return s12;
}
function getResolution(t30, e, s13) {
    s13.endsWith("/") || throwInternalError(s13);
    t30[s13] = t30[s13] || {};
    return t30[s13][e];
}
function stringResolution(t31, e18) {
    t31.endsWith("/") || throwInternalError(t31);
    return e18 ? t31.slice(0, -1) + "|" + e18 : t31;
}
function setResolution(t32, e, s14, r7, i11) {
    s14.endsWith("/") || throwInternalError(s14);
    t32[s14] = t32[s14] || {};
    const n8 = stringResolution(r7, i11);
    if (t32[s14][e] === n8) return false;
    t32[s14][e] = n8;
    return true;
}
class Installer {
    constructor(t33, e19, s15, r8){
        this.installedRanges = {};
        this.installing = false;
        this.newInstalls = false;
        this.currentInstall = Promise.resolve();
        this.added = new Map;
        this.hasLock = false;
        this.defaultProvider = {
            provider: "jspm",
            layer: "default"
        };
        this.log = s15;
        this.resolver = r8;
        this.resolutions = e19.resolutions || {};
        this.installBaseUrl = t33.href;
        this.opts = e19;
        let i12 = {};
        e19.lock && ({ resolutions: i12 , exists: this.hasLock  } = e19.lock);
        e19.defaultProvider && (this.defaultProvider = {
            provider: e19.defaultProvider.split(".")[0],
            layer: e19.defaultProvider.split(".")[1] || "default"
        });
        this.providers = e19.providers || {};
        this.installs = i12;
        if (e19.stdlib) if (isURL1(e19.stdlib) || "." === e19.stdlib[0]) {
            this.stdlibTarget = new URL(e19.stdlib, t33);
            this.stdlibTarget.href.endsWith("/") && (this.stdlibTarget.pathname = this.stdlibTarget.pathname.slice(0, -1));
        } else this.stdlibTarget = newPackageTarget(e19.stdlib, this.installBaseUrl);
    }
    async startInstall() {
        if (this.installing) return this.currentInstall.then(()=>this.startInstall()
        );
        let t34;
        this.installing = true;
        this.newInstalls = false;
        this.added = new Map;
        this.currentInstall = new Promise((e20)=>{
            t34 = async (t35)=>{
                if (!t35) {
                    this.installing = false;
                    e20();
                    return false;
                }
                this.installing = false;
                e20();
                return {
                    pjsonChanged: false,
                    lock: this.installs
                };
            };
        });
        return t34;
    }
    async lockInstall(t36, e21 = this.installBaseUrl, s16 = true) {
        const r9 = new Set;
        const visitInstall = async (t37, e22)=>{
            if (r9.has(t37 + "##" + e22)) return;
            r9.add(t37 + "##" + e22);
            const s17 = await this.install(t37, e22);
            const i13 = s17.split("|")[0] + (-1 === s17.indexOf("|") ? "" : "/");
            const n9 = await this.resolver.getDepList(i13);
            const a6 = Object.keys(this.installs[i13] || {});
            await Promise.all([
                ...new Set([
                    ...n9,
                    ...a6
                ])
            ].map((t38)=>visitInstall(t38, i13)
            ));
        };
        await Promise.all(t36.map((t39)=>visitInstall(t39, e21)
        ));
        if (s16) {
            const t40 = [
                ...r9
            ].map((t42)=>{
                const [e23, s18] = t42.split("##");
                return [
                    e23,
                    s18
                ];
            });
            this.installs = pruneResolutions(this.installs, t40);
        }
    }
    replace(t44, e24, s19) {
        let r10;
        if (t44 instanceof URL) r10 = t44.href;
        else {
            const i14 = this.getBestMatch(t44);
            if (!i14) {
                if (this.installs[e24]) return false;
                throw new Error("No installation found to replace.");
            }
            r10 = this.resolver.pkgToUrl(i14, s19);
        }
        let i15 = false;
        for (const t43 of Object.keys(this.installs)){
            for (const s of Object.keys(this.installs[t43]))if (this.installs[t43][s] === r10) {
                this.installs[t43][s] = e24;
                i15 = true;
            }
            if (t43 === r10) {
                this.installs[e24] = this.installs[t43];
                delete this.installs[t43];
                i15 = true;
            }
        }
        return i15;
    }
    async installTarget(t46, e25, s20, r11, i16, n10) {
        if (this.opts.freeze) throw new JspmError(`"${t46}" is not installed in the jspm lockfile, imported from ${n10}.`, "ERR_NOT_INSTALLED");
        r11 && (s20 === this.installBaseUrl && s20.startsWith("file:") ? this.added.set(t46, e25) : this.log("info", `Package ${t46} not declared in package.json dependencies${importedFrom(n10)}.`));
        if (e25 instanceof URL) {
            this.log("install", `${t46} ${s20} -> ${e25.href}`);
            const r12 = e25.href + (e25.href.endsWith("/") ? "" : "/");
            this.newInstalls = setResolution(this.installs, t46, s20, r12, i16);
            return stringResolution(r12, i16);
        }
        let a7 = this.defaultProvider;
        for (const t45 of Object.keys(this.providers))if (e25.name.startsWith(t45) && (e25.name.length === t45.length || "/" === e25.name[t45.length])) {
            a7 = {
                provider: this.providers[t45],
                layer: "default"
            };
            const e26 = a7.provider.indexOf(".");
            if (-1 !== e26) {
                a7.layer = a7.provider.slice(e26 + 1);
                a7.provider = a7.provider.slice(0, e26);
            }
            break;
        }
        if (this.opts.freeze) {
            const r13 = this.getBestMatch(e25);
            if (r13) {
                this.log("install", `${t46} ${s20} -> ${r13.registry}:${r13.name}@${r13.version}`);
                const n11 = this.resolver.pkgToUrl(r13, a7);
                this.newInstalls = setResolution(this.installs, t46, s20, n11, i16);
                addInstalledRange(this.installedRanges, t46, s20, e25);
                return stringResolution(n11, i16);
            }
        }
        const o5 = await this.resolver.resolveLatestTarget(e25, false, a7, n10);
        const l7 = getInstalledRanges(this.installedRanges, e25);
        const c23 = this.tryUpgradePackagesTo(o5, e25, l7, a7);
        if (c23 && !this.opts.latest) {
            c23 instanceof URL ? this.log("install", `${t46} ${s20} -> ${c23.href}`) : this.log("install", `${t46} ${s20} -> ${c23.registry}:${c23.name}@${c23.version}`);
            const r14 = c23 instanceof URL ? c23.href : this.resolver.pkgToUrl(c23, a7);
            this.newInstalls = setResolution(this.installs, t46, s20, r14, i16);
            addInstalledRange(this.installedRanges, t46, s20, e25);
            return stringResolution(r14, i16);
        }
        this.log("install", `${t46} ${s20} -> ${o5.registry}:${o5.name}@${o5.version}`);
        const h12 = this.resolver.pkgToUrl(o5, a7);
        this.newInstalls = setResolution(this.installs, t46, s20, h12, i16);
        addInstalledRange(this.installedRanges, t46, s20, e25);
        return stringResolution(h12, i16);
    }
    async install(t47, e27, s22 = true, r15 = this.installBaseUrl) {
        var i17, n12, a8, o6, l8, c32;
        this.installing || throwInternalError("Not installing");
        if (!this.opts.reset) {
            const s21 = null === (i17 = this.installs[e27]) || void 0 === i17 ? void 0 : i17[t47];
            if (s21 && !this.opts.reset) return s21;
        }
        if (this.resolutions[t47]) return this.installTarget(t47, newPackageTarget(this.resolutions[t47], this.opts.baseUrl.href, t47), e27, false, null, r15);
        const h21 = await this.resolver.getPackageConfig(e27) || {};
        if (s22 && u4.has(t47)) return this.installTarget(t47, this.stdlibTarget, e27, false, "nodelibs/" + t47, r15);
        const f13 = (null === (n12 = h21.dependencies) || void 0 === n12 ? void 0 : n12[t47]) || (null === (a8 = h21.peerDependencies) || void 0 === a8 ? void 0 : a8[t47]) || (null === (o6 = h21.optionalDependencies) || void 0 === o6 ? void 0 : o6[t47]) || e27 === this.installBaseUrl && (null === (l8 = h21.devDependencies) || void 0 === l8 ? void 0 : l8[t47]);
        if (f13) {
            const s23 = newPackageTarget(f13, e27, t47);
            return this.installTarget(t47, s23, e27, false, null, r15);
        }
        if (null === (c32 = this.installs[this.installBaseUrl]) || void 0 === c32 ? void 0 : c32[t47]) return this.installs[this.installBaseUrl][t47];
        const p110 = newPackageTarget("*", e27, t47);
        const d11 = await this.installTarget(t47, p110, e27, true, null, r15);
        return d11;
    }
    getBestMatch(t48) {
        let e28 = null;
        for (const s24 of Object.keys(this.installs)){
            const r16 = this.resolver.parseUrlPkg(s24);
            r16 && this.inRange(r16.pkg, t48) && (e28 = e28 ? -1 === b3.compare(new b3(e28.version), r16.pkg.version) ? r16.pkg : e28 : r16.pkg);
        }
        return e28;
    }
    inRange(t49, e29) {
        return t49.registry === e29.registry && t49.name === e29.name && e29.ranges.some((e30)=>e30.has(t49.version, true)
        );
    }
    tryUpgradePackagesTo(t51, e32, s25, r18) {
        if (this.opts.freeze) return;
        const i20 = new b3(t51.version);
        let n13 = true;
        for (const { target: t50  } of s25)t50.ranges.every((t52)=>!t52.has(i20)
        ) && (n13 = false);
        if (n13) for (const { name: e31 , pkgUrl: i18  } of s25){
            const [s26, n14] = getResolution(this.installs, e31, i18).split("|");
            const a9 = parseUrlPkg$4(s26);
            if (a9) {
                const { pkg: { version: a10  }  } = parseUrlPkg$4(s26);
                a10 !== t51.version && (this.newInstalls = setResolution(this.installs, e31, i18, this.resolver.pkgToUrl(t51, r18), n14));
            } else this.newInstalls = setResolution(this.installs, e31, i18, s26, n14);
        }
        else for (const { name: r17 , pkgUrl: i19  } of s25){
            const s27 = getResolution(this.installs, r17, i19).split("|")[0];
            const n15 = parseUrlPkg$4(s27);
            if (!n15) return new URL(s27.endsWith("/") ? s27 : s27 + "/");
            {
                const { pkg: { version: r19  }  } = parseUrlPkg$4(s27);
                if (e32.ranges.some((t53)=>t53.has(r19)
                )) return {
                    registry: t51.registry,
                    name: t51.name,
                    version: r19
                };
            }
        }
    }
}
const R3 = "https://cdn.skypack.dev/";
function pkgToUrl$3(t54) {
    return R3 + t54.name + "@" + t54.version + "/";
}
const P2 = /^((?:@[^/\\%@]+\/)?[^./\\%@][^/\\%@]*)@([^\/]+)(\/.*)?$/;
function parseUrlPkg$3(t55) {
    if (!t55.startsWith(R3)) return;
    const [, e33, s28] = t55.slice(R3.length).match(P2) || [];
    return {
        registry: "npm",
        name: e33,
        version: s28
    };
}
var L2 = Object.freeze({
    __proto__: null,
    pkgToUrl: pkgToUrl$3,
    parseUrlPkg: parseUrlPkg$3,
    resolveLatestTarget: resolveLatestTarget$1
});
const T2 = "https://cdn.jsdelivr.net/";
function pkgToUrl$2(t56) {
    return T2 + t56.registry + "/" + t56.name + "@" + t56.version + "/";
}
const j2 = /^([^\/]+)\/((?:@[^/\\%@]+\/)?[^./\\%@][^/\\%@]*)@([^\/]+)(\/.*)?$/;
function parseUrlPkg$2(t57) {
    if (!t57.startsWith(T2)) return;
    const [, e34, s29, r20] = t57.slice(T2.length).match(j2) || [];
    return {
        registry: e34,
        name: s29,
        version: r20
    };
}
var E2 = Object.freeze({
    __proto__: null,
    pkgToUrl: pkgToUrl$2,
    parseUrlPkg: parseUrlPkg$2,
    resolveLatestTarget: resolveLatestTarget$1
});
const x2 = "https://unpkg.com/";
function pkgToUrl$1(t58) {
    return x2 + t58.name + "@" + t58.version + "/";
}
const S3 = /^((?:@[^/\\%@]+\/)?[^./\\%@][^/\\%@]*)@([^\/]+)(\/.*)?$/;
function parseUrlPkg$1(t59) {
    if (!t59.startsWith(x2)) return;
    const [, e35, s30] = t59.slice(x2.length).match(S3) || [];
    return {
        registry: "npm",
        name: e35,
        version: s30
    };
}
var O2 = Object.freeze({
    __proto__: null,
    pkgToUrl: pkgToUrl$1,
    parseUrlPkg: parseUrlPkg$1,
    resolveLatestTarget: resolveLatestTarget$1
});
function pkgToUrl(t60) {
    return new URL(t60.version + t60.name + "/").href;
}
function parseUrlPkg(t61) {
    const e36 = t61.lastIndexOf("/node_modules/");
    if (-1 === e36) return;
    const s31 = t61.slice(0, e36 + 14);
    const r21 = t61.slice(e36 + 14).split("/");
    const i21 = "@" === r21[0][0] ? r21[0] + "/" + r21[1] : r21[0];
    return {
        registry: "node_modules",
        name: i21,
        version: s31
    };
}
async function dirExists(t62, e37) {
    const s32 = await fetch1(t62, this.fetchOpts);
    switch(s32.status){
        case 304:
        case 200:
            return true;
        case 404:
            return false;
        default:
            throw new JspmError(`Invalid status code ${s32.status} looking up "${t62}" - ${s32.statusText}${importedFrom(e37)}`);
    }
}
async function resolveLatestTarget(t63, e, s, r22) {
    let i22 = new URL(`node_modules/${t63.name}`, r22);
    const n16 = new URL(`/node_modules/${t63.name}`, r22).href;
    while(!await dirExists.call(this, i22)){
        if (i22.href === n16) return null;
        i22 = new URL(`../../${-1 === t63.name.indexOf("/") ? "" : "../"}node_modules/${t63.name}`, i22);
    }
    return {
        registry: "node_modules",
        name: t63.name,
        version: i22.href.slice(0, -t63.name.length)
    };
}
var I2 = Object.freeze({
    __proto__: null,
    pkgToUrl: pkgToUrl,
    parseUrlPkg: parseUrlPkg,
    resolveLatestTarget: resolveLatestTarget
});
const D2 = {
    jsdelivr: E2,
    jspm: k3,
    node: p3,
    nodemodules: I2,
    skypack: L2,
    unpkg: O2
};
function getProvider(t64, e38 = D2) {
    const s33 = e38[t64];
    if (s33) return s33;
    throw new Error("No " + t64 + " provider is defined.");
}
let _2, M2;
const C2 = globalThis.console;
const W2 = {
    log () {},
    warn () {},
    memory () {},
    assert () {},
    clear () {},
    count () {},
    countReset () {},
    debug () {},
    dir () {},
    dirxml () {},
    error () {},
    exception () {},
    group () {},
    groupCollapsed () {},
    groupEnd () {},
    info () {},
    table () {},
    time () {},
    timeEnd () {},
    timeLog () {},
    timeStamp () {},
    trace () {}
};
async function createTsAnalysis(t65, e39) {
    _2 || ([{ default: _2  }, { default: { default: M2  }  }] = await Promise.all([
        import("@babel/core"),
        import("@babel/preset-typescript")
    ]));
    const s34 = new Set;
    const r23 = new Set;
    globalThis.console = W2;
    try {
        _2.transform(t65, {
            filename: "/" + e39,
            ast: false,
            sourceMaps: false,
            inputSourceMap: false,
            babelrc: false,
            babelrcRoots: false,
            configFile: false,
            highlightCode: false,
            compact: false,
            sourceType: "module",
            parserOpts: {
                plugins: [
                    "jsx"
                ],
                errorRecovery: true
            },
            presets: [
                [
                    M2,
                    {
                        onlyRemoveTypeImports: true
                    }
                ]
            ],
            plugins: [
                ({ types: t66  })=>({
                        visitor: {
                            ExportAllDeclaration (t67) {
                                s34.add(t67.node.source.value);
                            },
                            ExportNamedDeclaration (t68) {
                                t68.node.source && s34.add(t68.node.source.value);
                            },
                            ImportDeclaration (t69) {
                                s34.add(t69.node.source.value);
                            },
                            Import (t70) {
                                r23.add(buildDynamicString$1(t70.parentPath.get("arguments.0").node, e39, true));
                            },
                            MetaProperty (e40) {
                                t66.isIdentifier(e40.node.meta, {
                                    name: "import"
                                }) && t66.isIdentifier(e40.node.property, {
                                    name: "meta"
                                }) && true;
                            }
                        }
                    })
            ]
        });
    } finally{
        globalThis.console = C2;
    }
    return {
        deps: [
            ...s34
        ],
        dynamicDeps: [
            ...r23
        ],
        cjsLazyDeps: null,
        size: t65.length,
        format: "typescript"
    };
}
function buildDynamicString$1(t71, e41, s35 = false, r24 = false) {
    if ("StringLiteral" === t71.type) return t71.value;
    if ("TemplateLiteral" === t71.type) {
        let i24 = "";
        for(let n17 = 0; n17 < t71.quasis.length; n17++){
            const a11 = t71.quasis[n17].value.cooked;
            if (a11.length) {
                i24 += a11;
                r24 = false;
            }
            const o7 = t71.expressions[n17];
            if (o7) {
                const t72 = buildDynamicString$1(o7, e41, s35, r24);
                if (t72.length) {
                    r24 = t72.endsWith("*");
                    i24 += t72;
                }
            }
        }
        return i24;
    }
    if ("BinaryExpression" === t71.type && "+" === t71.operator) {
        const i25 = buildDynamicString$1(t71.left, e41, s35, r24);
        i25.length && (r24 = i25.endsWith("*"));
        const n18 = buildDynamicString$1(t71.right, e41, s35, r24);
        return i25 + n18;
    }
    if (s35 && "Identifier" === t71.type) {
        if ("__dirname" === t71.name) return ".";
        if ("__filename" === t71.name) return "./" + e41;
    }
    return r24 ? "" : "*";
}
let A2;
async function createCjsAnalysis(t73, e42, s36) {
    A2 || ({ default: A2  } = await import("@babel/core"));
    const r25 = new Set;
    const i26 = new Set;
    A2.transform(e42, {
        ast: false,
        sourceMaps: false,
        inputSourceMap: false,
        babelrc: false,
        babelrcRoots: false,
        configFile: false,
        highlightCode: false,
        compact: false,
        sourceType: "script",
        parserOpts: {
            allowReturnOutsideFunction: true,
            errorRecovery: true
        },
        plugins: [
            ({ types: t74  })=>({
                    visitor: {
                        Program (t, e43) {
                            e43.functionDepth = 0;
                        },
                        CallExpression (e44, n19) {
                            if (t74.isIdentifier(e44.node.callee, {
                                name: "require"
                            }) || t74.isIdentifier(e44.node.callee.object, {
                                name: "require"
                            }) && t74.isIdentifier(e44.node.callee.property, {
                                name: "resolve"
                            }) || t74.isMemberExpression(e44.node.callee) && t74.isIdentifier(e44.node.callee.object, {
                                name: "module"
                            }) && t74.isIdentifier(e44.node.callee.property, {
                                name: "require"
                            })) {
                                const t75 = buildDynamicString(e44.get("arguments.0").node, s36);
                                r25.add(t75);
                                n19.functionDepth > 0 && i26.add(t75);
                            }
                        },
                        Scope: {
                            enter (e45, s37) {
                                t74.isFunction(e45.scope.block) && s37.functionDepth++;
                            },
                            exit (e46, s38) {
                                t74.isFunction(e46.scope.block) && s38.functionDepth--;
                            }
                        }
                    }
                })
        ]
    });
    return {
        deps: [
            ...r25
        ],
        dynamicDeps: t73.filter((t76)=>t76.n
        ).map((t77)=>t77.n
        ),
        cjsLazyDeps: [
            ...i26
        ],
        size: e42.length,
        format: "commonjs"
    };
}
function buildDynamicString(t78, e47, s39 = false, r26 = false) {
    if ("StringLiteral" === t78.type) return t78.value;
    if ("TemplateLiteral" === t78.type) {
        let i27 = "";
        for(let n20 = 0; n20 < t78.quasis.length; n20++){
            const a12 = t78.quasis[n20].value.cooked;
            if (a12.length) {
                i27 += a12;
                r26 = false;
            }
            const o8 = t78.expressions[n20];
            if (o8) {
                const t79 = buildDynamicString(o8, e47, s39, r26);
                if (t79.length) {
                    r26 = t79.endsWith("*");
                    i27 += t79;
                }
            }
        }
        return i27;
    }
    if ("BinaryExpression" === t78.type && "+" === t78.operator) {
        const i28 = buildDynamicString(t78.left, e47, s39, r26);
        i28.length && (r26 = i28.endsWith("*"));
        const n21 = buildDynamicString(t78.right, e47, s39, r26);
        return i28 + n21;
    }
    if ("Identifier" === t78.type) {
        if ("__dirname" === t78.name) return ".";
        if ("__filename" === t78.name) return "./" + e47;
    }
    return r26 ? "" : "*";
}
function createEsmAnalysis(t80, e48, s) {
    if (!t80.length && N2.test(e48)) return createSystemAnalysis(e48, t80);
    const r27 = [];
    const i29 = [];
    for (const s40 of t80)if (-1 !== s40.d) {
        if (s40.d >= 0) {
            const t81 = e48.slice(s40.s, s40.e);
            if (t81.startsWith('"') || t81.startsWith("'")) try {
                i29.push(JSON.parse('"' + t81.slice(1, -1) + '"'));
            } catch (t) {
                console.warn("TODO: Dynamic import custom expression tracing.");
            }
        }
    } else r27.push(e48.slice(s40.s, s40.e));
    const n22 = e48.length;
    return {
        deps: r27,
        dynamicDeps: i29,
        cjsLazyDeps: null,
        size: n22,
        format: "esm"
    };
}
const N2 = /^\s*(\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*)*\s*System\s*\.\s*register\s*\(\s*(\[[^\]]*\])\s*,\s*\(?function\s*\(\s*([^\),\s]+\s*(,\s*([^\),\s]+)\s*)?\s*)?\)/;
function createSystemAnalysis(t82, e49, s) {
    const [, , , r28, , , i30] = t82.match(N2) || [];
    if (!r28) return createEsmAnalysis(e49, t82);
    const n24 = JSON.parse(r28.replace(/'/g, '"'));
    const a13 = [];
    if (i30) {
        const e50 = `${i30}.import(`;
        let s41 = -1;
        while(-1 !== (s41 = t82.indexOf(e50, s41 + 1))){
            const r29 = s41 + e50.length + 1;
            const i31 = t82[s41 + e50.length];
            if ('"' === i31 || "'" === i31) {
                const n23 = t82.indexOf(i31, s41 + e50.length + 1);
                if (-1 !== n23) try {
                    a13.push(JSON.parse('"' + t82.slice(r29, n23) + '"'));
                    continue;
                } catch (t) {}
            }
            console.warn("TODO: Dynamic import custom expression tracing.");
        }
    }
    const o9 = t82.length;
    return {
        deps: n24,
        dynamicDeps: a13,
        cjsLazyDeps: null,
        size: o9,
        format: "system"
    };
}
let z2, J2;
class Resolver {
    constructor(t83, e51, s42 = false){
        this.pcfgPromises = Object.create(null);
        this.pcfgs = Object.create(null);
        this.preserveSymlinks = false;
        this.providers = D2;
        this.log = t83;
        this.fetchOpts = e51;
        this.preserveSymlinks = s42;
    }
    addCustomProvider(t84, e52) {
        if (!e52.pkgToUrl) throw new Error('Custom provider "' + t84 + '" must define a "pkgToUrl" method.');
        if (!e52.parseUrlPkg) throw new Error('Custom provider "' + t84 + '" must define a "parseUrlPkg" method.');
        if (!e52.resolveLatestTarget) throw new Error('Custom provider "' + t84 + '" must define a "resolveLatestTarget" method.');
        this.providers = Object.assign({}, this.providers, {
            [t84]: e52
        });
    }
    parseUrlPkg(t85) {
        for (const e53 of Object.keys(this.providers)){
            const s43 = this.providers[e53];
            const r30 = s43.parseUrlPkg.call(this, t85);
            if (r30) return {
                pkg: "pkg" in r30 ? r30.pkg : r30,
                source: {
                    provider: e53,
                    layer: "layer" in r30 ? r30.layer : "default"
                }
            };
        }
        return null;
    }
    pkgToUrl(t86, { provider: e54 , layer: s44  }) {
        return getProvider(e54, this.providers).pkgToUrl.call(this, t86, s44);
    }
    async getPackageBase(t87) {
        const e55 = this.parseUrlPkg(t87);
        if (e55) return this.pkgToUrl(e55.pkg, e55.source);
        let s45;
        try {
            s45 = new URL("./", t87);
        } catch  {
            return t87;
        }
        const r31 = new URL("/", s45).href;
        do {
            let e56;
            if (e56 = await this.checkPjson(s45.href)) return new URL(".", e56).href;
            if (s45.href === r31) return new URL("./", t87).href;
        }while (s45 = new URL("../", s45))
    }
    async getPackageConfig(t88) {
        if (!t88.startsWith("file:") && !t88.startsWith("http:") && !t88.startsWith("https:") && !t88.startsWith("ipfs:")) return null;
        if (!t88.endsWith("/")) throw new Error(`Internal Error: Package URL must end in "/". Got ${t88}`);
        let e57 = this.pcfgs[t88];
        if (e57) return e57;
        this.pcfgPromises[t88] || (this.pcfgPromises[t88] = (async ()=>{
            var e58, s47;
            const i32 = this.parseUrlPkg(t88);
            if (i32) {
                const s46 = await (null === (e58 = getProvider(i32.source.provider, this.providers).getPackageConfig) || void 0 === e58 ? void 0 : e58.call(this, t88));
                if (void 0 !== s46) {
                    this.pcfgs[t88] = s46;
                    return;
                }
            }
            const n25 = await fetch1(`${t88}package.json`, this.fetchOpts);
            switch(n25.status){
                case 200:
                case 304:
                    break;
                case 401:
                case 403:
                case 404:
                case 406:
                    this.pcfgs[t88] = null;
                    return;
                default:
                    throw new JspmError(`Invalid status code ${n25.status} reading package config for ${t88}. ${n25.statusText}`);
            }
            if (n25.headers && !(null === (s47 = n25.headers.get("Content-Type")) || void 0 === s47 ? void 0 : s47.match(/^application\/json(;|$)/))) this.pcfgs[t88] = null;
            else try {
                this.pcfgs[t88] = await n25.json();
            } catch (e) {
                this.pcfgs[t88] = null;
            }
        })());
        await this.pcfgPromises[t88];
        return this.pcfgs[t88];
    }
    async getDepList(t89, e59 = false) {
        const s48 = await this.getPackageConfig(t89);
        return s48 ? [
            ...new Set([
                Object.keys(s48.dependencies || {}),
                Object.keys(e59 && s48.devDependencies || {}),
                Object.keys(s48.peerDependencies || {}),
                Object.keys(s48.optionalDependencies || {}),
                Object.keys(s48.imports || {})
            ].flat())
        ] : [];
    }
    async checkPjson(t90) {
        return null !== await this.getPackageConfig(t90) && t90;
    }
    async exists(t91) {
        const e60 = await fetch1(t91, this.fetchOpts);
        switch(e60.status){
            case 200:
            case 304:
                return true;
            case 404:
            case 406:
                return false;
            default:
                throw new JspmError(`Invalid status code ${e60.status} loading ${t91}. ${e60.statusText}`);
        }
    }
    async resolveLatestTarget(t92, e62, { provider: s49 , layer: r32  }, i33) {
        let n26;
        for (const e61 of t92.ranges.sort(t92.ranges[0].constructor.compare))n26 ? e61.gt(n26) && !n26.contains(e61) && (n26 = e61) : n26 = e61;
        const a14 = {
            registry: t92.registry,
            name: t92.name,
            range: n26
        };
        const o10 = await getProvider(s49, this.providers).resolveLatestTarget.call(this, a14, e62, r32, i33);
        if (o10) return o10;
        throw new JspmError(`Unable to resolve package ${a14.registry}:${a14.name} to "${a14.range}"${importedFrom(i33)}`);
    }
    async wasCommonJS(t93) {
        var e63;
        const s50 = await this.getPackageBase(t93);
        if (!s50) return false;
        const r33 = await this.getPackageConfig(s50);
        if (!r33) return false;
        const i = "./" + t93.slice(s50.length);
        return !!(null === (e63 = null === r33 || void 0 === r33 ? void 0 : r33.exports) || void 0 === e63 ? void 0 : e63[i + "!cjs"]);
    }
    async realPath(t94) {
        if (!t94.startsWith("file:") || this.preserveSymlinks) return t94;
        let e64 = false;
        t94 = t94.replace(/%3a/i, ()=>{
            e64 = true;
            return ":";
        });
        z2 || ([{ realpath: z2  }, { pathToFileURL: J2  }] = await Promise.all([
            import("fs"),
            import("url")
        ]));
        const s51 = J2(await new Promise((e65, s52)=>z2(new URL(t94), (t95, r34)=>t95 ? s52(t95) : e65(r34)
            )
        )).href;
        return e64 ? s51.replace(":", "%3a") : s51;
    }
    async finalizeResolve(t96, e66, s53, r35, i34) {
        e66 && t96.endsWith("/") && (t96 = t96.slice(0, -1));
        e66 && (t96 = await (async ()=>{
            if (await this.exists(t96 + "/package.json")) {
                const n27 = await this.getPackageConfig(t96) || {};
                return s53.includes("browser") && "string" === typeof n27.browser ? this.finalizeResolve(await legacyMainResolve.call(this, n27.browser, new URL(t96)), e66, s53, r35, i34) : s53.includes("module") && "string" === typeof n27.module ? this.finalizeResolve(await legacyMainResolve.call(this, n27.module, new URL(t96)), e66, s53, r35, i34) : "string" === typeof n27.main ? this.finalizeResolve(await legacyMainResolve.call(this, n27.main, new URL(t96)), e66, s53, r35, i34) : this.finalizeResolve(await legacyMainResolve.call(this, null, new URL(t96)), e66, s53, r35, i34);
            }
            return await this.exists(t96 + "/index.js") ? t96 + "/index.js" : await this.exists(t96 + "/index.json") ? t96 + "/index.json" : await this.exists(t96 + "/index.node") ? t96 + "/index.node" : await this.exists(t96) ? t96 : await this.exists(t96 + ".js") ? t96 + ".js" : await this.exists(t96 + ".json") ? t96 + ".json" : await this.exists(t96 + ".node") ? t96 + ".node" : t96;
        })());
        if (s53.includes("browser")) {
            i34 = i34 || await this.getPackageBase(t96);
            if (t96.startsWith(i34)) {
                const n28 = await this.getPackageConfig(i34);
                if (n28 && "object" === typeof n28.browser && null !== n28.browser) {
                    const a15 = "./" + t96.slice(i34.length);
                    if (n28.browser[a15]) {
                        const o11 = n28.browser[a15];
                        if (false === o11) throw new Error(`TODO: Empty browser map for ${a15} in ${t96}`);
                        if (!o11.startsWith("./")) throw new Error(`TODO: External browser map for ${a15} to ${o11} in ${t96}`);
                        return await this.finalizeResolve(i34 + o11.slice(2), e66, s53, r35, i34);
                    }
                }
            }
        }
        if (t96.startsWith("node:")) {
            const n29 = await r35.installTarget(t96.slice(5), r35.stdlibTarget, i34, false, "nodelibs/" + t96.slice(5), i34);
            let [a16, o12] = n29.split("|");
            a16.endsWith("/") || (a16 += "/");
            o12 = o12.length ? "./" + o12 : ".";
            return this.finalizeResolve(await this.resolveExport(a16, o12, s53, e66, t96, r35, new URL(i34)), e66, s53, r35, a16);
        }
        return t96;
    }
    async resolveExport(t97, e67, s54, r36, i35, a17, o13) {
        const l9 = await this.getPackageConfig(t97) || {};
        function throwExportNotDefined() {
            throw new JspmError(`No '${e67}' exports subpath defined in ${t97} resolving ${i35}${importedFrom(o13)}.`, "MODULE_NOT_FOUND");
        }
        if (void 0 === l9.exports || null === l9.exports) return "." === e67 || r36 && "./" === e67 ? s54.includes("browser") && "string" === typeof l9.browser ? this.finalizeResolve(await legacyMainResolve.call(this, l9.browser, new URL(t97), i35, t97), r36, s54, a17, t97) : s54.includes("module") && "string" === typeof l9.module ? this.finalizeResolve(await legacyMainResolve.call(this, l9.module, new URL(t97), i35, t97), r36, s54, a17, t97) : "string" === typeof l9.main ? this.finalizeResolve(await legacyMainResolve.call(this, l9.main, new URL(t97), i35, t97), r36, s54, a17, t97) : this.finalizeResolve(await legacyMainResolve.call(this, null, new URL(t97), i35, t97), r36, s54, a17, t97) : this.finalizeResolve(new URL(e67, new URL(t97)).href, r36, s54, a17, t97);
        {
            function allDotKeys(t98) {
                for(let e68 in t98)if ("." !== e68[0]) return false;
                return true;
            }
            if ("string" === typeof l9.exports) {
                if ("." === e67) return this.finalizeResolve(new URL(l9.exports, t97).href, r36, s54, a17, t97);
                throwExportNotDefined();
            } else if (allDotKeys(l9.exports)) {
                const i36 = getMapMatch(e67, l9.exports);
                if (i36) {
                    const n30 = resolvePackageTarget(l9.exports[i36], t97, s54, e67.slice(i36.length - (i36.endsWith("*") ? 1 : 0)));
                    null === n30 && throwExportNotDefined();
                    return this.finalizeResolve(n30, r36, s54, a17, t97);
                }
                throwExportNotDefined();
            } else {
                if ("." === e67) return this.finalizeResolve(resolvePackageTarget(l9.exports, t97, s54, ""), r36, s54, a17, t97);
                throwExportNotDefined();
            }
        }
    }
    async analyze(t99, e69, s55, i37, n31 = true) {
        var a18, o14;
        const c41 = await fetch1(t99, this.fetchOpts);
        switch(c41.status){
            case 200:
            case 304:
                break;
            case 404:
                throw new JspmError(`Module not found: ${t99}${importedFrom(e69)}`, "MODULE_NOT_FOUND");
            default:
                throw new JspmError(`Invalid status code ${c41.status} loading ${t99}. ${c41.statusText}`);
        }
        let h31 = await c41.text();
        try {
            if (t99.endsWith(".ts") || t99.endsWith(".tsx") || t99.endsWith(".jsx")) return await createTsAnalysis(h31, t99);
            if (t99.endsWith(".json")) try {
                JSON.parse(h31);
                return {
                    deps: [],
                    dynamicDeps: [],
                    cjsLazyDeps: null,
                    size: h31.length,
                    format: "json"
                };
            } catch  {}
            const [e70, r37] = parse5(h31);
            if (e70.every((t100)=>t100.d > 0
            ) && !r37.length && t99.startsWith("file:")) {
                if (i37) {
                    if (!(t99.endsWith(".mjs") || t99.endsWith(".js") && "module" === (null === (a18 = await this.getPackageConfig(await this.getPackageBase(t99))) || void 0 === a18 ? void 0 : a18.type))) return createCjsAnalysis(e70, h31, t99);
                } else if (t99.endsWith(".cjs") || t99.endsWith(".js") && "module" !== (null === (o14 = await this.getPackageConfig(await this.getPackageBase(t99))) || void 0 === o14 ? void 0 : o14.type)) return createCjsAnalysis(e70, h31, t99);
            }
            return s55 ? createSystemAnalysis(h31, e70, t99) : createEsmAnalysis(e70, h31, t99);
        } catch (r38) {
            if (!r38.message || !r38.message.startsWith("Parse error @:")) throw r38;
            if (n31) try {
                return this.analyze(t99, e69, s55, i37, false);
            } catch  {}
            if (r38.message && r38.message.startsWith("Parse error @:")) {
                const [e71] = r38.message.split("\n", 1);
                const s56 = e71.slice(14);
                let [i38, n32] = s56.split(":");
                const a19 = h31.split("\n");
                let o15 = "";
                i38 > 1 && (o15 += "\n  " + a19[i38 - 2]);
                o15 += "\n> " + a19[i38 - 1];
                o15 += "\n  " + " ".repeat(n32 - 1) + "^";
                a19.length > 1 && (o15 += "\n  " + a19[i38]);
                throw new JspmError(`${o15}\n\nError parsing ${t99}:${s56}`);
            }
            throw r38;
        }
    }
}
function resolvePackageTarget(t101, e72, s57, r39, i) {
    if ("string" === typeof t101) {
        if ("" === r39) return new URL(t101, e72).href;
        if (-1 !== t101.indexOf("*")) return new URL(t101.replace(/\*/g, r39), e72).href;
        if (t101.endsWith("/")) return new URL(t101 + r39, e72).href;
        throw new Error("Expected pattern or path export");
    }
    if ("object" !== typeof t101 || null === t101 || Array.isArray(t101)) {
        if (Array.isArray(t101)) for (const i40 of t101)return resolvePackageTarget(i40, e72, s57, r39);
    } else for(const i39 in t101)if ("default" === i39 || s57.includes(i39)) {
        const n33 = resolvePackageTarget(t101[i39], e72, s57, r39);
        if (n33) return n33;
    }
    return null;
}
async function legacyMainResolve(t102, e73, s58, r40) {
    let i41;
    if (t102) {
        if (await this.exists(i41 = new URL(`./${t102}/index.js`, e73).href)) return i41;
        if (await this.exists(i41 = new URL(`./${t102}/index.json`, e73).href)) return i41;
        if (await this.exists(i41 = new URL(`./${t102}/index.node`, e73).href)) return i41;
        if (await this.exists(i41 = new URL(`./${t102}`, e73).href)) return i41;
        if (await this.exists(i41 = new URL(`./${t102}.js`, e73).href)) return i41;
        if (await this.exists(i41 = new URL(`./${t102}.json`, e73).href)) return i41;
        if (await this.exists(i41 = new URL(`./${t102}.node`, e73).href)) return i41;
    } else {
        if (await this.exists(i41 = new URL("./index.js", e73).href)) return i41;
        if (await this.exists(i41 = new URL("./index.json", e73).href)) return i41;
        if (await this.exists(i41 = new URL("./index.node", e73).href)) return i41;
    }
    throw new JspmError(`Unable to resolve ${t102 ? t102 + " in " : ""}${e73} resolving ${s58}${importedFrom(r40)}.`, "MODULE_NOT_FOUND");
}
class TraceMap {
    constructor(t103, e74, s59, r41){
        this.env = [
            "browser",
            "development",
            "module"
        ];
        this.tracedUrls = {};
        this.traces = new Set;
        this.staticList = new Set;
        this.dynamicList = new Set;
        this.log = s59;
        this.resolver = r41;
        this.mapBase = t103;
        this.opts = e74;
        this.opts.env && (this.env = this.opts.env);
        e74.inputMap ? this.map = e74.inputMap instanceof ImportMap ? e74.inputMap : new ImportMap(t103).extend(e74.inputMap) : this.map = new ImportMap(t103);
        this.installer = new Installer(this.mapBase, this.opts, this.log, this.resolver);
    }
    clearLists() {
        this.staticList = new Set;
        this.dynamicList = new Set;
        this.tracedUrls = {};
        this.traces = new Set;
    }
    replace(t104, e75, s60) {
        return this.installer.replace(t104, e75, s60);
    }
    async visit(t105, e76, s61 = new Set) {
        if (s61.has(t105)) return;
        s61.add(t105);
        const r42 = this.tracedUrls[t105];
        if (r42) {
            for (const t106 of Object.keys(r42.deps))-1 === t106.indexOf("*") && await this.visit(r42.deps[t106], e76, s61);
            await e76(t105, r42);
        }
    }
    checkTypes() {
        let t107 = false, e77 = false;
        for (const s of [
            ...this.staticList,
            ...this.dynamicList
        ]){
            const r43 = this.tracedUrls[s];
            "system" === r43.format ? t107 = true : e77 = true;
        }
        return {
            system: t107,
            esm: e77
        };
    }
    async startInstall() {
        const t108 = await this.installer.startInstall();
        return async (e78)=>{
            if (!e78) {
                t108(false);
                return false;
            }
            if (!this.opts.fullMap) {
                const t110 = {};
                do {
                    this.installer.newInstalls = false;
                    await Promise.all([
                        ...this.traces
                    ].map(async (e82)=>{
                        var s64, r46;
                        const [i42, n34] = e82.split("##");
                        try {
                            const a20 = await this.trace(i42, new URL(n34), (null === (r46 = null === (s64 = this.tracedUrls) || void 0 === s64 ? void 0 : s64[n34]) || void 0 === r46 ? void 0 : r46.wasCJS) ? [
                                "require",
                                ...this.env
                            ] : [
                                "import",
                                ...this.env
                            ]);
                            a20 && (t110[e82] = a20);
                        } catch (t111) {
                            throw t111;
                        }
                    }));
                }while (this.installer.newInstalls)
                let e80 = this.staticList;
                const s62 = new Set;
                const depVisitor = async (r47, i43)=>{
                    var n35, a21, o16, l10, c5, h41, f23, u13, p23;
                    e80.add(r47);
                    const d21 = await this.resolver.getPackageBase(r47);
                    for (const e85 of i43.dynamicDeps){
                        if (-1 !== e85.indexOf("*")) continue;
                        const i44 = t110[e85 + "##" + r47];
                        if (isPlain1(e85)) {
                            const t112 = null === (n35 = this.map.scopes[d21]) || void 0 === n35 ? void 0 : n35[e85];
                            (!t112 || t112 !== i44 && (null === (o16 = null === (a21 = this.tracedUrls) || void 0 === a21 ? void 0 : a21[r47]) || void 0 === o16 ? void 0 : o16.wasCJS)) && this.map.set(e85, i44, d21);
                        }
                        s62.add(i44);
                    }
                    for (const e83 of i43.deps){
                        if (-1 !== e83.indexOf("*")) continue;
                        const s65 = t110[e83 + "##" + r47];
                        if (isPlain1(e83)) {
                            const t113 = null === (l10 = this.map.scopes[d21]) || void 0 === l10 ? void 0 : l10[e83];
                            (!t113 || t113 !== s65 && (null === (h41 = null === (c5 = this.tracedUrls) || void 0 === c5 ? void 0 : c5[r47]) || void 0 === h41 ? void 0 : h41.wasCJS)) && this.map.set(e83, s65, d21);
                        }
                    }
                    for (const e84 of i43.cjsLazyDeps){
                        if (-1 !== e84.indexOf("*")) continue;
                        const s66 = t110[e84 + "##" + r47];
                        if (isPlain1(e84)) {
                            const t114 = null === (f23 = this.map.scopes[d21]) || void 0 === f23 ? void 0 : f23[e84];
                            (!t114 || t114 !== s66 && (null === (p23 = null === (u13 = this.tracedUrls) || void 0 === u13 ? void 0 : u13[r47]) || void 0 === p23 ? void 0 : p23.wasCJS)) && this.map.set(e84, s66, d21);
                        }
                    }
                };
                const r44 = new Set;
                for (const e79 of this.traces){
                    const s67 = t110[e79];
                    if (void 0 === s67) continue;
                    const [i45, n36] = e79.split("##");
                    isPlain1(i45) && n36 === this.mapBase.href && this.map.set(i45, s67);
                    await this.visit(s67, depVisitor, r44);
                }
                e80 = this.dynamicList;
                for (const t109 of s62)await this.visit(t109, depVisitor, r44);
            }
            return t108(true);
        };
    }
    async add(t115, e86, s68 = true) {
        const r48 = await this.installer.installTarget(t115, e86, this.mapBase.href, s68, null, this.mapBase.href);
        return r48.slice(0, -1);
    }
    async trace(t116, e87 = this.mapBase, s69 = [
        "import",
        ...this.env
    ]) {
        var r50, i46, a23, l11, c6;
        if (null === (r50 = this.opts.ignore) || void 0 === r50 ? void 0 : r50.includes(t116)) return null;
        const h5 = await this.resolver.getPackageBase(e87.href);
        h5 || throwInternalError();
        const f32 = "commonjs" === (null === (i46 = this.tracedUrls[e87.href]) || void 0 === i46 ? void 0 : i46.format);
        this.traces.add(t116 + "##" + e87.href);
        if (!isPlain1(t116)) {
            let r51 = new URL(t116, e87);
            if ("file:" !== r51.protocol && "https:" !== r51.protocol && "http:" !== r51.protocol && "node:" !== r51.protocol && "data:" !== r51.protocol) throw new JspmError(`Found unexpected protocol ${r51.protocol}${importedFrom(e87)}`);
            const i47 = r51.href;
            const n37 = await this.resolver.realPath(await this.resolver.finalizeResolve(i47, f32, s69, this.installer, h5));
            if (n37 !== i47) {
                this.map.set(i47.endsWith("/") ? i47.slice(0, -1) : i47, n37, h5);
                r51 = new URL(n37);
            }
            this.log("trace", `${t116} ${e87.href} -> ${r51}`);
            await this.traceUrl(r51.href, e87, s69);
            return r51.href;
        }
        const u22 = parsePkg(t116);
        if (!u22) throw new JspmError(`Invalid package name ${t116}`);
        const { pkgName: p31 , subpath: d31  } = u22;
        const g11 = getScopeMatches(e87, this.map.scopes, this.map.baseUrl);
        const m12 = g11.filter(([, t117])=>t117.startsWith(h5)
        );
        if (m12.length) for (const [r49] of m12){
            const i48 = getMapMatch(t116, this.map.scopes[r49]);
            if (i48) {
                const n38 = await this.resolver.realPath(new URL(this.map.scopes[r49][i48] + t116.slice(i48.length), this.map.baseUrl).href);
                this.log("trace", `${t116} ${e87.href} -> ${n38}`);
                await this.traceUrl(n38, e87, s69);
                return n38;
            }
        }
        const w14 = g11.find(([, t118])=>t118 === h5
        );
        if (w14) {
            const r52 = this.map.scopes[w14[0]];
            const i49 = getMapMatch(t116, r52);
            const a22 = i49 ? await this.resolver.realPath(new URL(r52[i49] + t116.slice(i49.length), this.map.baseUrl).href) : null;
            if (a22) {
                this.log("trace", `${t116} ${e87.href} -> ${a22}`);
                await this.traceUrl(a22, e87, s69);
                return a22;
            }
        }
        const v11 = getMapMatch(t116, this.map.imports);
        const y11 = v11 ? await this.resolver.realPath(new URL(this.map.imports[v11] + t116.slice(v11.length), this.map.baseUrl).href) : null;
        if (y11) {
            this.log("trace", `${t116} ${e87.href} -> ${y11}`);
            await this.traceUrl(y11, e87, s69);
            return y11;
        }
        const U11 = await this.resolver.getPackageConfig(h5) || {};
        if (U11.exports && U11.name === p31) {
            const r53 = await this.resolver.realPath(await this.resolver.resolveExport(h5, d31, s69, f32, t116, this.installer, e87));
            this.log("trace", `${t116} ${e87.href} -> ${r53}`);
            await this.traceUrl(r53, e87, s69);
            return r53;
        }
        if (U11.imports && "#" === p31[0]) {
            const r54 = getMapMatch(t116, U11.imports);
            if (!r54) throw new JspmError(`No '${t116}' import defined in ${h5}${importedFrom(e87)}.`);
            const i50 = await this.resolver.realPath(resolvePackageTarget(U11.imports[r54], h5, s69, t116.slice(r54.length), this.installer));
            this.map.set(r54, i50, h5);
            this.log("trace", `${t116} ${e87.href} -> ${i50}`);
            await this.traceUrl(i50, e87, s69);
            return i50;
        }
        const k12 = this.opts.freeze ? null === (l11 = null === (a23 = this.installer) || void 0 === a23 ? void 0 : a23.installs[h5]) || void 0 === l11 ? void 0 : l11[p31] : await (null === (c6 = this.installer) || void 0 === c6 ? void 0 : c6.install(p31, h5, "./" !== d31, e87.href));
        if (k12) {
            let [r55, i51] = k12.split("|");
            i51 && !r55.endsWith("/") && (r55 += "/");
            const n39 = i51 ? "./" + i51 + d31.slice(1) : d31;
            const a24 = await this.resolver.realPath(await this.resolver.resolveExport(r55, n39, s69, f32, t116, this.installer, e87));
            this.log("trace", `${t116} ${e87.href} -> ${a24}`);
            await this.traceUrl(a24, e87, s69);
            return a24;
        }
        throw new JspmError(`No resolution in map for ${t116}${importedFrom(e87)}`);
    }
    async traceUrl(t121, e88, s70) {
        var r56;
        if (t121 in this.tracedUrls) return;
        const i52 = this.tracedUrls[t121] = {
            wasCJS: false,
            deps: [],
            dynamicDeps: [],
            cjsLazyDeps: [],
            hasStaticParent: true,
            size: NaN,
            integrity: "",
            format: void 0
        };
        if (t121.endsWith("/")) throw new JspmError(`Trailing "/" installs not yet supported installing ${t121} for ${e88.href}`);
        const n40 = "commonjs" === (null === (r56 = this.tracedUrls[e88.href]) || void 0 === r56 ? void 0 : r56.format);
        const { deps: a25 , dynamicDeps: o17 , cjsLazyDeps: l12 , size: c7 , format: h6  } = await this.resolver.analyze(t121, e88, this.opts.system, n40);
        i52.format = h6;
        i52.size = c7;
        const f42 = "commonjs" === h6 || await this.resolver.wasCommonJS(t121);
        f42 && (i52.wasCJS = true);
        f42 && s70.includes("import") ? s70 = s70.map((t122)=>"import" === t122 ? "require" : t122
        ) : !f42 && s70.includes("require") && (s70 = s70.map((t123)=>"require" === t123 ? "import" : t123
        ));
        let u31 = [
            ...a25
        ];
        if (o17.length && !this.opts.static) for (const t119 of o17)u31.includes(t119) || u31.push(t119);
        if (l12 && !this.opts.static) for (const t120 of l12)u31.includes(t120) || u31.push(t120);
        const p4 = new URL(t121);
        await Promise.all(u31.map(async (e89)=>{
            if (-1 !== e89.indexOf("*")) {
                this.log("todo", "Handle wildcard trace " + e89 + " in " + t121);
                return;
            }
            const r57 = await this.trace(e89, p4, s70);
            if (null !== r57) {
                a25.includes(e89) && !i52.deps.includes(e89) && i52.deps.push(e89);
                o17.includes(e89) && !i52.dynamicDeps.includes(e89) && i52.dynamicDeps.push(e89);
                l12 && l12.includes(e89) && !i52.cjsLazyDeps.includes(e89) && i52.cjsLazyDeps.push(e89);
            }
        }));
    }
}
function createLogger() {
    let t124;
    let e90 = new Promise((e91)=>t124 = e91
    );
    let s71 = [];
    const logStream = async function*() {
        while(true){
            while(s71.length)yield s71.shift();
            await e90;
        }
    };
    function log(r58, i53) {
        if (s71.length) s71.push({
            type: r58,
            message: i53
        });
        else {
            s71 = [
                {
                    type: r58,
                    message: i53
                }
            ];
            const n41 = t124;
            e90 = new Promise((e92)=>t124 = e92
            );
            n41();
        }
    }
    return {
        log: log,
        logStream: logStream
    };
}
var B2, F3, q2;
const H2 = "win32" === (null === (B2 = globalThis.process) || void 0 === B2 ? void 0 : B2.platform);
H2 ? Object.keys(null === (F3 = globalThis.process) || void 0 === F3 ? void 0 : F3.env).find((t125)=>Boolean(t125.match(/^PATH$/i))
) || "Path" : "PATH";
"win32" === (null === (q2 = globalThis.process) || void 0 === q2 ? void 0 : q2.platform) ? ";" : ":";
const G2 = {
    tab: "  ",
    newline: H2 ? "\r\n" : "\n",
    trailingNewline: H2 ? "\r\n" : "\n",
    indent: "",
    quote: '"'
};
function detectNewline(t126) {
    let e93 = t126.match(/\r?\n|\r(?!\n)/);
    return e93 ? e93[0] : H2 ? "\r\n" : "\n";
}
function detectIndent$1(t130, e95) {
    let s72;
    let r59 = t130.split(e95);
    for (const t127 of r59){
        const e96 = t127.match(/^\s*[^\s]/);
        e96 && (void 0 === s72 || e96.length < s72.length) && (s72 = e96[0].slice(0, -1));
    }
    r59 = r59.map((t131)=>t131.slice(s72.length)
    );
    let i54 = r59.map((t132)=>{
        var e97;
        return (null === (e97 = t132.match(/^[ \t]*/)) || void 0 === e97 ? void 0 : e97[0]) || "";
    }) || [];
    let n42 = new Map;
    let a26 = 0;
    i54.forEach((t133)=>{
        let e98 = Math.abs(t133.length - a26);
        0 !== e98 && n42.set(e98, (n42.get(e98) || 0) + 1);
        a26 = t133.length;
    });
    let o18 = 0;
    for (const t128 of n42.keys())(!o18 || n42.get(t128) >= n42.get(o18)) && (o18 = t128);
    let l13 = new Map;
    i54.forEach((t134)=>{
        let e99 = t134.substr(t134.length - o18);
        l13.set(e99, (l13.get(e99) || 0) + 1);
    });
    let c8 = "";
    for (const [t129, e94] of l13)(!c8 || e94 > l13.get(c8)) && (c8 = t129);
    r59.length < 5 && r59.reduce((t135, e100)=>t135 + e100.length
    , 0) < 100 && (c8 = "  ");
    return {
        indent: s72 || "",
        tab: c8
    };
}
function detectStyle(t136) {
    let e101 = Object.assign({}, G2);
    e101.newline = detectNewline(t136);
    let { indent: s73 , tab: r60  } = detectIndent$1(t136, e101.newline);
    e101.indent = s73;
    e101.tab = r60;
    let i55 = t136.match(/"|'/);
    i55 && (e101.quote = i55[0]);
    e101.trailingNewline = t136 && t136.match(new RegExp(e101.newline + "$")) ? e101.newline : "";
    return e101;
}
function parseStyled(t137, e102) {
    t137.startsWith("\ufeff") && (t137 = t137.substr(1));
    let s74 = detectStyle(t137);
    try {
        return {
            json: JSON.parse(t137),
            style: s74
        };
    } catch (t) {
        throw new JspmError("Error parsing JSON file" + (e102 ? " " + e102 : ""));
    }
}
let K2, V2;
const Q2 = [
    "link",
    "base"
];
function parseHtml(t138, e103 = [
    "script",
    "link",
    "base"
]) {
    var s75;
    const r61 = [];
    K2 = t138;
    V2 = 0;
    let i56 = {
        tagName: void 0,
        start: -1,
        end: -1,
        attributes: [],
        innerStart: -1,
        innerEnd: -1
    };
    while(V2 < K2.length){
        while(60 !== K2.charCodeAt(V2++))if (V2 === K2.length) return r61;
        const t139 = V2;
        V2 = t139;
        const n43 = null === (s75 = readTagName()) || void 0 === s75 ? void 0 : s75.toLowerCase();
        if ("!--" === n43) {
            while(45 !== K2.charCodeAt(V2) || 45 !== K2.charCodeAt(V2 + 1) || 62 !== K2.charCodeAt(V2 + 2))if (++V2 === K2.length) return r61;
            V2 += 3;
        } else {
            if (void 0 === n43) return r61;
            if (e103.includes(n43)) {
                i56.tagName = n43;
                i56.start = V2 - n43.length - 2;
                const t140 = i56.attributes;
                let e104;
                while(e104 = scanAttr())t140.push(e104);
                let s76 = Q2.includes(n43);
                47 === K2.charCodeAt(V2 - 2) && 62 === K2.charCodeAt(V2 - 1) && (s76 = true);
                if (s76) i56.end = V2;
                else {
                    i56.innerStart = V2;
                    while(true){
                        while(60 !== K2.charCodeAt(V2++))if (V2 === K2.length) return r61;
                        const t141 = readTagName();
                        if (void 0 === t141) return r61;
                        if ("/script" === t141) {
                            i56.innerEnd = V2 - 8;
                            while(scanAttr());
                            i56.end = V2;
                            break;
                        }
                    }
                }
                r61.push(i56);
                i56 = {
                    tagName: void 0,
                    start: -1,
                    end: -1,
                    attributes: [],
                    innerStart: -1,
                    innerEnd: -1
                };
            } else while(scanAttr());
        }
    }
    return r61;
}
function readTagName() {
    let t142 = V2;
    let e105;
    while(!isWs(e105 = K2.charCodeAt(V2++)) && 62 !== e105)if (V2 === K2.length) return null;
    return K2.slice(t142, 62 === e105 ? --V2 : V2 - 1);
}
function scanAttr() {
    let t143;
    while(isWs(t143 = K2.charCodeAt(V2)))if (++V2 === K2.length) return null;
    if (62 === t143 || 47 === t143 && 62 === (t143 = K2.charCodeAt(++V2))) {
        V2++;
        return null;
    }
    const e106 = V2;
    while(!isWs(t143 = K2.charCodeAt(V2++)) && 61 !== t143){
        if (V2 === K2.length) return null;
        if (62 === t143) return e106 + 2 === V2 && 47 === K2.charCodeAt(e106) ? null : {
            nameStart: e106,
            nameEnd: --V2,
            valueStart: -1,
            valueEnd: -1
        };
    }
    const s77 = V2 - 1;
    if (61 !== t143) {
        while(isWs(t143 = K2.charCodeAt(V2)) && 61 !== t143){
            if (++V2 === K2.length) return null;
            if (62 === t143) return null;
        }
        if (61 !== t143) return {
            nameStart: e106,
            nameEnd: s77,
            valueStart: -1,
            valueEnd: -1
        };
    }
    while(isWs(t143 = K2.charCodeAt(V2++))){
        if (V2 === K2.length) return null;
        if (62 === t143) return null;
    }
    if (34 === t143) {
        const t144 = V2;
        while(34 !== K2.charCodeAt(V2++))if (V2 === K2.length) return null;
        return {
            nameStart: e106,
            nameEnd: s77,
            valueStart: t144,
            valueEnd: V2 - 1
        };
    }
    if (39 === t143) {
        const t145 = V2;
        while(39 !== K2.charCodeAt(V2++))if (V2 === K2.length) return null;
        return {
            nameStart: e106,
            nameEnd: s77,
            valueStart: t145,
            valueEnd: V2 - 1
        };
    }
    {
        const r62 = V2 - 1;
        V2++;
        while(!isWs(t143 = K2.charCodeAt(V2)) && 62 !== t143)if (++V2 === K2.length) return null;
        return {
            nameStart: e106,
            nameEnd: s77,
            valueStart: r62,
            valueEnd: V2
        };
    }
}
function isWs(t146) {
    return 32 === t146 || t146 < 14 && t146 > 8;
}
function getAttr(t147, e107, s78) {
    for (const r63 of e107.attributes)if (t147.slice(r63.nameStart, r63.nameEnd) === s78) return t147.slice(r63.valueStart, r63.valueEnd);
    return null;
}
const X2 = /(^|\/)(es-module-shims|esms)(\.min)?\.js$/;
function toHtmlAttrs(t148, e108) {
    return Object.fromEntries(e108.map((e109)=>readAttr(t148, e109)
    ).map((t149)=>[
            t149.name,
            t149
        ]
    ));
}
function analyzeHtml(t150, e110 = c4) {
    const s79 = {
        base: e110,
        map: {
            json: null,
            style: null,
            start: -1,
            end: -1,
            newlineTab: "\n",
            newScript: false,
            attrs: null
        },
        staticImports: new Set,
        dynamicImports: new Set,
        preloads: [],
        modules: [],
        esModuleShims: null
    };
    const r64 = parseHtml(t150);
    for (const i57 of r64)switch(i57.tagName){
        case "base":
            s79.map.json || createInjectionPoint(t150, s79.map, i57);
            const r64 = getAttr(t150, i57, "href");
            r64 && (s79.base = new URL(r64, e110));
            break;
        case "script":
            const n44 = getAttr(t150, i57, "type");
            if ("importmap" === n44) {
                const { json: r65 , style: n45  } = parseStyled(t150.slice(i57.innerStart, i57.innerEnd), e110.href + "#importmap");
                const { start: a27 , end: o19  } = i57;
                const l14 = toHtmlAttrs(t150, i57.attributes);
                s79.map = {
                    json: r65,
                    style: n45,
                    start: a27,
                    end: o19,
                    attrs: l14,
                    newlineTab: "\n" + detectIndent(t150, o19),
                    newScript: false
                };
            } else if ("module" === n44) {
                const e111 = getAttr(t150, i57, "src");
                if (e111) X2.test(e111) ? s79.esModuleShims = {
                    start: i57.start,
                    end: i57.end,
                    attrs: toHtmlAttrs(t150, i57.attributes)
                } : s79.staticImports.add(isPlain1(e111) ? "./" + e111 : e111);
                else {
                    const [e112] = parse5(t150.slice(i57.innerStart, i57.innerEnd)) || [];
                    for (const { n: t151 , d: r66  } of e112)t151 && (-1 === r66 ? s79.staticImports : s79.dynamicImports).add(t151);
                }
            } else if (!n44 || "javascript" === n44) {
                const e113 = getAttr(t150, i57, "src");
                if (e113) X2.test(e113) ? s79.esModuleShims = {
                    start: i57.start,
                    end: i57.end,
                    attrs: toHtmlAttrs(t150, i57.attributes)
                } : s79.staticImports.add(e113);
                else {
                    const [e114] = parse5(t150.slice(i57.innerStart, i57.innerEnd)) || [];
                    for (const { n: t152 , d: r67  } of e114)t152 && (-1 === r67 ? s79.staticImports : s79.dynamicImports).add(t152);
                }
            }
            s79.map.json || createInjectionPoint(t150, s79.map, i57);
            break;
        case "link":
            s79.map.json || createInjectionPoint(t150, s79.map, i57);
            if ("modulepreload" === getAttr(t150, i57, "rel")) {
                const { start: e115 , end: r68  } = i57;
                const n46 = toHtmlAttrs(t150, i57.attributes);
                s79.preloads.push({
                    start: e115,
                    end: r68,
                    attrs: n46
                });
            }
    }
    return s79;
}
function createInjectionPoint(t153, e116, s80) {
    e116.newlineTab = "\n" + detectIndent(t153, s80.start);
    e116.newScript = true;
    e116.attrs = toHtmlAttrs(t153, s80.attributes);
    e116.start = e116.end = s80.start;
}
function readAttr(t154, { nameStart: e117 , nameEnd: s81 , valueStart: r69 , valueEnd: i58  }) {
    return {
        start: e117,
        end: -1 !== i58 ? i58 : s81,
        quote: -1 === r69 || '"' !== t154[r69 - 1] && "'" !== t154[r69 - 1] ? "" : t154[r69 - 1],
        name: t154.slice(e117, s81),
        value: -1 === r69 ? null : t154.slice(r69, i58)
    };
}
function detectIndent(t155, e118) {
    if ("" === t155 || -1 === e118) return "";
    const s82 = t155.lastIndexOf("\n", e118);
    const r70 = (-1 === s82 ? t155 : t155.slice(s82, e118)).match(/^[ \t]*/);
    return r70 ? r70[0] : "";
}
const Y2 = /^\s+/;
class Replacer {
    constructor(t156){
        this.offsetTable = [];
        this.source = t156;
    }
    replace(t157, e119, s83) {
        const r71 = findOffset(this.offsetTable, t157);
        const i59 = findOffset(this.offsetTable, e119);
        this.source = this.source.slice(0, t157 + r71) + s83 + this.source.slice(e119 + i59);
        addOffset(this.offsetTable, e119, s83.length - (e119 + i59 - t157 - r71));
    }
    remove(t158, e120, s84 = false) {
        var r72, i60, n47;
        this.replace(t158, e120, "");
        if (s84) {
            "boolean" === typeof s84 && (s84 = Y2);
            const t159 = this.idx(e120);
            const [a28] = null !== (r72 = this.source.slice(t159).match(s84)) && void 0 !== r72 ? r72 : [];
            this.source = this.source.slice(0, t159) + this.source.slice(null !== (i60 = t159 + (null === a28 || void 0 === a28 ? void 0 : a28.length)) && void 0 !== i60 ? i60 : 0);
            addOffset(this.offsetTable, e120, null !== (n47 = -(null === a28 || void 0 === a28 ? void 0 : a28.length)) && void 0 !== n47 ? n47 : 0);
        }
    }
    idx(t160) {
        return t160 + findOffset(this.offsetTable, t160);
    }
}
function addOffset(t161, e121, s86) {
    let r73 = t161.length, i61 = false;
    while(r73-- > 0){
        const [s85] = t161[r73];
        if (s85 < e121 || s85 === e121 && (i61 = true)) break;
    }
    i61 ? t161.splice(r73, 1, [
        e121,
        s86 + t161[r73][1]
    ]) : t161.splice(r73 + 1, 0, [
        e121,
        s86
    ]);
}
function findOffset(t162, e122) {
    let s87 = 0;
    for (const [r74, i62] of t162){
        if (r74 > e122) break;
        s87 += i62;
    }
    return s87;
}
let Z2;
async function getIntegrity(t163, e123) {
    Z2 || ({ createHash: Z2  } = await import("crypto"));
    const s88 = await fetch1(t163, e123);
    const i63 = await s88.text();
    const n48 = Z2("sha384");
    n48.update(i63);
    return "sha384-" + n48.digest("base64");
}
class Generator {
    constructor({ baseUrl: t165 , mapUrl: e124 , rootUrl: s89 , inputMap: r75 , env: i64 = [
        "browser",
        "development",
        "module"
    ] , defaultProvider: n49 = "jspm" , customProviders: a29 , providers: o20 = {} , resolutions: l15 = {} , cache: h7 = true , stdlib: f51 = "@jspm/core" , ignore: u41 = [] , ipfsAPI: p5  } = {}){
        this.finishInstall = null;
        this.installCnt = 0;
        let d4;
        d4 = "offline" === h7 ? {
            cache: "force-cache"
        } : h7 ? {} : {
            cache: "no-store"
        };
        p5 && (d4.ipfsAPI = p5);
        const { log: g21 , logStream: m21  } = createLogger();
        const w2 = new Resolver(g21, d4, true);
        if (a29) for (const t164 of Object.keys(a29))w2.addCustomProvider(t164, a29[t164]);
        this.logStream = m21;
        if (e124 && !t165) {
            e124 = "string" === typeof e124 ? new URL(e124, c4) : e124;
            try {
                t165 = new URL("./", e124);
            } catch  {
                t165 = new URL(e124 + "/");
            }
        } else t165 && !e124 ? e124 = t165 : e124 || t165 || (t165 = e124 = c4);
        this.baseUrl = "string" === typeof t165 ? new URL(t165, c4) : t165;
        if (!this.baseUrl.pathname.endsWith("/")) {
            this.baseUrl = new URL(this.baseUrl.href);
            this.baseUrl.pathname += "/";
        }
        this.mapUrl = "string" === typeof e124 ? new URL(e124, this.baseUrl) : e124;
        this.rootUrl = "string" === typeof s89 ? new URL(s89, this.baseUrl) : s89 || null;
        if (!this.mapUrl.pathname.endsWith("/")) try {
            this.mapUrl = new URL("./", this.mapUrl);
        } catch  {
            this.mapUrl = new URL(this.mapUrl.href + "/");
        }
        this.traceMap = new TraceMap(this.mapUrl, {
            baseUrl: this.baseUrl,
            stdlib: f51,
            env: i64,
            defaultProvider: n49,
            providers: o20,
            inputMap: r75,
            ignore: u41,
            resolutions: l15
        }, g21, w2);
    }
    async traceInstall(t166, e125) {
        "string" === typeof e125 && (e125 = new URL(e125));
        let s90 = false;
        0 === this.installCnt++ && (this.finishInstall = await this.traceMap.startInstall());
        try {
            await this.traceMap.trace(t166, e125 || this.baseUrl);
        } catch (t167) {
            s90 = true;
            throw t167;
        } finally{
            0 === --this.installCnt && await this.finishInstall(true);
            if (!s90) return {
                staticDeps: [
                    ...this.traceMap.staticList
                ],
                dynamicDeps: [
                    ...this.traceMap.dynamicList
                ]
            };
        }
    }
    async htmlGenerate(t169, { htmlUrl: s91 , preload: r76 = false , integrity: i65 = false , whitespace: n50 = true , esModuleShims: a30 = true  } = {}) {
        "string" === typeof s91 && (s91 = new URL(s91));
        i65 && (r76 = true);
        const o21 = analyzeHtml(t169, s91);
        let l16 = [];
        await Promise.all([
            ...new Set([
                ...o21.staticImports,
                ...o21.dynamicImports
            ])
        ].map(async (t170)=>{
            if (isPlain1(t170)) var { staticDeps: e126  } = await this.install(t170);
            else var { staticDeps: e126  } = await this.traceInstall(t170, o21.base);
            l16 = l16.concat(e126);
        }));
        const c9 = new Replacer(t169);
        let h8 = "";
        if (a30) {
            const t171 = await this.traceMap.resolver.resolveLatestTarget({
                name: "es-module-shims",
                registry: "npm",
                ranges: [
                    new R1("*")
                ]
            }, false, this.traceMap.installer.defaultProvider);
            const s92 = this.traceMap.resolver.pkgToUrl(t171, this.traceMap.installer.defaultProvider) + "dist/es-module-shims.js";
            h8 = `<script async src="${s92}" crossorigin="anonymous"${i65 ? ` integrity="${await getIntegrity(s92, this.traceMap.resolver.fetchOpts)}"` : ""}><\/script>${o21.map.newlineTab}`;
        }
        void 0 !== a30 && o21.esModuleShims && c9.remove(o21.esModuleShims.start, o21.esModuleShims.end, true);
        let f6 = "";
        if (r76 && l16.length) {
            let t172 = true;
            for (let e127 of l16){
                (t172 || n50) && (f6 += o21.map.newlineTab);
                t172 && (t172 = false);
                f6 += i65 ? `<link rel="modulepreload" href="${e127}" integrity="${await getIntegrity(e127, this.traceMap.resolver.fetchOpts)}" />` : `<link rel="modulepreload" href="${e127}" />`;
            }
        }
        if (void 0 !== r76) for (const t168 of o21.preloads)c9.remove(t168.start, t168.end, true);
        c9.replace(o21.map.start, o21.map.end, h8 + '<script type="importmap">' + (n50 ? "\n" : "") + JSON.stringify(this.getMap(), null, n50 ? 2 : 0) + (n50 ? o21.map.newlineTab : "") + "<\/script>" + f6 + (o21.map.newScript ? o21.map.newlineTab : ""));
        return c9.source;
    }
    async install(t173) {
        this.traceMap.clearLists();
        if (Array.isArray(t173)) return await Promise.all(t173.map((t174)=>this.install(t174)
        )).then(()=>({
                staticDeps: [
                    ...this.traceMap.staticList
                ],
                dynamicDeps: [
                    ...this.traceMap.dynamicList
                ]
            })
        );
        if (1 !== arguments.length) throw new Error("Install takes a single target string or object.");
        if ("string" !== typeof t173 && void 0 !== t173.subpaths) {
            t173.subpaths.every((t175)=>{
                if ("string" !== typeof t175 || "." !== t175 && !t175.startsWith("./")) throw new Error(`Install subpath "${t175}" must be equal to "." or start with "./".`);
            });
            return await Promise.all(t173.subpaths.map((e129)=>this.install({
                    target: t173.target,
                    alias: t173.alias,
                    subpath: e129
                })
            )).then(()=>({
                    staticDeps: [
                        ...this.traceMap.staticList
                    ],
                    dynamicDeps: [
                        ...this.traceMap.dynamicList
                    ]
                })
            );
        }
        let e128 = false;
        0 === this.installCnt++ && (this.finishInstall = await this.traceMap.startInstall());
        try {
            const { alias: s93 , target: r77 , subpath: i66  } = await installToTarget.call(this, t173);
            await this.traceMap.add(s93, r77);
            await this.traceMap.trace(s93 + i66.slice(1), this.mapUrl);
        } catch (t176) {
            e128 = true;
            throw t176;
        } finally{
            0 === --this.installCnt && await this.finishInstall(true);
            if (!e128) return {
                staticDeps: [
                    ...this.traceMap.staticList
                ],
                dynamicDeps: [
                    ...this.traceMap.dynamicList
                ]
            };
        }
    }
    resolve(t177, e130 = this.baseUrl) {
        "string" === typeof e130 && (e130 = new URL(e130, this.baseUrl));
        const s94 = this.traceMap.map.resolve(t177, e130);
        if (null === s94) throw new JspmError(`Unable to resolve "${t177}" from ${e130.href}`, "MODULE_NOT_FOUND");
        return s94;
    }
    get importMap() {
        return this.traceMap.map;
    }
    getAnalysis(t178) {
        "string" !== typeof t178 && (t178 = t178.href);
        const e131 = this.traceMap.tracedUrls[t178];
        if (!e131) throw new Error(`The URL ${t178} has not been traced by this generator instance.`);
        return {
            format: e131.format,
            staticDeps: e131.deps,
            dynamicDeps: e131.dynamicDeps,
            cjsLazyDeps: e131.cjsLazyDeps || []
        };
    }
    getMap() {
        const t179 = this.traceMap.map.clone();
        t179.flatten(this.rootUrl ? this.rootUrl : this.baseUrl);
        this.rootUrl && t179.rebase(this.rootUrl.href, true);
        t179.sort();
        return t179.toJSON();
    }
}
async function installToTarget(t185) {
    "string" === typeof t185 && (t185 = {
        target: t185
    });
    if ("string" !== typeof t185.target) throw new Error('All installs require a "target" string.');
    if (void 0 !== t185.subpath && ("string" !== typeof t185.subpath || "." !== t185.subpath && !t185.subpath.startsWith("./"))) throw new Error(`Install subpath "${t185.subpath}" must be a string equal to "." or starting with "./".${"string" === typeof t185.subpath ? `\nTry setting the subpath to "./${t185.subpath}"` : ""}`);
    const { alias: e136 , target: s98 , subpath: r81  } = await toPackageTarget(this.traceMap.resolver, t185.target, this.baseUrl.href);
    return {
        alias: t185.alias || e136,
        target: s98,
        subpath: t185.subpath || r81
    };
}
async function main({ target , name , version: version1 , subpaths  }) {
    typeof globalThis.document === "undefined" ? "deno" : "browser";
    const generator = new Generator({
        env: [
            "production",
            "browser",
            "module"
        ]
    });
    await generator.install({
        target: target || `${name}@${version1}`,
        subpaths
    });
    const importMap = generator.getMap();
    return importMap;
}
function _assertThisInitialized(self) {
    if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
}
function asyncGeneratorStep(gen, resolve15, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve15(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve16, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve16, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve16, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _getPrototypeOf(o111) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o20) {
        return o20.__proto__ || Object.getPrototypeOf(o20);
    };
    return _getPrototypeOf(o111);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
    }
    return _assertThisInitialized(self);
}
function _setPrototypeOf(o24, p111) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o23, p24) {
        o23.__proto__ = p24;
        return o23;
    };
    return _setPrototypeOf(o24, p111);
}
var _typeof = function(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
};
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else {
            result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
    };
}
(function(Component1) {
    "use strict";
    _inherits(ImportMap1, Component1);
    var _super = _createSuper(ImportMap1);
    function ImportMap1(props) {
        _classCallCheck(this, ImportMap1);
        var _this;
        _this = _super.call(this, props);
        _defineProperty(_assertThisInitialized(_this), "importMaps", void 0);
        return _this;
    }
    _createClass(ImportMap1, [
        {
            key: "didMount",
            value: function didMount() {
                var _this = this;
                return _asyncToGenerator(e.mark(function _callee() {
                    var _props, target, subpaths, importMap;
                    return e.wrap(function _callee$(_ctx) {
                        while(1)switch(_ctx.prev = _ctx.next){
                            case 0:
                                if (_this.importMaps) {
                                    _ctx.next = 6;
                                    break;
                                }
                                _props = _this.props, target = _props.target, subpaths = _props.subpaths;
                                _ctx.next = 4;
                                return main({
                                    target: target,
                                    subpaths: subpaths
                                });
                            case 4:
                                importMap = _ctx.sent;
                                if (importMap) {
                                    _this.importMaps = importMap;
                                    _this.update();
                                }
                            case 6:
                            case "end":
                                return _ctx.stop();
                        }
                    }, _callee);
                }))();
            }
        },
        {
            key: "render",
            value: function render() {
                if (this.importMaps) {
                    return Ct("pre", null, Ct("code", {
                        innerHTML: {
                            __dangerousHtml: JSON.stringify(this.importMaps, null, 2)
                        }
                    }));
                } else {
                    return Ct("div", null, this.props.subpath);
                }
            }
        }
    ]);
    return ImportMap1;
})(St);
function Exports(param) {
    var exports = param.exports, name = param.name, version = param.version, exportHashes = param.exportHashes;
    return Ct("jspm-package-exports", null, Ct("ul", {
        class: "package-files"
    }, exportHashes && (exports === null || exports === void 0 ? void 0 : exports.map(function(subpath) {
        var href = exportHashes[subpath];
        return Ct("li", null, Ct("a", {
            target: "_blank",
            href: href,
            class: "package-file"
        }, "".concat(name).concat(subpath.slice(1))));
    }))), Ct(Lt, null, Ct("style", {
        "data-page": "package-details"
    }, "\n            .package-file {\n              display: block;\n              line-height: 1.3;\n            }\n            .package-files {\n              list-style: none;\n              padding-left: 0px;\n              height: 500px;\n              overflow: scroll;\n            }\n            .package-files li {\n              line-height: 1.3;\n            }\n            ")));
}
function Aside(param) {
    var license = param.license, name = param.name, version2 = param.version, exports = param.exports;
    return Ct("jspm-package-aside", null, Ct("aside", null, Ct("div", null, Ct("h3", null, "License"), Ct("jspm-package-license", null, license), Ct(Seperator, null)), Ct("jspm-package-aside-exports", {
        "data-exports": JSON.stringify(exports),
        "data-name": name,
        "data-version": version2
    }, Ct(Exports, {
        exports: exports,
        name: name,
        version: version2
    }))));
}
function Logo(param) {
    param.name, param.version;
    return Ct("jspm-package-logo", null, Ct("h1", null, Ct("a", {
        href: "/"
    }, "JSPM")), Ct(Lt, null, Ct("style", {
        "data-page-name": "header"
    }, "\n            jspm-package-logo {\n              margin-right: var(--dl-space-space-unit);\n            }\n\n            jspm-package-logo h1 a {\n              background: url(https://jspm.org/jspm.png) no-repeat left center;\n              color: var(--dl-color-gray-black);\n              background-size: contain;\n              padding-left: 2.5rem;\n            }\n          ")));
}
function Search(params) {
    return Ct("jspm-package-search", null, Ct("form", null, Ct("input", {
        type: "search",
        autofocus: "true",
        placeholder: "Package",
        autocomplete: "on",
        class: "header-textinput search_input",
        name: "q"
    }), Ct("button", {
        class: "search_button"
    }, Ct("span", null, "Import"))), Ct(Lt, null, Ct("style", {
        "data-page-name": "jspm-package-nav"
    }, "\n          jspm-package-search, jspm-package-search form{\n            display: flex;\n          }\n          .search_button {\n            color: var(--dl-color-gray-black);\n            display: inline-block;\n            padding: 0.5rem 1rem;\n            border-color: var(--dl-color-gray-black);\n            border-width: 1px;\n            height: 40px;\n            display: flex;\n            align-items: center;\n            border-width: 0px;\n            padding-left: var(--dl-space-space-oneandhalfunits);\n            padding-right: var(--dl-space-space-oneandhalfunits);\n            background-color: var(--dl-color-primary-js-primary);\n            border-top-left-radius: none;\n            border-top-right-radius: var(--dl-radius-radius-radius8);\n            border-bottom-left-radius: none;\n            border-bottom-right-radius: var(--dl-radius-radius-radius8);\n        }\n          \n          .search_input {\n            color: var(--dl-color-gray-black);\n            cursor: auto;\n            padding: 0.5rem 1rem;\n            border-color: var(--dl-color-gray-black);\n            border-width: 1px;\n            background-color: var(--dl-color-gray-white);\n            height: 40px;\n            padding: var(--dl-space-space-halfunit);\n            max-width: 500px;\n            border-color: var(--dl-color-jspm-placeholder);\n            background-color: var(--dl-color-jspm-placeholder);\n            border-top-left-radius: var(--dl-radius-radius-radius8);\n            border-bottom-left-radius: var(--dl-radius-radius-radius8);\n          }\n          jspm-package-nav nav ul {\n              display: flex;\n            list-style: none;\n          }\n          jspm-package-nav nav ul li{\n              margin: 20px;\n          }\n          ")));
}
function Nav() {
    return Ct("div", null, Ct("nav", null, Ct("ul", {
        class: "nav-list-style"
    }, Ct("li", {
        class: "nav-list-item"
    }, Ct("a", {
        href: "https://generator.jspm.io"
    }, "Generator")), Ct("li", {
        class: "nav-list-item"
    }, Ct("a", {
        href: "https://jspm.org/docs/cdn"
    }, "Docs")), Ct("li", {
        class: "nav-list-item"
    }, Ct("a", {
        href: "https://jspm.org/sandbox"
    }, "Sandbox")), Ct("li", {
        class: "nav-list-item"
    }, Ct("a", {
        href: "https://github.com/jspm/generator"
    }, "Github")))), Ct(Lt, null, Ct("style", {
        "data-page-name": "jspm-package-nav"
    }, "\n          .nav-list-style {\n              display: flex;\n              list-style: none;\n          }\n\n          .nav-list-item {\n              margin-right: var(--dl-space-space-twounits);\n          }\n          ")));
}
function Header() {
    return Ct("div", null, Ct("header", {
        class: "header"
    }, Ct("div", {
        class: "header"
    }, Ct(Logo, null), Ct(Search, null)), Ct(Nav, null)), Ct(Lt, null, Ct("style", {
        "data-page-name": "header"
    }, "\n            .header {\n              display: flex;\n              justify-content: space-between;\n              align-items: center;\n              flex-wrap: wrap;\n              align-content: center;\n            }\n\n            @media(max-width: 768px) {\n              .header {\n                justify-content: center;\n              }\n            }\n          ")));
}
function Footer() {
    return Ct("div", null, Ct("div", {
        class: "footer-container"
    }, Ct("footer", {
        class: "footer-footer"
    }, Ct("div", {
        class: "footer-container1"
    }, Ct("img", {
        alt: "image",
        src: "https://jspm-registry.teleporthq.app/playground_assets/jspm.png",
        class: "footer-image"
    }), Ct("div", {
        class: "footer-container2"
    }, Ct("div", {
        class: "footer-product-container"
    }, Ct("span", {
        class: "footer-text"
    }, "Docs"), Ct("span", {
        class: "footer-text01"
    }, "Get Started"), Ct("span", {
        class: "footer-text02"
    }, "Workspace"), Ct("span", {
        class: "footer-text03"
    }, ".npmrc")), Ct("div", {
        class: "footer-company-container"
    }, Ct("span", {
        class: "footer-text04"
    }, "Community"), Ct("span", {
        class: "footer-text05"
    }, "Getting Started"), Ct("span", {
        class: "footer-text06"
    }, "Workspace"), Ct("span", {
        class: "footer-text07"
    }, ".npmrc")), Ct("div", {
        class: "footer-company-container1"
    }, Ct("span", {
        class: "footer-text08"
    }, "Contributing"), Ct("span", {
        class: "footer-text09"
    }, "Getting Started"), Ct("span", {
        class: "footer-text10"
    }, "Workspace"), Ct("span", {
        class: "footer-text11"
    }, ".npmrc")))), Ct("div", {
        class: "footer-separator"
    }), Ct("div", {
        class: "footer-copyright"
    }, Ct("span", {
        class: "footer-text12"
    }, Ct("span", null, "Copyright \xa9 2015-2021")), Ct("div", {
        class: "footer-socials"
    }, Ct("span", {
        class: "footer-text14"
    }, "Follow Us"), Ct("div", {
        class: "footer-icon-group"
    }, Ct("img", {
        alt: "image",
        src: "https://jspm-registry.teleporthq.app/playground_assets/github.svg",
        class: "footer-image1"
    }), Ct("svg", {
        viewBox: "0 0 950.8571428571428 1024",
        class: "footer-icon"
    }, Ct("path", {
        d: "M925.714 233.143c-25.143 36.571-56.571 69.143-92.571 95.429 0.571 8 0.571 16 0.571 24 0 244-185.714 525.143-525.143 525.143-104.571 0-201.714-30.286-283.429-82.857 14.857 1.714 29.143 2.286 44.571 2.286 86.286 0 165.714-29.143 229.143-78.857-81.143-1.714-149.143-54.857-172.571-128 11.429 1.714 22.857 2.857 34.857 2.857 16.571 0 33.143-2.286 48.571-6.286-84.571-17.143-148-91.429-148-181.143v-2.286c24.571 13.714 53.143 22.286 83.429 23.429-49.714-33.143-82.286-89.714-82.286-153.714 0-34.286 9.143-65.714 25.143-93.143 90.857 112 227.429 185.143 380.571 193.143-2.857-13.714-4.571-28-4.571-42.286 0-101.714 82.286-184.571 184.571-184.571 53.143 0 101.143 22.286 134.857 58.286 41.714-8 81.714-23.429 117.143-44.571-13.714 42.857-42.857 78.857-81.143 101.714 37.143-4 73.143-14.286 106.286-28.571z"
    }))))))), Ct(Lt, null, Ct("style", {
        "data-page-name": "footer"
    }, "\n        .footer-container {\n            width: 100%;\n            display: flex;\n            position: relative;\n            align-items: flex-start;\n            flex-direction: column;\n            background-color: var(--dl-color-jspm-footer);\n          }\n          .footer-footer {\n            width: 100%;\n            display: flex;\n            max-width: var(--dl-size-size-maxwidth);\n            align-items: center;\n            padding-top: var(--dl-space-space-twounits);\n            padding-left: var(--dl-space-space-threeunits);\n            padding-right: var(--dl-space-space-threeunits);\n            flex-direction: column;\n            padding-bottom: var(--dl-space-space-twounits);\n            justify-content: space-between;\n            background-color: var(--dl-color-gray-900);\n            margin-top: var(--dl-space-space-unit);\n          }\n          .footer-container1 {\n            width: 100%;\n            display: flex;\n            align-items: flex-start;\n            flex-direction: row;\n            justify-content: center;\n          }\n          .footer-image {\n            width: 45px;\n            object-fit: cover;\n            margin-right: var(--dl-space-space-oneandhalfunits);\n          }\n          .footer-container2 {\n            display: flex;\n            align-items: flex-start;\n            margin-right: 5rem;\n            flex-direction: row;\n            justify-content: space-between;\n            flex-wrap: wrap;\n          }\n          .footer-product-container {\n            flex: 0 0 auto;\n            display: flex;\n            align-items: flex-start;\n            margin-right: 5rem;\n            flex-direction: column;\n            justify-content: flex-start;\n          }\n          .footer-text {\n            font-weight: 700;\n            margin-bottom: var(--dl-space-space-oneandhalfunits);\n          }\n          .footer-text01 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-text02 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-text03 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-company-container {\n            flex: 0 0 auto;\n            display: flex;\n            align-items: flex-start;\n            margin-right: 5rem;\n            flex-direction: column;\n            justify-content: flex-start;\n          }\n          .footer-text04 {\n            font-weight: 700;\n            margin-bottom: var(--dl-space-space-oneandhalfunits);\n          }\n          .footer-text05 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-text06 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-text07 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-company-container1 {\n            flex: 0 0 auto;\n            display: flex;\n            align-items: flex-start;\n            flex-direction: column;\n            justify-content: flex-start;\n          }\n          .footer-text08 {\n            font-weight: 700;\n            margin-bottom: var(--dl-space-space-oneandhalfunits);\n          }\n          .footer-text09 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-text10 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-text11 {\n            margin-bottom: var(--dl-space-space-unit);\n          }\n          .footer-separator {\n            width: 100%;\n            height: 1px;\n            margin-top: var(--dl-space-space-twounits);\n            margin-bottom: var(--dl-space-space-twounits);\n            background-color: var(--dl-color-gray-900);\n          }\n          .footer-copyright {\n            flex: 0 0 auto;\n            width: 100%;\n            height: auto;\n            display: flex;\n            align-items: flex-start;\n            justify-content: space-between;\n          }\n          .footer-text12 {\n            align-self: center;\n          }\n          .footer-socials {\n            display: flex;\n            align-items: center;\n            flex-direction: row;\n            justify-content: flex-start;\n          }\n          .footer-text14 {\n            font-style: normal;\n            font-weight: 400;\n            margin-right: var(--dl-space-space-unit);\n            margin-bottom: 0px;\n          }\n          .footer-icon-group {\n            display: flex;\n            align-items: center;\n            flex-direction: row;\n            justify-content: space-between;\n          }\n          .footer-image1 {\n            width: var(--dl-size-size-xsmall);\n            height: var(--dl-size-size-xsmall);\n            object-fit: cover;\n            margin-right: var(--dl-space-space-unit);\n          }\n          .footer-icon {\n            width: var(--dl-size-size-xsmall);\n            height: var(--dl-size-size-xsmall);\n            margin-left: 0px;\n            margin-right: 0px;\n          }\n          \n          @media(max-width: 991px) {\n            .footer-footer {\n              flex-direction: column;\n            }\n            .footer-container2 {\n              margin-right: var(--dl-space-space-fourunits);\n            }\n            .footer-product-container {\n              margin-right: var(--dl-space-space-fourunits);\n            }\n          }\n          @media(max-width: 767px) {\n            .footer-footer {\n              padding-left: var(--dl-space-space-twounits);\n              padding-right: var(--dl-space-space-twounits);\n            }\n            .footer-container1 {\n              align-items: center;\n              flex-direction: column;\n              justify-content: space-between;\n            }\n            .footer-image {\n              display: none;\n            }\n            .footer-container2 {\n              margin-right: var(--dl-space-space-fourunits);\n            }\n            .footer-product-container {\n              margin-right: var(--dl-space-space-fourunits);\n            }\n          }\n          @media(max-width: 479px) {\n            .footer-footer {\n              padding: var(--dl-space-space-unit);\n            }\n            .footer-container1 {\n              align-items: center;\n              flex-direction: column;\n            }\n            .footer-container2 {\n              margin-right: 0px;\n            }\n            .footer-text12 {\n              text-align: center;\n            }\n          }          \n        ")));
}
function Package(param) {
    var name = param.name, description = param.description, keywords = param.keywords, version3 = param.version, homepage = param.homepage, license = param.license, files = param.files, exports = param.exports, readme = param.readme, stateHash = param.stateHash;
    return Ct("div", null, Ct(Header, null), Ct("jspm-package", null, Ct("jspm-package-content", null, Ct("h2", null, stateHash), Ct(Readme, {
        __html: readme
    }), Ct(Aside, {
        version: version3,
        name: name,
        license: license,
        files: files,
        exports: exports,
        keywords: keywords
    }))), Ct(Footer, null), Ct(Lt, null, Ct("link", {
        rel: "stylesheet",
        href: "https://ga.jspm.io/npm:prismjs@1.25.0/themes/prism.css"
    }), Ct("style", {
        "data-page": "package-details"
    }, "\n        jspm-package-content {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));\n          grid-gap: 1rem;\n        }\n        \n        jspm-package-readme {\n          display: block;\n          padding: var(--dl-space-space-oneandhalfunits);\n        }\n        \n        jspm-package-aside {\n          padding: var(--dl-space-space-oneandhalfunits);\n        }\n        \n        jspm-package-name,\n        jspm-package-version,\n        jspm-package-description,\n        jspm-package-license {\n          display: block;\n        }\n        \n        jspm-package-name h1 {\n          font-family: \"Major Mono Display\", monospace;\n          font-size: var(--step-5);\n        }\n        \n        jspm-package-name h1 a {\n          color: black;\n        }\n\n        @media(max-width: 767px) {\n          jspm-package-content {\n            justify-content: space-between;\n          }\n\n          jspm-package-readme {\n            width: 100%;\n          }\n        }\n        ")));
}
function FeaturedPackages(param1) {
    var _packages = param1.packages, packages = _packages === void 0 ? [] : _packages;
    return Ct("div", {
        id: "featured-packages"
    }, Ct("ul", {
        class: "list-style"
    }, packages.map(function(param) {
        var name = param.name, description = param.description, version4 = param.version;
        return Ct("li", {
            class: "package-item-wrapper"
        }, Ct("a", {
            class: "package-name",
            href: "/package/".concat(name, "@").concat(version4)
        }, name, " ", Ct("span", {
            class: "package-version"
        }, version4)), Ct("span", {
            class: "description"
        }, description));
    })), Ct(Lt, null, Ct("style", {
        "data-page-name": "featured-packages"
    }, "\n          .list-style {\n            list-style: none;\n            padding-left: 0px;\n            margin: 0px;\n            width: 100%;\n          }\n          \n          .package-item-wrapper {\n            font-weight: 200;\n            margin: var(--dl-space-space-unit);\n          }\n\n          .package-version {\n            font-weight: 200;\n            font-size: var(--dl-space-space-unit);\n          }\n\n          .package-name {\n            display: block;\n            font-size: var(--dl-space-space-oneandhalfunits);\n            font-family: 'Inter';\n            font-weight: 400;\n            margin-bottom: var(--dl-space-space-halfunit);\n          }\n\n          .description {\n            overflow: hidden;\n            white-space: normal;\n            word-break: break-word;\n            line-height: 1.5;\n          }\n\n        ")));
}
function Home(param) {
    var packages = param.packages;
    return Ct("jspm-package-home", null, Ct("jspm-package-home-header", null, Ct(Header, null)), Ct("jspm-package-home-main", null, Ct("main", null, Ct(FeaturedPackages, {
        packages: packages
    }))), Ct("jspm-package-home-footer", null, Ct(Footer, null)), Ct(Lt, null, Ct("style", {
        "data-page-name": "jspm-package-home"
    }, "\n          \n        ")));
}
const emojis = [
    {
        emoji: "😀",
        description: "grinning face",
        category: "Smileys & Emotion",
        aliases: [
            "grinning"
        ],
        tags: [
            "smile",
            "happy"
        ],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😃",
        description: "grinning face with big eyes",
        category: "Smileys & Emotion",
        aliases: [
            "smiley"
        ],
        tags: [
            "happy",
            "joy",
            "haha"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😄",
        description: "grinning face with smiling eyes",
        category: "Smileys & Emotion",
        aliases: [
            "smile"
        ],
        tags: [
            "happy",
            "joy",
            "laugh",
            "pleased"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😁",
        description: "beaming face with smiling eyes",
        category: "Smileys & Emotion",
        aliases: [
            "grin"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😆",
        description: "grinning squinting face",
        category: "Smileys & Emotion",
        aliases: [
            "laughing",
            "satisfied"
        ],
        tags: [
            "happy",
            "haha"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😅",
        description: "grinning face with sweat",
        category: "Smileys & Emotion",
        aliases: [
            "sweat_smile"
        ],
        tags: [
            "hot"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤣",
        description: "rolling on the floor laughing",
        category: "Smileys & Emotion",
        aliases: [
            "rofl"
        ],
        tags: [
            "lol",
            "laughing"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "😂",
        description: "face with tears of joy",
        category: "Smileys & Emotion",
        aliases: [
            "joy"
        ],
        tags: [
            "tears"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🙂",
        description: "slightly smiling face",
        category: "Smileys & Emotion",
        aliases: [
            "slightly_smiling_face"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🙃",
        description: "upside-down face",
        category: "Smileys & Emotion",
        aliases: [
            "upside_down_face"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "😉",
        description: "winking face",
        category: "Smileys & Emotion",
        aliases: [
            "wink"
        ],
        tags: [
            "flirt"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😊",
        description: "smiling face with smiling eyes",
        category: "Smileys & Emotion",
        aliases: [
            "blush"
        ],
        tags: [
            "proud"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😇",
        description: "smiling face with halo",
        category: "Smileys & Emotion",
        aliases: [
            "innocent"
        ],
        tags: [
            "angel"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥰",
        description: "smiling face with hearts",
        category: "Smileys & Emotion",
        aliases: [
            "smiling_face_with_three_hearts"
        ],
        tags: [
            "love"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😍",
        description: "smiling face with heart-eyes",
        category: "Smileys & Emotion",
        aliases: [
            "heart_eyes"
        ],
        tags: [
            "love",
            "crush"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤩",
        description: "star-struck",
        category: "Smileys & Emotion",
        aliases: [
            "star_struck"
        ],
        tags: [
            "eyes"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😘",
        description: "face blowing a kiss",
        category: "Smileys & Emotion",
        aliases: [
            "kissing_heart"
        ],
        tags: [
            "flirt"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😗",
        description: "kissing face",
        category: "Smileys & Emotion",
        aliases: [
            "kissing"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "☺️",
        description: "smiling face",
        category: "Smileys & Emotion",
        aliases: [
            "relaxed"
        ],
        tags: [
            "blush",
            "pleased"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "😚",
        description: "kissing face with closed eyes",
        category: "Smileys & Emotion",
        aliases: [
            "kissing_closed_eyes"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😙",
        description: "kissing face with smiling eyes",
        category: "Smileys & Emotion",
        aliases: [
            "kissing_smiling_eyes"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "🥲",
        description: "smiling face with tear",
        category: "Smileys & Emotion",
        aliases: [
            "smiling_face_with_tear"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "😋",
        description: "face savoring food",
        category: "Smileys & Emotion",
        aliases: [
            "yum"
        ],
        tags: [
            "tongue",
            "lick"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😛",
        description: "face with tongue",
        category: "Smileys & Emotion",
        aliases: [
            "stuck_out_tongue"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😜",
        description: "winking face with tongue",
        category: "Smileys & Emotion",
        aliases: [
            "stuck_out_tongue_winking_eye"
        ],
        tags: [
            "prank",
            "silly"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤪",
        description: "zany face",
        category: "Smileys & Emotion",
        aliases: [
            "zany_face"
        ],
        tags: [
            "goofy",
            "wacky"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😝",
        description: "squinting face with tongue",
        category: "Smileys & Emotion",
        aliases: [
            "stuck_out_tongue_closed_eyes"
        ],
        tags: [
            "prank"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤑",
        description: "money-mouth face",
        category: "Smileys & Emotion",
        aliases: [
            "money_mouth_face"
        ],
        tags: [
            "rich"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🤗",
        description: "hugging face",
        category: "Smileys & Emotion",
        aliases: [
            "hugs"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🤭",
        description: "face with hand over mouth",
        category: "Smileys & Emotion",
        aliases: [
            "hand_over_mouth"
        ],
        tags: [
            "quiet",
            "whoops"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🤫",
        description: "shushing face",
        category: "Smileys & Emotion",
        aliases: [
            "shushing_face"
        ],
        tags: [
            "silence",
            "quiet"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🤔",
        description: "thinking face",
        category: "Smileys & Emotion",
        aliases: [
            "thinking"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🤐",
        description: "zipper-mouth face",
        category: "Smileys & Emotion",
        aliases: [
            "zipper_mouth_face"
        ],
        tags: [
            "silence",
            "hush"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🤨",
        description: "face with raised eyebrow",
        category: "Smileys & Emotion",
        aliases: [
            "raised_eyebrow"
        ],
        tags: [
            "suspicious"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😐",
        description: "neutral face",
        category: "Smileys & Emotion",
        aliases: [
            "neutral_face"
        ],
        tags: [
            "meh"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😑",
        description: "expressionless face",
        category: "Smileys & Emotion",
        aliases: [
            "expressionless"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😶",
        description: "face without mouth",
        category: "Smileys & Emotion",
        aliases: [
            "no_mouth"
        ],
        tags: [
            "mute",
            "silence"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😏",
        description: "smirking face",
        category: "Smileys & Emotion",
        aliases: [
            "smirk"
        ],
        tags: [
            "smug"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😒",
        description: "unamused face",
        category: "Smileys & Emotion",
        aliases: [
            "unamused"
        ],
        tags: [
            "meh"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🙄",
        description: "face with rolling eyes",
        category: "Smileys & Emotion",
        aliases: [
            "roll_eyes"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "😬",
        description: "grimacing face",
        category: "Smileys & Emotion",
        aliases: [
            "grimacing"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "🤥",
        description: "lying face",
        category: "Smileys & Emotion",
        aliases: [
            "lying_face"
        ],
        tags: [
            "liar"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "😌",
        description: "relieved face",
        category: "Smileys & Emotion",
        aliases: [
            "relieved"
        ],
        tags: [
            "whew"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😔",
        description: "pensive face",
        category: "Smileys & Emotion",
        aliases: [
            "pensive"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😪",
        description: "sleepy face",
        category: "Smileys & Emotion",
        aliases: [
            "sleepy"
        ],
        tags: [
            "tired"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤤",
        description: "drooling face",
        category: "Smileys & Emotion",
        aliases: [
            "drooling_face"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "😴",
        description: "sleeping face",
        category: "Smileys & Emotion",
        aliases: [
            "sleeping"
        ],
        tags: [
            "zzz"
        ],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😷",
        description: "face with medical mask",
        category: "Smileys & Emotion",
        aliases: [
            "mask"
        ],
        tags: [
            "sick",
            "ill"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤒",
        description: "face with thermometer",
        category: "Smileys & Emotion",
        aliases: [
            "face_with_thermometer"
        ],
        tags: [
            "sick"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🤕",
        description: "face with head-bandage",
        category: "Smileys & Emotion",
        aliases: [
            "face_with_head_bandage"
        ],
        tags: [
            "hurt"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🤢",
        description: "nauseated face",
        category: "Smileys & Emotion",
        aliases: [
            "nauseated_face"
        ],
        tags: [
            "sick",
            "barf",
            "disgusted"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🤮",
        description: "face vomiting",
        category: "Smileys & Emotion",
        aliases: [
            "vomiting_face"
        ],
        tags: [
            "barf",
            "sick"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🤧",
        description: "sneezing face",
        category: "Smileys & Emotion",
        aliases: [
            "sneezing_face"
        ],
        tags: [
            "achoo",
            "sick"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥵",
        description: "hot face",
        category: "Smileys & Emotion",
        aliases: [
            "hot_face"
        ],
        tags: [
            "heat",
            "sweating"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥶",
        description: "cold face",
        category: "Smileys & Emotion",
        aliases: [
            "cold_face"
        ],
        tags: [
            "freezing",
            "ice"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥴",
        description: "woozy face",
        category: "Smileys & Emotion",
        aliases: [
            "woozy_face"
        ],
        tags: [
            "groggy"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😵",
        description: "dizzy face",
        category: "Smileys & Emotion",
        aliases: [
            "dizzy_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤯",
        description: "exploding head",
        category: "Smileys & Emotion",
        aliases: [
            "exploding_head"
        ],
        tags: [
            "mind",
            "blown"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🤠",
        description: "cowboy hat face",
        category: "Smileys & Emotion",
        aliases: [
            "cowboy_hat_face"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥳",
        description: "partying face",
        category: "Smileys & Emotion",
        aliases: [
            "partying_face"
        ],
        tags: [
            "celebration",
            "birthday"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥸",
        description: "disguised face",
        category: "Smileys & Emotion",
        aliases: [
            "disguised_face"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "😎",
        description: "smiling face with sunglasses",
        category: "Smileys & Emotion",
        aliases: [
            "sunglasses"
        ],
        tags: [
            "cool"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤓",
        description: "nerd face",
        category: "Smileys & Emotion",
        aliases: [
            "nerd_face"
        ],
        tags: [
            "geek",
            "glasses"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🧐",
        description: "face with monocle",
        category: "Smileys & Emotion",
        aliases: [
            "monocle_face"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😕",
        description: "confused face",
        category: "Smileys & Emotion",
        aliases: [
            "confused"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😟",
        description: "worried face",
        category: "Smileys & Emotion",
        aliases: [
            "worried"
        ],
        tags: [
            "nervous"
        ],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "🙁",
        description: "slightly frowning face",
        category: "Smileys & Emotion",
        aliases: [
            "slightly_frowning_face"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "☹️",
        description: "frowning face",
        category: "Smileys & Emotion",
        aliases: [
            "frowning_face"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "😮",
        description: "face with open mouth",
        category: "Smileys & Emotion",
        aliases: [
            "open_mouth"
        ],
        tags: [
            "surprise",
            "impressed",
            "wow"
        ],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😯",
        description: "hushed face",
        category: "Smileys & Emotion",
        aliases: [
            "hushed"
        ],
        tags: [
            "silence",
            "speechless"
        ],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😲",
        description: "astonished face",
        category: "Smileys & Emotion",
        aliases: [
            "astonished"
        ],
        tags: [
            "amazed",
            "gasp"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😳",
        description: "flushed face",
        category: "Smileys & Emotion",
        aliases: [
            "flushed"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥺",
        description: "pleading face",
        category: "Smileys & Emotion",
        aliases: [
            "pleading_face"
        ],
        tags: [
            "puppy",
            "eyes"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😦",
        description: "frowning face with open mouth",
        category: "Smileys & Emotion",
        aliases: [
            "frowning"
        ],
        tags: [],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😧",
        description: "anguished face",
        category: "Smileys & Emotion",
        aliases: [
            "anguished"
        ],
        tags: [
            "stunned"
        ],
        unicodeVersion: "6.1",
        iosVersion: "6.0"
    },
    {
        emoji: "😨",
        description: "fearful face",
        category: "Smileys & Emotion",
        aliases: [
            "fearful"
        ],
        tags: [
            "scared",
            "shocked",
            "oops"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😰",
        description: "anxious face with sweat",
        category: "Smileys & Emotion",
        aliases: [
            "cold_sweat"
        ],
        tags: [
            "nervous"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😥",
        description: "sad but relieved face",
        category: "Smileys & Emotion",
        aliases: [
            "disappointed_relieved"
        ],
        tags: [
            "phew",
            "sweat",
            "nervous"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😢",
        description: "crying face",
        category: "Smileys & Emotion",
        aliases: [
            "cry"
        ],
        tags: [
            "sad",
            "tear"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😭",
        description: "loudly crying face",
        category: "Smileys & Emotion",
        aliases: [
            "sob"
        ],
        tags: [
            "sad",
            "cry",
            "bawling"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😱",
        description: "face screaming in fear",
        category: "Smileys & Emotion",
        aliases: [
            "scream"
        ],
        tags: [
            "horror",
            "shocked"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😖",
        description: "confounded face",
        category: "Smileys & Emotion",
        aliases: [
            "confounded"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😣",
        description: "persevering face",
        category: "Smileys & Emotion",
        aliases: [
            "persevere"
        ],
        tags: [
            "struggling"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😞",
        description: "disappointed face",
        category: "Smileys & Emotion",
        aliases: [
            "disappointed"
        ],
        tags: [
            "sad"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😓",
        description: "downcast face with sweat",
        category: "Smileys & Emotion",
        aliases: [
            "sweat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😩",
        description: "weary face",
        category: "Smileys & Emotion",
        aliases: [
            "weary"
        ],
        tags: [
            "tired"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😫",
        description: "tired face",
        category: "Smileys & Emotion",
        aliases: [
            "tired_face"
        ],
        tags: [
            "upset",
            "whine"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥱",
        description: "yawning face",
        category: "Smileys & Emotion",
        aliases: [
            "yawning_face"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "😤",
        description: "face with steam from nose",
        category: "Smileys & Emotion",
        aliases: [
            "triumph"
        ],
        tags: [
            "smug"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😡",
        description: "pouting face",
        category: "Smileys & Emotion",
        aliases: [
            "rage",
            "pout"
        ],
        tags: [
            "angry"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😠",
        description: "angry face",
        category: "Smileys & Emotion",
        aliases: [
            "angry"
        ],
        tags: [
            "mad",
            "annoyed"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤬",
        description: "face with symbols on mouth",
        category: "Smileys & Emotion",
        aliases: [
            "cursing_face"
        ],
        tags: [
            "foul"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "😈",
        description: "smiling face with horns",
        category: "Smileys & Emotion",
        aliases: [
            "smiling_imp"
        ],
        tags: [
            "devil",
            "evil",
            "horns"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👿",
        description: "angry face with horns",
        category: "Smileys & Emotion",
        aliases: [
            "imp"
        ],
        tags: [
            "angry",
            "devil",
            "evil",
            "horns"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💀",
        description: "skull",
        category: "Smileys & Emotion",
        aliases: [
            "skull"
        ],
        tags: [
            "dead",
            "danger",
            "poison"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☠️",
        description: "skull and crossbones",
        category: "Smileys & Emotion",
        aliases: [
            "skull_and_crossbones"
        ],
        tags: [
            "danger",
            "pirate"
        ],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "💩",
        description: "pile of poo",
        category: "Smileys & Emotion",
        aliases: [
            "hankey",
            "poop",
            "shit"
        ],
        tags: [
            "crap"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤡",
        description: "clown face",
        category: "Smileys & Emotion",
        aliases: [
            "clown_face"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "👹",
        description: "ogre",
        category: "Smileys & Emotion",
        aliases: [
            "japanese_ogre"
        ],
        tags: [
            "monster"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👺",
        description: "goblin",
        category: "Smileys & Emotion",
        aliases: [
            "japanese_goblin"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👻",
        description: "ghost",
        category: "Smileys & Emotion",
        aliases: [
            "ghost"
        ],
        tags: [
            "halloween"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👽",
        description: "alien",
        category: "Smileys & Emotion",
        aliases: [
            "alien"
        ],
        tags: [
            "ufo"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👾",
        description: "alien monster",
        category: "Smileys & Emotion",
        aliases: [
            "space_invader"
        ],
        tags: [
            "game",
            "retro"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤖",
        description: "robot",
        category: "Smileys & Emotion",
        aliases: [
            "robot"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "😺",
        description: "grinning cat",
        category: "Smileys & Emotion",
        aliases: [
            "smiley_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😸",
        description: "grinning cat with smiling eyes",
        category: "Smileys & Emotion",
        aliases: [
            "smile_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😹",
        description: "cat with tears of joy",
        category: "Smileys & Emotion",
        aliases: [
            "joy_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😻",
        description: "smiling cat with heart-eyes",
        category: "Smileys & Emotion",
        aliases: [
            "heart_eyes_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😼",
        description: "cat with wry smile",
        category: "Smileys & Emotion",
        aliases: [
            "smirk_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😽",
        description: "kissing cat",
        category: "Smileys & Emotion",
        aliases: [
            "kissing_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🙀",
        description: "weary cat",
        category: "Smileys & Emotion",
        aliases: [
            "scream_cat"
        ],
        tags: [
            "horror"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😿",
        description: "crying cat",
        category: "Smileys & Emotion",
        aliases: [
            "crying_cat_face"
        ],
        tags: [
            "sad",
            "tear"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "😾",
        description: "pouting cat",
        category: "Smileys & Emotion",
        aliases: [
            "pouting_cat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🙈",
        description: "see-no-evil monkey",
        category: "Smileys & Emotion",
        aliases: [
            "see_no_evil"
        ],
        tags: [
            "monkey",
            "blind",
            "ignore"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🙉",
        description: "hear-no-evil monkey",
        category: "Smileys & Emotion",
        aliases: [
            "hear_no_evil"
        ],
        tags: [
            "monkey",
            "deaf"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🙊",
        description: "speak-no-evil monkey",
        category: "Smileys & Emotion",
        aliases: [
            "speak_no_evil"
        ],
        tags: [
            "monkey",
            "mute",
            "hush"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💋",
        description: "kiss mark",
        category: "Smileys & Emotion",
        aliases: [
            "kiss"
        ],
        tags: [
            "lipstick"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💌",
        description: "love letter",
        category: "Smileys & Emotion",
        aliases: [
            "love_letter"
        ],
        tags: [
            "email",
            "envelope"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💘",
        description: "heart with arrow",
        category: "Smileys & Emotion",
        aliases: [
            "cupid"
        ],
        tags: [
            "love",
            "heart"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💝",
        description: "heart with ribbon",
        category: "Smileys & Emotion",
        aliases: [
            "gift_heart"
        ],
        tags: [
            "chocolates"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💖",
        description: "sparkling heart",
        category: "Smileys & Emotion",
        aliases: [
            "sparkling_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💗",
        description: "growing heart",
        category: "Smileys & Emotion",
        aliases: [
            "heartpulse"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💓",
        description: "beating heart",
        category: "Smileys & Emotion",
        aliases: [
            "heartbeat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💞",
        description: "revolving hearts",
        category: "Smileys & Emotion",
        aliases: [
            "revolving_hearts"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💕",
        description: "two hearts",
        category: "Smileys & Emotion",
        aliases: [
            "two_hearts"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💟",
        description: "heart decoration",
        category: "Smileys & Emotion",
        aliases: [
            "heart_decoration"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❣️",
        description: "heart exclamation",
        category: "Smileys & Emotion",
        aliases: [
            "heavy_heart_exclamation"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "💔",
        description: "broken heart",
        category: "Smileys & Emotion",
        aliases: [
            "broken_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❤️",
        description: "red heart",
        category: "Smileys & Emotion",
        aliases: [
            "heart"
        ],
        tags: [
            "love"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🧡",
        description: "orange heart",
        category: "Smileys & Emotion",
        aliases: [
            "orange_heart"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "💛",
        description: "yellow heart",
        category: "Smileys & Emotion",
        aliases: [
            "yellow_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💚",
        description: "green heart",
        category: "Smileys & Emotion",
        aliases: [
            "green_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💙",
        description: "blue heart",
        category: "Smileys & Emotion",
        aliases: [
            "blue_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💜",
        description: "purple heart",
        category: "Smileys & Emotion",
        aliases: [
            "purple_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤎",
        description: "brown heart",
        category: "Smileys & Emotion",
        aliases: [
            "brown_heart"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🖤",
        description: "black heart",
        category: "Smileys & Emotion",
        aliases: [
            "black_heart"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🤍",
        description: "white heart",
        category: "Smileys & Emotion",
        aliases: [
            "white_heart"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "💯",
        description: "hundred points",
        category: "Smileys & Emotion",
        aliases: [
            "100"
        ],
        tags: [
            "score",
            "perfect"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💢",
        description: "anger symbol",
        category: "Smileys & Emotion",
        aliases: [
            "anger"
        ],
        tags: [
            "angry"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💥",
        description: "collision",
        category: "Smileys & Emotion",
        aliases: [
            "boom",
            "collision"
        ],
        tags: [
            "explode"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💫",
        description: "dizzy",
        category: "Smileys & Emotion",
        aliases: [
            "dizzy"
        ],
        tags: [
            "star"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💦",
        description: "sweat droplets",
        category: "Smileys & Emotion",
        aliases: [
            "sweat_drops"
        ],
        tags: [
            "water",
            "workout"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💨",
        description: "dashing away",
        category: "Smileys & Emotion",
        aliases: [
            "dash"
        ],
        tags: [
            "wind",
            "blow",
            "fast"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕳️",
        description: "hole",
        category: "Smileys & Emotion",
        aliases: [
            "hole"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "💣",
        description: "bomb",
        category: "Smileys & Emotion",
        aliases: [
            "bomb"
        ],
        tags: [
            "boom"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💬",
        description: "speech balloon",
        category: "Smileys & Emotion",
        aliases: [
            "speech_balloon"
        ],
        tags: [
            "comment"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👁️‍🗨️",
        description: "eye in speech bubble",
        category: "Smileys & Emotion",
        aliases: [
            "eye_speech_bubble"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🗨️",
        description: "left speech bubble",
        category: "Smileys & Emotion",
        aliases: [
            "left_speech_bubble"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🗯️",
        description: "right anger bubble",
        category: "Smileys & Emotion",
        aliases: [
            "right_anger_bubble"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "💭",
        description: "thought balloon",
        category: "Smileys & Emotion",
        aliases: [
            "thought_balloon"
        ],
        tags: [
            "thinking"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💤",
        description: "zzz",
        category: "Smileys & Emotion",
        aliases: [
            "zzz"
        ],
        tags: [
            "sleeping"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👋",
        description: "waving hand",
        category: "People & Body",
        aliases: [
            "wave"
        ],
        tags: [
            "goodbye"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤚",
        description: "raised back of hand",
        category: "People & Body",
        aliases: [
            "raised_back_of_hand"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🖐️",
        description: "hand with fingers splayed",
        category: "People & Body",
        aliases: [
            "raised_hand_with_fingers_splayed"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "✋",
        description: "raised hand",
        category: "People & Body",
        aliases: [
            "hand",
            "raised_hand"
        ],
        tags: [
            "highfive",
            "stop"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🖖",
        description: "vulcan salute",
        category: "People & Body",
        aliases: [
            "vulcan_salute"
        ],
        tags: [
            "prosper",
            "spock"
        ],
        unicodeVersion: "7.0",
        iosVersion: "8.3",
        skinTones: true
    },
    {
        emoji: "👌",
        description: "OK hand",
        category: "People & Body",
        aliases: [
            "ok_hand"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤌",
        description: "pinched fingers",
        category: "People & Body",
        aliases: [
            "pinched_fingers"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "🤏",
        description: "pinching hand",
        category: "People & Body",
        aliases: [
            "pinching_hand"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "✌️",
        description: "victory hand",
        category: "People & Body",
        aliases: [
            "v"
        ],
        tags: [
            "victory",
            "peace"
        ],
        unicodeVersion: "",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤞",
        description: "crossed fingers",
        category: "People & Body",
        aliases: [
            "crossed_fingers"
        ],
        tags: [
            "luck",
            "hopeful"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤟",
        description: "love-you gesture",
        category: "People & Body",
        aliases: [
            "love_you_gesture"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤘",
        description: "sign of the horns",
        category: "People & Body",
        aliases: [
            "metal"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "🤙",
        description: "call me hand",
        category: "People & Body",
        aliases: [
            "call_me_hand"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👈",
        description: "backhand index pointing left",
        category: "People & Body",
        aliases: [
            "point_left"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👉",
        description: "backhand index pointing right",
        category: "People & Body",
        aliases: [
            "point_right"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👆",
        description: "backhand index pointing up",
        category: "People & Body",
        aliases: [
            "point_up_2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🖕",
        description: "middle finger",
        category: "People & Body",
        aliases: [
            "middle_finger",
            "fu"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "👇",
        description: "backhand index pointing down",
        category: "People & Body",
        aliases: [
            "point_down"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "☝️",
        description: "index pointing up",
        category: "People & Body",
        aliases: [
            "point_up"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👍",
        description: "thumbs up",
        category: "People & Body",
        aliases: [
            "+1",
            "thumbsup"
        ],
        tags: [
            "approve",
            "ok"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👎",
        description: "thumbs down",
        category: "People & Body",
        aliases: [
            "-1",
            "thumbsdown"
        ],
        tags: [
            "disapprove",
            "bury"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "✊",
        description: "raised fist",
        category: "People & Body",
        aliases: [
            "fist_raised",
            "fist"
        ],
        tags: [
            "power"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👊",
        description: "oncoming fist",
        category: "People & Body",
        aliases: [
            "fist_oncoming",
            "facepunch",
            "punch"
        ],
        tags: [
            "attack"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤛",
        description: "left-facing fist",
        category: "People & Body",
        aliases: [
            "fist_left"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤜",
        description: "right-facing fist",
        category: "People & Body",
        aliases: [
            "fist_right"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👏",
        description: "clapping hands",
        category: "People & Body",
        aliases: [
            "clap"
        ],
        tags: [
            "praise",
            "applause"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙌",
        description: "raising hands",
        category: "People & Body",
        aliases: [
            "raised_hands"
        ],
        tags: [
            "hooray"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👐",
        description: "open hands",
        category: "People & Body",
        aliases: [
            "open_hands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤲",
        description: "palms up together",
        category: "People & Body",
        aliases: [
            "palms_up_together"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤝",
        description: "handshake",
        category: "People & Body",
        aliases: [
            "handshake"
        ],
        tags: [
            "deal"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🙏",
        description: "folded hands",
        category: "People & Body",
        aliases: [
            "pray"
        ],
        tags: [
            "please",
            "hope",
            "wish"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "✍️",
        description: "writing hand",
        category: "People & Body",
        aliases: [
            "writing_hand"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "💅",
        description: "nail polish",
        category: "People & Body",
        aliases: [
            "nail_care"
        ],
        tags: [
            "beauty",
            "manicure"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤳",
        description: "selfie",
        category: "People & Body",
        aliases: [
            "selfie"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "💪",
        description: "flexed biceps",
        category: "People & Body",
        aliases: [
            "muscle"
        ],
        tags: [
            "flex",
            "bicep",
            "strong",
            "workout"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🦾",
        description: "mechanical arm",
        category: "People & Body",
        aliases: [
            "mechanical_arm"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦿",
        description: "mechanical leg",
        category: "People & Body",
        aliases: [
            "mechanical_leg"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦵",
        description: "leg",
        category: "People & Body",
        aliases: [
            "leg"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🦶",
        description: "foot",
        category: "People & Body",
        aliases: [
            "foot"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👂",
        description: "ear",
        category: "People & Body",
        aliases: [
            "ear"
        ],
        tags: [
            "hear",
            "sound",
            "listen"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🦻",
        description: "ear with hearing aid",
        category: "People & Body",
        aliases: [
            "ear_with_hearing_aid"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "👃",
        description: "nose",
        category: "People & Body",
        aliases: [
            "nose"
        ],
        tags: [
            "smell"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🧠",
        description: "brain",
        category: "People & Body",
        aliases: [
            "brain"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🫀",
        description: "anatomical heart",
        category: "People & Body",
        aliases: [
            "anatomical_heart"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🫁",
        description: "lungs",
        category: "People & Body",
        aliases: [
            "lungs"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🦷",
        description: "tooth",
        category: "People & Body",
        aliases: [
            "tooth"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦴",
        description: "bone",
        category: "People & Body",
        aliases: [
            "bone"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "👀",
        description: "eyes",
        category: "People & Body",
        aliases: [
            "eyes"
        ],
        tags: [
            "look",
            "see",
            "watch"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👁️",
        description: "eye",
        category: "People & Body",
        aliases: [
            "eye"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "👅",
        description: "tongue",
        category: "People & Body",
        aliases: [
            "tongue"
        ],
        tags: [
            "taste"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👄",
        description: "mouth",
        category: "People & Body",
        aliases: [
            "lips"
        ],
        tags: [
            "kiss"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👶",
        description: "baby",
        category: "People & Body",
        aliases: [
            "baby"
        ],
        tags: [
            "child",
            "newborn"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🧒",
        description: "child",
        category: "People & Body",
        aliases: [
            "child"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👦",
        description: "boy",
        category: "People & Body",
        aliases: [
            "boy"
        ],
        tags: [
            "child"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👧",
        description: "girl",
        category: "People & Body",
        aliases: [
            "girl"
        ],
        tags: [
            "child"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🧑",
        description: "person",
        category: "People & Body",
        aliases: [
            "adult"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👱",
        description: "person: blond hair",
        category: "People & Body",
        aliases: [
            "blond_haired_person"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👨",
        description: "man",
        category: "People & Body",
        aliases: [
            "man"
        ],
        tags: [
            "mustache",
            "father",
            "dad"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🧔",
        description: "man: beard",
        category: "People & Body",
        aliases: [
            "bearded_person"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👨‍🦰",
        description: "man: red hair",
        category: "People & Body",
        aliases: [
            "red_haired_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👨‍🦱",
        description: "man: curly hair",
        category: "People & Body",
        aliases: [
            "curly_haired_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👨‍🦳",
        description: "man: white hair",
        category: "People & Body",
        aliases: [
            "white_haired_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👨‍🦲",
        description: "man: bald",
        category: "People & Body",
        aliases: [
            "bald_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👩",
        description: "woman",
        category: "People & Body",
        aliases: [
            "woman"
        ],
        tags: [
            "girls"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👩‍🦰",
        description: "woman: red hair",
        category: "People & Body",
        aliases: [
            "red_haired_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧑‍🦰",
        description: "person: red hair",
        category: "People & Body",
        aliases: [
            "person_red_hair"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👩‍🦱",
        description: "woman: curly hair",
        category: "People & Body",
        aliases: [
            "curly_haired_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧑‍🦱",
        description: "person: curly hair",
        category: "People & Body",
        aliases: [
            "person_curly_hair"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👩‍🦳",
        description: "woman: white hair",
        category: "People & Body",
        aliases: [
            "white_haired_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧑‍🦳",
        description: "person: white hair",
        category: "People & Body",
        aliases: [
            "person_white_hair"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👩‍🦲",
        description: "woman: bald",
        category: "People & Body",
        aliases: [
            "bald_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧑‍🦲",
        description: "person: bald",
        category: "People & Body",
        aliases: [
            "person_bald"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👱‍♀️",
        description: "woman: blond hair",
        category: "People & Body",
        aliases: [
            "blond_haired_woman",
            "blonde_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "👱‍♂️",
        description: "man: blond hair",
        category: "People & Body",
        aliases: [
            "blond_haired_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧓",
        description: "older person",
        category: "People & Body",
        aliases: [
            "older_adult"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👴",
        description: "old man",
        category: "People & Body",
        aliases: [
            "older_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👵",
        description: "old woman",
        category: "People & Body",
        aliases: [
            "older_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙍",
        description: "person frowning",
        category: "People & Body",
        aliases: [
            "frowning_person"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙍‍♂️",
        description: "man frowning",
        category: "People & Body",
        aliases: [
            "frowning_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🙍‍♀️",
        description: "woman frowning",
        category: "People & Body",
        aliases: [
            "frowning_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🙎",
        description: "person pouting",
        category: "People & Body",
        aliases: [
            "pouting_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙎‍♂️",
        description: "man pouting",
        category: "People & Body",
        aliases: [
            "pouting_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🙎‍♀️",
        description: "woman pouting",
        category: "People & Body",
        aliases: [
            "pouting_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🙅",
        description: "person gesturing NO",
        category: "People & Body",
        aliases: [
            "no_good"
        ],
        tags: [
            "stop",
            "halt",
            "denied"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙅‍♂️",
        description: "man gesturing NO",
        category: "People & Body",
        aliases: [
            "no_good_man",
            "ng_man"
        ],
        tags: [
            "stop",
            "halt",
            "denied"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🙅‍♀️",
        description: "woman gesturing NO",
        category: "People & Body",
        aliases: [
            "no_good_woman",
            "ng_woman"
        ],
        tags: [
            "stop",
            "halt",
            "denied"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🙆",
        description: "person gesturing OK",
        category: "People & Body",
        aliases: [
            "ok_person"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙆‍♂️",
        description: "man gesturing OK",
        category: "People & Body",
        aliases: [
            "ok_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🙆‍♀️",
        description: "woman gesturing OK",
        category: "People & Body",
        aliases: [
            "ok_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "💁",
        description: "person tipping hand",
        category: "People & Body",
        aliases: [
            "tipping_hand_person",
            "information_desk_person"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "💁‍♂️",
        description: "man tipping hand",
        category: "People & Body",
        aliases: [
            "tipping_hand_man",
            "sassy_man"
        ],
        tags: [
            "information"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "💁‍♀️",
        description: "woman tipping hand",
        category: "People & Body",
        aliases: [
            "tipping_hand_woman",
            "sassy_woman"
        ],
        tags: [
            "information"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🙋",
        description: "person raising hand",
        category: "People & Body",
        aliases: [
            "raising_hand"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙋‍♂️",
        description: "man raising hand",
        category: "People & Body",
        aliases: [
            "raising_hand_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🙋‍♀️",
        description: "woman raising hand",
        category: "People & Body",
        aliases: [
            "raising_hand_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧏",
        description: "deaf person",
        category: "People & Body",
        aliases: [
            "deaf_person"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧏‍♂️",
        description: "deaf man",
        category: "People & Body",
        aliases: [
            "deaf_man"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧏‍♀️",
        description: "deaf woman",
        category: "People & Body",
        aliases: [
            "deaf_woman"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🙇",
        description: "person bowing",
        category: "People & Body",
        aliases: [
            "bow"
        ],
        tags: [
            "respect",
            "thanks"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🙇‍♂️",
        description: "man bowing",
        category: "People & Body",
        aliases: [
            "bowing_man"
        ],
        tags: [
            "respect",
            "thanks"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🙇‍♀️",
        description: "woman bowing",
        category: "People & Body",
        aliases: [
            "bowing_woman"
        ],
        tags: [
            "respect",
            "thanks"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🤦",
        description: "person facepalming",
        category: "People & Body",
        aliases: [
            "facepalm"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤦‍♂️",
        description: "man facepalming",
        category: "People & Body",
        aliases: [
            "man_facepalming"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤦‍♀️",
        description: "woman facepalming",
        category: "People & Body",
        aliases: [
            "woman_facepalming"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤷",
        description: "person shrugging",
        category: "People & Body",
        aliases: [
            "shrug"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤷‍♂️",
        description: "man shrugging",
        category: "People & Body",
        aliases: [
            "man_shrugging"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤷‍♀️",
        description: "woman shrugging",
        category: "People & Body",
        aliases: [
            "woman_shrugging"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍⚕️",
        description: "health worker",
        category: "People & Body",
        aliases: [
            "health_worker"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍⚕️",
        description: "man health worker",
        category: "People & Body",
        aliases: [
            "man_health_worker"
        ],
        tags: [
            "doctor",
            "nurse"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍⚕️",
        description: "woman health worker",
        category: "People & Body",
        aliases: [
            "woman_health_worker"
        ],
        tags: [
            "doctor",
            "nurse"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🎓",
        description: "student",
        category: "People & Body",
        aliases: [
            "student"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🎓",
        description: "man student",
        category: "People & Body",
        aliases: [
            "man_student"
        ],
        tags: [
            "graduation"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🎓",
        description: "woman student",
        category: "People & Body",
        aliases: [
            "woman_student"
        ],
        tags: [
            "graduation"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🏫",
        description: "teacher",
        category: "People & Body",
        aliases: [
            "teacher"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🏫",
        description: "man teacher",
        category: "People & Body",
        aliases: [
            "man_teacher"
        ],
        tags: [
            "school",
            "professor"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🏫",
        description: "woman teacher",
        category: "People & Body",
        aliases: [
            "woman_teacher"
        ],
        tags: [
            "school",
            "professor"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍⚖️",
        description: "judge",
        category: "People & Body",
        aliases: [
            "judge"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍⚖️",
        description: "man judge",
        category: "People & Body",
        aliases: [
            "man_judge"
        ],
        tags: [
            "justice"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍⚖️",
        description: "woman judge",
        category: "People & Body",
        aliases: [
            "woman_judge"
        ],
        tags: [
            "justice"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🌾",
        description: "farmer",
        category: "People & Body",
        aliases: [
            "farmer"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🌾",
        description: "man farmer",
        category: "People & Body",
        aliases: [
            "man_farmer"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🌾",
        description: "woman farmer",
        category: "People & Body",
        aliases: [
            "woman_farmer"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🍳",
        description: "cook",
        category: "People & Body",
        aliases: [
            "cook"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🍳",
        description: "man cook",
        category: "People & Body",
        aliases: [
            "man_cook"
        ],
        tags: [
            "chef"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🍳",
        description: "woman cook",
        category: "People & Body",
        aliases: [
            "woman_cook"
        ],
        tags: [
            "chef"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🔧",
        description: "mechanic",
        category: "People & Body",
        aliases: [
            "mechanic"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🔧",
        description: "man mechanic",
        category: "People & Body",
        aliases: [
            "man_mechanic"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🔧",
        description: "woman mechanic",
        category: "People & Body",
        aliases: [
            "woman_mechanic"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🏭",
        description: "factory worker",
        category: "People & Body",
        aliases: [
            "factory_worker"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🏭",
        description: "man factory worker",
        category: "People & Body",
        aliases: [
            "man_factory_worker"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🏭",
        description: "woman factory worker",
        category: "People & Body",
        aliases: [
            "woman_factory_worker"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍💼",
        description: "office worker",
        category: "People & Body",
        aliases: [
            "office_worker"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍💼",
        description: "man office worker",
        category: "People & Body",
        aliases: [
            "man_office_worker"
        ],
        tags: [
            "business"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍💼",
        description: "woman office worker",
        category: "People & Body",
        aliases: [
            "woman_office_worker"
        ],
        tags: [
            "business"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🔬",
        description: "scientist",
        category: "People & Body",
        aliases: [
            "scientist"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🔬",
        description: "man scientist",
        category: "People & Body",
        aliases: [
            "man_scientist"
        ],
        tags: [
            "research"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🔬",
        description: "woman scientist",
        category: "People & Body",
        aliases: [
            "woman_scientist"
        ],
        tags: [
            "research"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍💻",
        description: "technologist",
        category: "People & Body",
        aliases: [
            "technologist"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍💻",
        description: "man technologist",
        category: "People & Body",
        aliases: [
            "man_technologist"
        ],
        tags: [
            "coder"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍💻",
        description: "woman technologist",
        category: "People & Body",
        aliases: [
            "woman_technologist"
        ],
        tags: [
            "coder"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🎤",
        description: "singer",
        category: "People & Body",
        aliases: [
            "singer"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🎤",
        description: "man singer",
        category: "People & Body",
        aliases: [
            "man_singer"
        ],
        tags: [
            "rockstar"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🎤",
        description: "woman singer",
        category: "People & Body",
        aliases: [
            "woman_singer"
        ],
        tags: [
            "rockstar"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🎨",
        description: "artist",
        category: "People & Body",
        aliases: [
            "artist"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🎨",
        description: "man artist",
        category: "People & Body",
        aliases: [
            "man_artist"
        ],
        tags: [
            "painter"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🎨",
        description: "woman artist",
        category: "People & Body",
        aliases: [
            "woman_artist"
        ],
        tags: [
            "painter"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍✈️",
        description: "pilot",
        category: "People & Body",
        aliases: [
            "pilot"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍✈️",
        description: "man pilot",
        category: "People & Body",
        aliases: [
            "man_pilot"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍✈️",
        description: "woman pilot",
        category: "People & Body",
        aliases: [
            "woman_pilot"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🚀",
        description: "astronaut",
        category: "People & Body",
        aliases: [
            "astronaut"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🚀",
        description: "man astronaut",
        category: "People & Body",
        aliases: [
            "man_astronaut"
        ],
        tags: [
            "space"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🚀",
        description: "woman astronaut",
        category: "People & Body",
        aliases: [
            "woman_astronaut"
        ],
        tags: [
            "space"
        ],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🚒",
        description: "firefighter",
        category: "People & Body",
        aliases: [
            "firefighter"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🚒",
        description: "man firefighter",
        category: "People & Body",
        aliases: [
            "man_firefighter"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👩‍🚒",
        description: "woman firefighter",
        category: "People & Body",
        aliases: [
            "woman_firefighter"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👮",
        description: "police officer",
        category: "People & Body",
        aliases: [
            "police_officer",
            "cop"
        ],
        tags: [
            "law"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👮‍♂️",
        description: "man police officer",
        category: "People & Body",
        aliases: [
            "policeman"
        ],
        tags: [
            "law",
            "cop"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👮‍♀️",
        description: "woman police officer",
        category: "People & Body",
        aliases: [
            "policewoman"
        ],
        tags: [
            "law",
            "cop"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🕵️",
        description: "detective",
        category: "People & Body",
        aliases: [
            "detective"
        ],
        tags: [
            "sleuth"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "🕵️‍♂️",
        description: "man detective",
        category: "People & Body",
        aliases: [
            "male_detective"
        ],
        tags: [
            "sleuth"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🕵️‍♀️",
        description: "woman detective",
        category: "People & Body",
        aliases: [
            "female_detective"
        ],
        tags: [
            "sleuth"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "💂",
        description: "guard",
        category: "People & Body",
        aliases: [
            "guard"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "💂‍♂️",
        description: "man guard",
        category: "People & Body",
        aliases: [
            "guardsman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "💂‍♀️",
        description: "woman guard",
        category: "People & Body",
        aliases: [
            "guardswoman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🥷",
        description: "ninja",
        category: "People & Body",
        aliases: [
            "ninja"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "👷",
        description: "construction worker",
        category: "People & Body",
        aliases: [
            "construction_worker"
        ],
        tags: [
            "helmet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👷‍♂️",
        description: "man construction worker",
        category: "People & Body",
        aliases: [
            "construction_worker_man"
        ],
        tags: [
            "helmet"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👷‍♀️",
        description: "woman construction worker",
        category: "People & Body",
        aliases: [
            "construction_worker_woman"
        ],
        tags: [
            "helmet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🤴",
        description: "prince",
        category: "People & Body",
        aliases: [
            "prince"
        ],
        tags: [
            "crown",
            "royal"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "👸",
        description: "princess",
        category: "People & Body",
        aliases: [
            "princess"
        ],
        tags: [
            "crown",
            "royal"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👳",
        description: "person wearing turban",
        category: "People & Body",
        aliases: [
            "person_with_turban"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👳‍♂️",
        description: "man wearing turban",
        category: "People & Body",
        aliases: [
            "man_with_turban"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👳‍♀️",
        description: "woman wearing turban",
        category: "People & Body",
        aliases: [
            "woman_with_turban"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "👲",
        description: "person with skullcap",
        category: "People & Body",
        aliases: [
            "man_with_gua_pi_mao"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🧕",
        description: "woman with headscarf",
        category: "People & Body",
        aliases: [
            "woman_with_headscarf"
        ],
        tags: [
            "hijab"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤵",
        description: "person in tuxedo",
        category: "People & Body",
        aliases: [
            "person_in_tuxedo"
        ],
        tags: [
            "groom",
            "marriage",
            "wedding"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤵‍♂️",
        description: "man in tuxedo",
        category: "People & Body",
        aliases: [
            "man_in_tuxedo"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "🤵‍♀️",
        description: "woman in tuxedo",
        category: "People & Body",
        aliases: [
            "woman_in_tuxedo"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "👰",
        description: "person with veil",
        category: "People & Body",
        aliases: [
            "person_with_veil"
        ],
        tags: [
            "marriage",
            "wedding"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👰‍♂️",
        description: "man with veil",
        category: "People & Body",
        aliases: [
            "man_with_veil"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "👰‍♀️",
        description: "woman with veil",
        category: "People & Body",
        aliases: [
            "woman_with_veil",
            "bride_with_veil"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "🤰",
        description: "pregnant woman",
        category: "People & Body",
        aliases: [
            "pregnant_woman"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤱",
        description: "breast-feeding",
        category: "People & Body",
        aliases: [
            "breast_feeding"
        ],
        tags: [
            "nursing"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "👩‍🍼",
        description: "woman feeding baby",
        category: "People & Body",
        aliases: [
            "woman_feeding_baby"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "👨‍🍼",
        description: "man feeding baby",
        category: "People & Body",
        aliases: [
            "man_feeding_baby"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "🧑‍🍼",
        description: "person feeding baby",
        category: "People & Body",
        aliases: [
            "person_feeding_baby"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "👼",
        description: "baby angel",
        category: "People & Body",
        aliases: [
            "angel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🎅",
        description: "Santa Claus",
        category: "People & Body",
        aliases: [
            "santa"
        ],
        tags: [
            "christmas"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🤶",
        description: "Mrs. Claus",
        category: "People & Body",
        aliases: [
            "mrs_claus"
        ],
        tags: [
            "santa"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧑‍🎄",
        description: "mx claus",
        category: "People & Body",
        aliases: [
            "mx_claus"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0",
        skinTones: true
    },
    {
        emoji: "🦸",
        description: "superhero",
        category: "People & Body",
        aliases: [
            "superhero"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🦸‍♂️",
        description: "man superhero",
        category: "People & Body",
        aliases: [
            "superhero_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🦸‍♀️",
        description: "woman superhero",
        category: "People & Body",
        aliases: [
            "superhero_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🦹",
        description: "supervillain",
        category: "People & Body",
        aliases: [
            "supervillain"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🦹‍♂️",
        description: "man supervillain",
        category: "People & Body",
        aliases: [
            "supervillain_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🦹‍♀️",
        description: "woman supervillain",
        category: "People & Body",
        aliases: [
            "supervillain_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧙",
        description: "mage",
        category: "People & Body",
        aliases: [
            "mage"
        ],
        tags: [
            "wizard"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧙‍♂️",
        description: "man mage",
        category: "People & Body",
        aliases: [
            "mage_man"
        ],
        tags: [
            "wizard"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧙‍♀️",
        description: "woman mage",
        category: "People & Body",
        aliases: [
            "mage_woman"
        ],
        tags: [
            "wizard"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧚",
        description: "fairy",
        category: "People & Body",
        aliases: [
            "fairy"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧚‍♂️",
        description: "man fairy",
        category: "People & Body",
        aliases: [
            "fairy_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧚‍♀️",
        description: "woman fairy",
        category: "People & Body",
        aliases: [
            "fairy_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧛",
        description: "vampire",
        category: "People & Body",
        aliases: [
            "vampire"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧛‍♂️",
        description: "man vampire",
        category: "People & Body",
        aliases: [
            "vampire_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧛‍♀️",
        description: "woman vampire",
        category: "People & Body",
        aliases: [
            "vampire_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧜",
        description: "merperson",
        category: "People & Body",
        aliases: [
            "merperson"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧜‍♂️",
        description: "merman",
        category: "People & Body",
        aliases: [
            "merman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧜‍♀️",
        description: "mermaid",
        category: "People & Body",
        aliases: [
            "mermaid"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧝",
        description: "elf",
        category: "People & Body",
        aliases: [
            "elf"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧝‍♂️",
        description: "man elf",
        category: "People & Body",
        aliases: [
            "elf_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧝‍♀️",
        description: "woman elf",
        category: "People & Body",
        aliases: [
            "elf_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧞",
        description: "genie",
        category: "People & Body",
        aliases: [
            "genie"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧞‍♂️",
        description: "man genie",
        category: "People & Body",
        aliases: [
            "genie_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧞‍♀️",
        description: "woman genie",
        category: "People & Body",
        aliases: [
            "genie_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧟",
        description: "zombie",
        category: "People & Body",
        aliases: [
            "zombie"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧟‍♂️",
        description: "man zombie",
        category: "People & Body",
        aliases: [
            "zombie_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧟‍♀️",
        description: "woman zombie",
        category: "People & Body",
        aliases: [
            "zombie_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "💆",
        description: "person getting massage",
        category: "People & Body",
        aliases: [
            "massage"
        ],
        tags: [
            "spa"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "💆‍♂️",
        description: "man getting massage",
        category: "People & Body",
        aliases: [
            "massage_man"
        ],
        tags: [
            "spa"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "💆‍♀️",
        description: "woman getting massage",
        category: "People & Body",
        aliases: [
            "massage_woman"
        ],
        tags: [
            "spa"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "💇",
        description: "person getting haircut",
        category: "People & Body",
        aliases: [
            "haircut"
        ],
        tags: [
            "beauty"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "💇‍♂️",
        description: "man getting haircut",
        category: "People & Body",
        aliases: [
            "haircut_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "💇‍♀️",
        description: "woman getting haircut",
        category: "People & Body",
        aliases: [
            "haircut_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🚶",
        description: "person walking",
        category: "People & Body",
        aliases: [
            "walking"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🚶‍♂️",
        description: "man walking",
        category: "People & Body",
        aliases: [
            "walking_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🚶‍♀️",
        description: "woman walking",
        category: "People & Body",
        aliases: [
            "walking_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🧍",
        description: "person standing",
        category: "People & Body",
        aliases: [
            "standing_person"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧍‍♂️",
        description: "man standing",
        category: "People & Body",
        aliases: [
            "standing_man"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧍‍♀️",
        description: "woman standing",
        category: "People & Body",
        aliases: [
            "standing_woman"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧎",
        description: "person kneeling",
        category: "People & Body",
        aliases: [
            "kneeling_person"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧎‍♂️",
        description: "man kneeling",
        category: "People & Body",
        aliases: [
            "kneeling_man"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧎‍♀️",
        description: "woman kneeling",
        category: "People & Body",
        aliases: [
            "kneeling_woman"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧑‍🦯",
        description: "person with white cane",
        category: "People & Body",
        aliases: [
            "person_with_probing_cane"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🦯",
        description: "man with white cane",
        category: "People & Body",
        aliases: [
            "man_with_probing_cane"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "👩‍🦯",
        description: "woman with white cane",
        category: "People & Body",
        aliases: [
            "woman_with_probing_cane"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧑‍🦼",
        description: "person in motorized wheelchair",
        category: "People & Body",
        aliases: [
            "person_in_motorized_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🦼",
        description: "man in motorized wheelchair",
        category: "People & Body",
        aliases: [
            "man_in_motorized_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "👩‍🦼",
        description: "woman in motorized wheelchair",
        category: "People & Body",
        aliases: [
            "woman_in_motorized_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🧑‍🦽",
        description: "person in manual wheelchair",
        category: "People & Body",
        aliases: [
            "person_in_manual_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.1",
        iosVersion: "13.2",
        skinTones: true
    },
    {
        emoji: "👨‍🦽",
        description: "man in manual wheelchair",
        category: "People & Body",
        aliases: [
            "man_in_manual_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "👩‍🦽",
        description: "woman in manual wheelchair",
        category: "People & Body",
        aliases: [
            "woman_in_manual_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "🏃",
        description: "person running",
        category: "People & Body",
        aliases: [
            "runner",
            "running"
        ],
        tags: [
            "exercise",
            "workout",
            "marathon"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🏃‍♂️",
        description: "man running",
        category: "People & Body",
        aliases: [
            "running_man"
        ],
        tags: [
            "exercise",
            "workout",
            "marathon"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🏃‍♀️",
        description: "woman running",
        category: "People & Body",
        aliases: [
            "running_woman"
        ],
        tags: [
            "exercise",
            "workout",
            "marathon"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "💃",
        description: "woman dancing",
        category: "People & Body",
        aliases: [
            "woman_dancing",
            "dancer"
        ],
        tags: [
            "dress"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🕺",
        description: "man dancing",
        category: "People & Body",
        aliases: [
            "man_dancing"
        ],
        tags: [
            "dancer"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🕴️",
        description: "person in suit levitating",
        category: "People & Body",
        aliases: [
            "business_suit_levitating"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "👯",
        description: "people with bunny ears",
        category: "People & Body",
        aliases: [
            "dancers"
        ],
        tags: [
            "bunny"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👯‍♂️",
        description: "men with bunny ears",
        category: "People & Body",
        aliases: [
            "dancing_men"
        ],
        tags: [
            "bunny"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👯‍♀️",
        description: "women with bunny ears",
        category: "People & Body",
        aliases: [
            "dancing_women"
        ],
        tags: [
            "bunny"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧖",
        description: "person in steamy room",
        category: "People & Body",
        aliases: [
            "sauna_person"
        ],
        tags: [
            "steamy"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧖‍♂️",
        description: "man in steamy room",
        category: "People & Body",
        aliases: [
            "sauna_man"
        ],
        tags: [
            "steamy"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧖‍♀️",
        description: "woman in steamy room",
        category: "People & Body",
        aliases: [
            "sauna_woman"
        ],
        tags: [
            "steamy"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧗",
        description: "person climbing",
        category: "People & Body",
        aliases: [
            "climbing"
        ],
        tags: [
            "bouldering"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧗‍♂️",
        description: "man climbing",
        category: "People & Body",
        aliases: [
            "climbing_man"
        ],
        tags: [
            "bouldering"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧗‍♀️",
        description: "woman climbing",
        category: "People & Body",
        aliases: [
            "climbing_woman"
        ],
        tags: [
            "bouldering"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤺",
        description: "person fencing",
        category: "People & Body",
        aliases: [
            "person_fencing"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🏇",
        description: "horse racing",
        category: "People & Body",
        aliases: [
            "horse_racing"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "⛷️",
        description: "skier",
        category: "People & Body",
        aliases: [
            "skier"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🏂",
        description: "snowboarder",
        category: "People & Body",
        aliases: [
            "snowboarder"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🏌️",
        description: "person golfing",
        category: "People & Body",
        aliases: [
            "golfing"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "🏌️‍♂️",
        description: "man golfing",
        category: "People & Body",
        aliases: [
            "golfing_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🏌️‍♀️",
        description: "woman golfing",
        category: "People & Body",
        aliases: [
            "golfing_woman"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🏄",
        description: "person surfing",
        category: "People & Body",
        aliases: [
            "surfer"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🏄‍♂️",
        description: "man surfing",
        category: "People & Body",
        aliases: [
            "surfing_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🏄‍♀️",
        description: "woman surfing",
        category: "People & Body",
        aliases: [
            "surfing_woman"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🚣",
        description: "person rowing boat",
        category: "People & Body",
        aliases: [
            "rowboat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🚣‍♂️",
        description: "man rowing boat",
        category: "People & Body",
        aliases: [
            "rowing_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🚣‍♀️",
        description: "woman rowing boat",
        category: "People & Body",
        aliases: [
            "rowing_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🏊",
        description: "person swimming",
        category: "People & Body",
        aliases: [
            "swimmer"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🏊‍♂️",
        description: "man swimming",
        category: "People & Body",
        aliases: [
            "swimming_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🏊‍♀️",
        description: "woman swimming",
        category: "People & Body",
        aliases: [
            "swimming_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "⛹️",
        description: "person bouncing ball",
        category: "People & Body",
        aliases: [
            "bouncing_ball_person"
        ],
        tags: [
            "basketball"
        ],
        unicodeVersion: "5.2",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "⛹️‍♂️",
        description: "man bouncing ball",
        category: "People & Body",
        aliases: [
            "bouncing_ball_man",
            "basketball_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "⛹️‍♀️",
        description: "woman bouncing ball",
        category: "People & Body",
        aliases: [
            "bouncing_ball_woman",
            "basketball_woman"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🏋️",
        description: "person lifting weights",
        category: "People & Body",
        aliases: [
            "weight_lifting"
        ],
        tags: [
            "gym",
            "workout"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "🏋️‍♂️",
        description: "man lifting weights",
        category: "People & Body",
        aliases: [
            "weight_lifting_man"
        ],
        tags: [
            "gym",
            "workout"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🏋️‍♀️",
        description: "woman lifting weights",
        category: "People & Body",
        aliases: [
            "weight_lifting_woman"
        ],
        tags: [
            "gym",
            "workout"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🚴",
        description: "person biking",
        category: "People & Body",
        aliases: [
            "bicyclist"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🚴‍♂️",
        description: "man biking",
        category: "People & Body",
        aliases: [
            "biking_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🚴‍♀️",
        description: "woman biking",
        category: "People & Body",
        aliases: [
            "biking_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🚵",
        description: "person mountain biking",
        category: "People & Body",
        aliases: [
            "mountain_bicyclist"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🚵‍♂️",
        description: "man mountain biking",
        category: "People & Body",
        aliases: [
            "mountain_biking_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🚵‍♀️",
        description: "woman mountain biking",
        category: "People & Body",
        aliases: [
            "mountain_biking_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0",
        skinTones: true
    },
    {
        emoji: "🤸",
        description: "person cartwheeling",
        category: "People & Body",
        aliases: [
            "cartwheeling"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤸‍♂️",
        description: "man cartwheeling",
        category: "People & Body",
        aliases: [
            "man_cartwheeling"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤸‍♀️",
        description: "woman cartwheeling",
        category: "People & Body",
        aliases: [
            "woman_cartwheeling"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤼",
        description: "people wrestling",
        category: "People & Body",
        aliases: [
            "wrestling"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🤼‍♂️",
        description: "men wrestling",
        category: "People & Body",
        aliases: [
            "men_wrestling"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🤼‍♀️",
        description: "women wrestling",
        category: "People & Body",
        aliases: [
            "women_wrestling"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🤽",
        description: "person playing water polo",
        category: "People & Body",
        aliases: [
            "water_polo"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤽‍♂️",
        description: "man playing water polo",
        category: "People & Body",
        aliases: [
            "man_playing_water_polo"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤽‍♀️",
        description: "woman playing water polo",
        category: "People & Body",
        aliases: [
            "woman_playing_water_polo"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤾",
        description: "person playing handball",
        category: "People & Body",
        aliases: [
            "handball_person"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤾‍♂️",
        description: "man playing handball",
        category: "People & Body",
        aliases: [
            "man_playing_handball"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤾‍♀️",
        description: "woman playing handball",
        category: "People & Body",
        aliases: [
            "woman_playing_handball"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤹",
        description: "person juggling",
        category: "People & Body",
        aliases: [
            "juggling_person"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🤹‍♂️",
        description: "man juggling",
        category: "People & Body",
        aliases: [
            "man_juggling"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🤹‍♀️",
        description: "woman juggling",
        category: "People & Body",
        aliases: [
            "woman_juggling"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2",
        skinTones: true
    },
    {
        emoji: "🧘",
        description: "person in lotus position",
        category: "People & Body",
        aliases: [
            "lotus_position"
        ],
        tags: [
            "meditation"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧘‍♂️",
        description: "man in lotus position",
        category: "People & Body",
        aliases: [
            "lotus_position_man"
        ],
        tags: [
            "meditation"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🧘‍♀️",
        description: "woman in lotus position",
        category: "People & Body",
        aliases: [
            "lotus_position_woman"
        ],
        tags: [
            "meditation"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1",
        skinTones: true
    },
    {
        emoji: "🛀",
        description: "person taking bath",
        category: "People & Body",
        aliases: [
            "bath"
        ],
        tags: [
            "shower"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "🛌",
        description: "person in bed",
        category: "People & Body",
        aliases: [
            "sleeping_bed"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1",
        skinTones: true
    },
    {
        emoji: "🧑‍🤝‍🧑",
        description: "people holding hands",
        category: "People & Body",
        aliases: [
            "people_holding_hands"
        ],
        tags: [
            "couple",
            "date"
        ],
        unicodeVersion: "12.0",
        iosVersion: "13.0",
        skinTones: true
    },
    {
        emoji: "👭",
        description: "women holding hands",
        category: "People & Body",
        aliases: [
            "two_women_holding_hands"
        ],
        tags: [
            "couple",
            "date"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👫",
        description: "woman and man holding hands",
        category: "People & Body",
        aliases: [
            "couple"
        ],
        tags: [
            "date"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "👬",
        description: "men holding hands",
        category: "People & Body",
        aliases: [
            "two_men_holding_hands"
        ],
        tags: [
            "couple",
            "date"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0",
        skinTones: true
    },
    {
        emoji: "💏",
        description: "kiss",
        category: "People & Body",
        aliases: [
            "couplekiss"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👩‍❤️‍💋‍👨",
        description: "kiss: woman, man",
        category: "People & Body",
        aliases: [
            "couplekiss_man_woman"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "👨‍❤️‍💋‍👨",
        description: "kiss: man, man",
        category: "People & Body",
        aliases: [
            "couplekiss_man_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍❤️‍💋‍👩",
        description: "kiss: woman, woman",
        category: "People & Body",
        aliases: [
            "couplekiss_woman_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "💑",
        description: "couple with heart",
        category: "People & Body",
        aliases: [
            "couple_with_heart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👩‍❤️‍👨",
        description: "couple with heart: woman, man",
        category: "People & Body",
        aliases: [
            "couple_with_heart_woman_man"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "👨‍❤️‍👨",
        description: "couple with heart: man, man",
        category: "People & Body",
        aliases: [
            "couple_with_heart_man_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍❤️‍👩",
        description: "couple with heart: woman, woman",
        category: "People & Body",
        aliases: [
            "couple_with_heart_woman_woman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👪",
        description: "family",
        category: "People & Body",
        aliases: [
            "family"
        ],
        tags: [
            "home",
            "parents",
            "child"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👨‍👩‍👦",
        description: "family: man, woman, boy",
        category: "People & Body",
        aliases: [
            "family_man_woman_boy"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "👨‍👩‍👧",
        description: "family: man, woman, girl",
        category: "People & Body",
        aliases: [
            "family_man_woman_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👩‍👧‍👦",
        description: "family: man, woman, girl, boy",
        category: "People & Body",
        aliases: [
            "family_man_woman_girl_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👩‍👦‍👦",
        description: "family: man, woman, boy, boy",
        category: "People & Body",
        aliases: [
            "family_man_woman_boy_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👩‍👧‍👧",
        description: "family: man, woman, girl, girl",
        category: "People & Body",
        aliases: [
            "family_man_woman_girl_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👨‍👦",
        description: "family: man, man, boy",
        category: "People & Body",
        aliases: [
            "family_man_man_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👨‍👧",
        description: "family: man, man, girl",
        category: "People & Body",
        aliases: [
            "family_man_man_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👨‍👧‍👦",
        description: "family: man, man, girl, boy",
        category: "People & Body",
        aliases: [
            "family_man_man_girl_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👨‍👦‍👦",
        description: "family: man, man, boy, boy",
        category: "People & Body",
        aliases: [
            "family_man_man_boy_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👨‍👧‍👧",
        description: "family: man, man, girl, girl",
        category: "People & Body",
        aliases: [
            "family_man_man_girl_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍👩‍👦",
        description: "family: woman, woman, boy",
        category: "People & Body",
        aliases: [
            "family_woman_woman_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍👩‍👧",
        description: "family: woman, woman, girl",
        category: "People & Body",
        aliases: [
            "family_woman_woman_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍👩‍👧‍👦",
        description: "family: woman, woman, girl, boy",
        category: "People & Body",
        aliases: [
            "family_woman_woman_girl_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍👩‍👦‍👦",
        description: "family: woman, woman, boy, boy",
        category: "People & Body",
        aliases: [
            "family_woman_woman_boy_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👩‍👩‍👧‍👧",
        description: "family: woman, woman, girl, girl",
        category: "People & Body",
        aliases: [
            "family_woman_woman_girl_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "👨‍👦",
        description: "family: man, boy",
        category: "People & Body",
        aliases: [
            "family_man_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👨‍👦‍👦",
        description: "family: man, boy, boy",
        category: "People & Body",
        aliases: [
            "family_man_boy_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👨‍👧",
        description: "family: man, girl",
        category: "People & Body",
        aliases: [
            "family_man_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👨‍👧‍👦",
        description: "family: man, girl, boy",
        category: "People & Body",
        aliases: [
            "family_man_girl_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👨‍👧‍👧",
        description: "family: man, girl, girl",
        category: "People & Body",
        aliases: [
            "family_man_girl_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👩‍👦",
        description: "family: woman, boy",
        category: "People & Body",
        aliases: [
            "family_woman_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👩‍👦‍👦",
        description: "family: woman, boy, boy",
        category: "People & Body",
        aliases: [
            "family_woman_boy_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👩‍👧",
        description: "family: woman, girl",
        category: "People & Body",
        aliases: [
            "family_woman_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👩‍👧‍👦",
        description: "family: woman, girl, boy",
        category: "People & Body",
        aliases: [
            "family_woman_girl_boy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "👩‍👧‍👧",
        description: "family: woman, girl, girl",
        category: "People & Body",
        aliases: [
            "family_woman_girl_girl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "🗣️",
        description: "speaking head",
        category: "People & Body",
        aliases: [
            "speaking_head"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "👤",
        description: "bust in silhouette",
        category: "People & Body",
        aliases: [
            "bust_in_silhouette"
        ],
        tags: [
            "user"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👥",
        description: "busts in silhouette",
        category: "People & Body",
        aliases: [
            "busts_in_silhouette"
        ],
        tags: [
            "users",
            "group",
            "team"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🫂",
        description: "people hugging",
        category: "People & Body",
        aliases: [
            "people_hugging"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "👣",
        description: "footprints",
        category: "People & Body",
        aliases: [
            "footprints"
        ],
        tags: [
            "feet",
            "tracks"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐵",
        description: "monkey face",
        category: "Animals & Nature",
        aliases: [
            "monkey_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐒",
        description: "monkey",
        category: "Animals & Nature",
        aliases: [
            "monkey"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦍",
        description: "gorilla",
        category: "Animals & Nature",
        aliases: [
            "gorilla"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦧",
        description: "orangutan",
        category: "Animals & Nature",
        aliases: [
            "orangutan"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🐶",
        description: "dog face",
        category: "Animals & Nature",
        aliases: [
            "dog"
        ],
        tags: [
            "pet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐕",
        description: "dog",
        category: "Animals & Nature",
        aliases: [
            "dog2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦮",
        description: "guide dog",
        category: "Animals & Nature",
        aliases: [
            "guide_dog"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🐕‍🦺",
        description: "service dog",
        category: "Animals & Nature",
        aliases: [
            "service_dog"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🐩",
        description: "poodle",
        category: "Animals & Nature",
        aliases: [
            "poodle"
        ],
        tags: [
            "dog"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐺",
        description: "wolf",
        category: "Animals & Nature",
        aliases: [
            "wolf"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦊",
        description: "fox",
        category: "Animals & Nature",
        aliases: [
            "fox_face"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦝",
        description: "raccoon",
        category: "Animals & Nature",
        aliases: [
            "raccoon"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🐱",
        description: "cat face",
        category: "Animals & Nature",
        aliases: [
            "cat"
        ],
        tags: [
            "pet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐈",
        description: "cat",
        category: "Animals & Nature",
        aliases: [
            "cat2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐈‍⬛",
        description: "black cat",
        category: "Animals & Nature",
        aliases: [
            "black_cat"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🦁",
        description: "lion",
        category: "Animals & Nature",
        aliases: [
            "lion"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🐯",
        description: "tiger face",
        category: "Animals & Nature",
        aliases: [
            "tiger"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐅",
        description: "tiger",
        category: "Animals & Nature",
        aliases: [
            "tiger2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐆",
        description: "leopard",
        category: "Animals & Nature",
        aliases: [
            "leopard"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐴",
        description: "horse face",
        category: "Animals & Nature",
        aliases: [
            "horse"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐎",
        description: "horse",
        category: "Animals & Nature",
        aliases: [
            "racehorse"
        ],
        tags: [
            "speed"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦄",
        description: "unicorn",
        category: "Animals & Nature",
        aliases: [
            "unicorn"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🦓",
        description: "zebra",
        category: "Animals & Nature",
        aliases: [
            "zebra"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦌",
        description: "deer",
        category: "Animals & Nature",
        aliases: [
            "deer"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦬",
        description: "bison",
        category: "Animals & Nature",
        aliases: [
            "bison"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🐮",
        description: "cow face",
        category: "Animals & Nature",
        aliases: [
            "cow"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐂",
        description: "ox",
        category: "Animals & Nature",
        aliases: [
            "ox"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐃",
        description: "water buffalo",
        category: "Animals & Nature",
        aliases: [
            "water_buffalo"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐄",
        description: "cow",
        category: "Animals & Nature",
        aliases: [
            "cow2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐷",
        description: "pig face",
        category: "Animals & Nature",
        aliases: [
            "pig"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐖",
        description: "pig",
        category: "Animals & Nature",
        aliases: [
            "pig2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐗",
        description: "boar",
        category: "Animals & Nature",
        aliases: [
            "boar"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐽",
        description: "pig nose",
        category: "Animals & Nature",
        aliases: [
            "pig_nose"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐏",
        description: "ram",
        category: "Animals & Nature",
        aliases: [
            "ram"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐑",
        description: "ewe",
        category: "Animals & Nature",
        aliases: [
            "sheep"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐐",
        description: "goat",
        category: "Animals & Nature",
        aliases: [
            "goat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐪",
        description: "camel",
        category: "Animals & Nature",
        aliases: [
            "dromedary_camel"
        ],
        tags: [
            "desert"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐫",
        description: "two-hump camel",
        category: "Animals & Nature",
        aliases: [
            "camel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦙",
        description: "llama",
        category: "Animals & Nature",
        aliases: [
            "llama"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦒",
        description: "giraffe",
        category: "Animals & Nature",
        aliases: [
            "giraffe"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🐘",
        description: "elephant",
        category: "Animals & Nature",
        aliases: [
            "elephant"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦣",
        description: "mammoth",
        category: "Animals & Nature",
        aliases: [
            "mammoth"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🦏",
        description: "rhinoceros",
        category: "Animals & Nature",
        aliases: [
            "rhinoceros"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦛",
        description: "hippopotamus",
        category: "Animals & Nature",
        aliases: [
            "hippopotamus"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🐭",
        description: "mouse face",
        category: "Animals & Nature",
        aliases: [
            "mouse"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐁",
        description: "mouse",
        category: "Animals & Nature",
        aliases: [
            "mouse2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐀",
        description: "rat",
        category: "Animals & Nature",
        aliases: [
            "rat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐹",
        description: "hamster",
        category: "Animals & Nature",
        aliases: [
            "hamster"
        ],
        tags: [
            "pet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐰",
        description: "rabbit face",
        category: "Animals & Nature",
        aliases: [
            "rabbit"
        ],
        tags: [
            "bunny"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐇",
        description: "rabbit",
        category: "Animals & Nature",
        aliases: [
            "rabbit2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐿️",
        description: "chipmunk",
        category: "Animals & Nature",
        aliases: [
            "chipmunk"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🦫",
        description: "beaver",
        category: "Animals & Nature",
        aliases: [
            "beaver"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🦔",
        description: "hedgehog",
        category: "Animals & Nature",
        aliases: [
            "hedgehog"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦇",
        description: "bat",
        category: "Animals & Nature",
        aliases: [
            "bat"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🐻",
        description: "bear",
        category: "Animals & Nature",
        aliases: [
            "bear"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐻‍❄️",
        description: "polar bear",
        category: "Animals & Nature",
        aliases: [
            "polar_bear"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🐨",
        description: "koala",
        category: "Animals & Nature",
        aliases: [
            "koala"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐼",
        description: "panda",
        category: "Animals & Nature",
        aliases: [
            "panda_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦥",
        description: "sloth",
        category: "Animals & Nature",
        aliases: [
            "sloth"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦦",
        description: "otter",
        category: "Animals & Nature",
        aliases: [
            "otter"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦨",
        description: "skunk",
        category: "Animals & Nature",
        aliases: [
            "skunk"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦘",
        description: "kangaroo",
        category: "Animals & Nature",
        aliases: [
            "kangaroo"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦡",
        description: "badger",
        category: "Animals & Nature",
        aliases: [
            "badger"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🐾",
        description: "paw prints",
        category: "Animals & Nature",
        aliases: [
            "feet",
            "paw_prints"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦃",
        description: "turkey",
        category: "Animals & Nature",
        aliases: [
            "turkey"
        ],
        tags: [
            "thanksgiving"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🐔",
        description: "chicken",
        category: "Animals & Nature",
        aliases: [
            "chicken"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐓",
        description: "rooster",
        category: "Animals & Nature",
        aliases: [
            "rooster"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐣",
        description: "hatching chick",
        category: "Animals & Nature",
        aliases: [
            "hatching_chick"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐤",
        description: "baby chick",
        category: "Animals & Nature",
        aliases: [
            "baby_chick"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐥",
        description: "front-facing baby chick",
        category: "Animals & Nature",
        aliases: [
            "hatched_chick"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐦",
        description: "bird",
        category: "Animals & Nature",
        aliases: [
            "bird"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐧",
        description: "penguin",
        category: "Animals & Nature",
        aliases: [
            "penguin"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕊️",
        description: "dove",
        category: "Animals & Nature",
        aliases: [
            "dove"
        ],
        tags: [
            "peace"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🦅",
        description: "eagle",
        category: "Animals & Nature",
        aliases: [
            "eagle"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦆",
        description: "duck",
        category: "Animals & Nature",
        aliases: [
            "duck"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦢",
        description: "swan",
        category: "Animals & Nature",
        aliases: [
            "swan"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦉",
        description: "owl",
        category: "Animals & Nature",
        aliases: [
            "owl"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦤",
        description: "dodo",
        category: "Animals & Nature",
        aliases: [
            "dodo"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪶",
        description: "feather",
        category: "Animals & Nature",
        aliases: [
            "feather"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🦩",
        description: "flamingo",
        category: "Animals & Nature",
        aliases: [
            "flamingo"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦚",
        description: "peacock",
        category: "Animals & Nature",
        aliases: [
            "peacock"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦜",
        description: "parrot",
        category: "Animals & Nature",
        aliases: [
            "parrot"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🐸",
        description: "frog",
        category: "Animals & Nature",
        aliases: [
            "frog"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐊",
        description: "crocodile",
        category: "Animals & Nature",
        aliases: [
            "crocodile"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐢",
        description: "turtle",
        category: "Animals & Nature",
        aliases: [
            "turtle"
        ],
        tags: [
            "slow"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦎",
        description: "lizard",
        category: "Animals & Nature",
        aliases: [
            "lizard"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🐍",
        description: "snake",
        category: "Animals & Nature",
        aliases: [
            "snake"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐲",
        description: "dragon face",
        category: "Animals & Nature",
        aliases: [
            "dragon_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐉",
        description: "dragon",
        category: "Animals & Nature",
        aliases: [
            "dragon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦕",
        description: "sauropod",
        category: "Animals & Nature",
        aliases: [
            "sauropod"
        ],
        tags: [
            "dinosaur"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦖",
        description: "T-Rex",
        category: "Animals & Nature",
        aliases: [
            "t-rex"
        ],
        tags: [
            "dinosaur"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🐳",
        description: "spouting whale",
        category: "Animals & Nature",
        aliases: [
            "whale"
        ],
        tags: [
            "sea"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐋",
        description: "whale",
        category: "Animals & Nature",
        aliases: [
            "whale2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐬",
        description: "dolphin",
        category: "Animals & Nature",
        aliases: [
            "dolphin",
            "flipper"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦭",
        description: "seal",
        category: "Animals & Nature",
        aliases: [
            "seal"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🐟",
        description: "fish",
        category: "Animals & Nature",
        aliases: [
            "fish"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐠",
        description: "tropical fish",
        category: "Animals & Nature",
        aliases: [
            "tropical_fish"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐡",
        description: "blowfish",
        category: "Animals & Nature",
        aliases: [
            "blowfish"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦈",
        description: "shark",
        category: "Animals & Nature",
        aliases: [
            "shark"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🐙",
        description: "octopus",
        category: "Animals & Nature",
        aliases: [
            "octopus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐚",
        description: "spiral shell",
        category: "Animals & Nature",
        aliases: [
            "shell"
        ],
        tags: [
            "sea",
            "beach"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐌",
        description: "snail",
        category: "Animals & Nature",
        aliases: [
            "snail"
        ],
        tags: [
            "slow"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦋",
        description: "butterfly",
        category: "Animals & Nature",
        aliases: [
            "butterfly"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🐛",
        description: "bug",
        category: "Animals & Nature",
        aliases: [
            "bug"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐜",
        description: "ant",
        category: "Animals & Nature",
        aliases: [
            "ant"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🐝",
        description: "honeybee",
        category: "Animals & Nature",
        aliases: [
            "bee",
            "honeybee"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪲",
        description: "beetle",
        category: "Animals & Nature",
        aliases: [
            "beetle"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🐞",
        description: "lady beetle",
        category: "Animals & Nature",
        aliases: [
            "lady_beetle"
        ],
        tags: [
            "bug"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🦗",
        description: "cricket",
        category: "Animals & Nature",
        aliases: [
            "cricket"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪳",
        description: "cockroach",
        category: "Animals & Nature",
        aliases: [
            "cockroach"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🕷️",
        description: "spider",
        category: "Animals & Nature",
        aliases: [
            "spider"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🕸️",
        description: "spider web",
        category: "Animals & Nature",
        aliases: [
            "spider_web"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🦂",
        description: "scorpion",
        category: "Animals & Nature",
        aliases: [
            "scorpion"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🦟",
        description: "mosquito",
        category: "Animals & Nature",
        aliases: [
            "mosquito"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪰",
        description: "fly",
        category: "Animals & Nature",
        aliases: [
            "fly"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪱",
        description: "worm",
        category: "Animals & Nature",
        aliases: [
            "worm"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🦠",
        description: "microbe",
        category: "Animals & Nature",
        aliases: [
            "microbe"
        ],
        tags: [
            "germ"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "💐",
        description: "bouquet",
        category: "Animals & Nature",
        aliases: [
            "bouquet"
        ],
        tags: [
            "flowers"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌸",
        description: "cherry blossom",
        category: "Animals & Nature",
        aliases: [
            "cherry_blossom"
        ],
        tags: [
            "flower",
            "spring"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💮",
        description: "white flower",
        category: "Animals & Nature",
        aliases: [
            "white_flower"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏵️",
        description: "rosette",
        category: "Animals & Nature",
        aliases: [
            "rosette"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌹",
        description: "rose",
        category: "Animals & Nature",
        aliases: [
            "rose"
        ],
        tags: [
            "flower"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥀",
        description: "wilted flower",
        category: "Animals & Nature",
        aliases: [
            "wilted_flower"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🌺",
        description: "hibiscus",
        category: "Animals & Nature",
        aliases: [
            "hibiscus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌻",
        description: "sunflower",
        category: "Animals & Nature",
        aliases: [
            "sunflower"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌼",
        description: "blossom",
        category: "Animals & Nature",
        aliases: [
            "blossom"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌷",
        description: "tulip",
        category: "Animals & Nature",
        aliases: [
            "tulip"
        ],
        tags: [
            "flower"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌱",
        description: "seedling",
        category: "Animals & Nature",
        aliases: [
            "seedling"
        ],
        tags: [
            "plant"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪴",
        description: "potted plant",
        category: "Animals & Nature",
        aliases: [
            "potted_plant"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🌲",
        description: "evergreen tree",
        category: "Animals & Nature",
        aliases: [
            "evergreen_tree"
        ],
        tags: [
            "wood"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌳",
        description: "deciduous tree",
        category: "Animals & Nature",
        aliases: [
            "deciduous_tree"
        ],
        tags: [
            "wood"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌴",
        description: "palm tree",
        category: "Animals & Nature",
        aliases: [
            "palm_tree"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌵",
        description: "cactus",
        category: "Animals & Nature",
        aliases: [
            "cactus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌾",
        description: "sheaf of rice",
        category: "Animals & Nature",
        aliases: [
            "ear_of_rice"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌿",
        description: "herb",
        category: "Animals & Nature",
        aliases: [
            "herb"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☘️",
        description: "shamrock",
        category: "Animals & Nature",
        aliases: [
            "shamrock"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🍀",
        description: "four leaf clover",
        category: "Animals & Nature",
        aliases: [
            "four_leaf_clover"
        ],
        tags: [
            "luck"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍁",
        description: "maple leaf",
        category: "Animals & Nature",
        aliases: [
            "maple_leaf"
        ],
        tags: [
            "canada"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍂",
        description: "fallen leaf",
        category: "Animals & Nature",
        aliases: [
            "fallen_leaf"
        ],
        tags: [
            "autumn"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍃",
        description: "leaf fluttering in wind",
        category: "Animals & Nature",
        aliases: [
            "leaves"
        ],
        tags: [
            "leaf"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍇",
        description: "grapes",
        category: "Food & Drink",
        aliases: [
            "grapes"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍈",
        description: "melon",
        category: "Food & Drink",
        aliases: [
            "melon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍉",
        description: "watermelon",
        category: "Food & Drink",
        aliases: [
            "watermelon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍊",
        description: "tangerine",
        category: "Food & Drink",
        aliases: [
            "tangerine",
            "orange",
            "mandarin"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍋",
        description: "lemon",
        category: "Food & Drink",
        aliases: [
            "lemon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍌",
        description: "banana",
        category: "Food & Drink",
        aliases: [
            "banana"
        ],
        tags: [
            "fruit"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍍",
        description: "pineapple",
        category: "Food & Drink",
        aliases: [
            "pineapple"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥭",
        description: "mango",
        category: "Food & Drink",
        aliases: [
            "mango"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🍎",
        description: "red apple",
        category: "Food & Drink",
        aliases: [
            "apple"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍏",
        description: "green apple",
        category: "Food & Drink",
        aliases: [
            "green_apple"
        ],
        tags: [
            "fruit"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍐",
        description: "pear",
        category: "Food & Drink",
        aliases: [
            "pear"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍑",
        description: "peach",
        category: "Food & Drink",
        aliases: [
            "peach"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍒",
        description: "cherries",
        category: "Food & Drink",
        aliases: [
            "cherries"
        ],
        tags: [
            "fruit"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍓",
        description: "strawberry",
        category: "Food & Drink",
        aliases: [
            "strawberry"
        ],
        tags: [
            "fruit"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🫐",
        description: "blueberries",
        category: "Food & Drink",
        aliases: [
            "blueberries"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🥝",
        description: "kiwi fruit",
        category: "Food & Drink",
        aliases: [
            "kiwi_fruit"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🍅",
        description: "tomato",
        category: "Food & Drink",
        aliases: [
            "tomato"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🫒",
        description: "olive",
        category: "Food & Drink",
        aliases: [
            "olive"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🥥",
        description: "coconut",
        category: "Food & Drink",
        aliases: [
            "coconut"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥑",
        description: "avocado",
        category: "Food & Drink",
        aliases: [
            "avocado"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🍆",
        description: "eggplant",
        category: "Food & Drink",
        aliases: [
            "eggplant"
        ],
        tags: [
            "aubergine"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥔",
        description: "potato",
        category: "Food & Drink",
        aliases: [
            "potato"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥕",
        description: "carrot",
        category: "Food & Drink",
        aliases: [
            "carrot"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🌽",
        description: "ear of corn",
        category: "Food & Drink",
        aliases: [
            "corn"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌶️",
        description: "hot pepper",
        category: "Food & Drink",
        aliases: [
            "hot_pepper"
        ],
        tags: [
            "spicy"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🫑",
        description: "bell pepper",
        category: "Food & Drink",
        aliases: [
            "bell_pepper"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🥒",
        description: "cucumber",
        category: "Food & Drink",
        aliases: [
            "cucumber"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥬",
        description: "leafy green",
        category: "Food & Drink",
        aliases: [
            "leafy_green"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥦",
        description: "broccoli",
        category: "Food & Drink",
        aliases: [
            "broccoli"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧄",
        description: "garlic",
        category: "Food & Drink",
        aliases: [
            "garlic"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🧅",
        description: "onion",
        category: "Food & Drink",
        aliases: [
            "onion"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🍄",
        description: "mushroom",
        category: "Food & Drink",
        aliases: [
            "mushroom"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥜",
        description: "peanuts",
        category: "Food & Drink",
        aliases: [
            "peanuts"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🌰",
        description: "chestnut",
        category: "Food & Drink",
        aliases: [
            "chestnut"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍞",
        description: "bread",
        category: "Food & Drink",
        aliases: [
            "bread"
        ],
        tags: [
            "toast"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥐",
        description: "croissant",
        category: "Food & Drink",
        aliases: [
            "croissant"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥖",
        description: "baguette bread",
        category: "Food & Drink",
        aliases: [
            "baguette_bread"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🫓",
        description: "flatbread",
        category: "Food & Drink",
        aliases: [
            "flatbread"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🥨",
        description: "pretzel",
        category: "Food & Drink",
        aliases: [
            "pretzel"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥯",
        description: "bagel",
        category: "Food & Drink",
        aliases: [
            "bagel"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥞",
        description: "pancakes",
        category: "Food & Drink",
        aliases: [
            "pancakes"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🧇",
        description: "waffle",
        category: "Food & Drink",
        aliases: [
            "waffle"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🧀",
        description: "cheese wedge",
        category: "Food & Drink",
        aliases: [
            "cheese"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🍖",
        description: "meat on bone",
        category: "Food & Drink",
        aliases: [
            "meat_on_bone"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍗",
        description: "poultry leg",
        category: "Food & Drink",
        aliases: [
            "poultry_leg"
        ],
        tags: [
            "meat",
            "chicken"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥩",
        description: "cut of meat",
        category: "Food & Drink",
        aliases: [
            "cut_of_meat"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥓",
        description: "bacon",
        category: "Food & Drink",
        aliases: [
            "bacon"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🍔",
        description: "hamburger",
        category: "Food & Drink",
        aliases: [
            "hamburger"
        ],
        tags: [
            "burger"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍟",
        description: "french fries",
        category: "Food & Drink",
        aliases: [
            "fries"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍕",
        description: "pizza",
        category: "Food & Drink",
        aliases: [
            "pizza"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌭",
        description: "hot dog",
        category: "Food & Drink",
        aliases: [
            "hotdog"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🥪",
        description: "sandwich",
        category: "Food & Drink",
        aliases: [
            "sandwich"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🌮",
        description: "taco",
        category: "Food & Drink",
        aliases: [
            "taco"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌯",
        description: "burrito",
        category: "Food & Drink",
        aliases: [
            "burrito"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🫔",
        description: "tamale",
        category: "Food & Drink",
        aliases: [
            "tamale"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🥙",
        description: "stuffed flatbread",
        category: "Food & Drink",
        aliases: [
            "stuffed_flatbread"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🧆",
        description: "falafel",
        category: "Food & Drink",
        aliases: [
            "falafel"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🥚",
        description: "egg",
        category: "Food & Drink",
        aliases: [
            "egg"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🍳",
        description: "cooking",
        category: "Food & Drink",
        aliases: [
            "fried_egg"
        ],
        tags: [
            "breakfast"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥘",
        description: "shallow pan of food",
        category: "Food & Drink",
        aliases: [
            "shallow_pan_of_food"
        ],
        tags: [
            "paella",
            "curry"
        ],
        unicodeVersion: "",
        iosVersion: "10.2"
    },
    {
        emoji: "🍲",
        description: "pot of food",
        category: "Food & Drink",
        aliases: [
            "stew"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🫕",
        description: "fondue",
        category: "Food & Drink",
        aliases: [
            "fondue"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🥣",
        description: "bowl with spoon",
        category: "Food & Drink",
        aliases: [
            "bowl_with_spoon"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥗",
        description: "green salad",
        category: "Food & Drink",
        aliases: [
            "green_salad"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🍿",
        description: "popcorn",
        category: "Food & Drink",
        aliases: [
            "popcorn"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🧈",
        description: "butter",
        category: "Food & Drink",
        aliases: [
            "butter"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🧂",
        description: "salt",
        category: "Food & Drink",
        aliases: [
            "salt"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥫",
        description: "canned food",
        category: "Food & Drink",
        aliases: [
            "canned_food"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🍱",
        description: "bento box",
        category: "Food & Drink",
        aliases: [
            "bento"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍘",
        description: "rice cracker",
        category: "Food & Drink",
        aliases: [
            "rice_cracker"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍙",
        description: "rice ball",
        category: "Food & Drink",
        aliases: [
            "rice_ball"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍚",
        description: "cooked rice",
        category: "Food & Drink",
        aliases: [
            "rice"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍛",
        description: "curry rice",
        category: "Food & Drink",
        aliases: [
            "curry"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍜",
        description: "steaming bowl",
        category: "Food & Drink",
        aliases: [
            "ramen"
        ],
        tags: [
            "noodle"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍝",
        description: "spaghetti",
        category: "Food & Drink",
        aliases: [
            "spaghetti"
        ],
        tags: [
            "pasta"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍠",
        description: "roasted sweet potato",
        category: "Food & Drink",
        aliases: [
            "sweet_potato"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍢",
        description: "oden",
        category: "Food & Drink",
        aliases: [
            "oden"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍣",
        description: "sushi",
        category: "Food & Drink",
        aliases: [
            "sushi"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍤",
        description: "fried shrimp",
        category: "Food & Drink",
        aliases: [
            "fried_shrimp"
        ],
        tags: [
            "tempura"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍥",
        description: "fish cake with swirl",
        category: "Food & Drink",
        aliases: [
            "fish_cake"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥮",
        description: "moon cake",
        category: "Food & Drink",
        aliases: [
            "moon_cake"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🍡",
        description: "dango",
        category: "Food & Drink",
        aliases: [
            "dango"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥟",
        description: "dumpling",
        category: "Food & Drink",
        aliases: [
            "dumpling"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥠",
        description: "fortune cookie",
        category: "Food & Drink",
        aliases: [
            "fortune_cookie"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥡",
        description: "takeout box",
        category: "Food & Drink",
        aliases: [
            "takeout_box"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦀",
        description: "crab",
        category: "Food & Drink",
        aliases: [
            "crab"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🦞",
        description: "lobster",
        category: "Food & Drink",
        aliases: [
            "lobster"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦐",
        description: "shrimp",
        category: "Food & Drink",
        aliases: [
            "shrimp"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦑",
        description: "squid",
        category: "Food & Drink",
        aliases: [
            "squid"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦪",
        description: "oyster",
        category: "Food & Drink",
        aliases: [
            "oyster"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🍦",
        description: "soft ice cream",
        category: "Food & Drink",
        aliases: [
            "icecream"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍧",
        description: "shaved ice",
        category: "Food & Drink",
        aliases: [
            "shaved_ice"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍨",
        description: "ice cream",
        category: "Food & Drink",
        aliases: [
            "ice_cream"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍩",
        description: "doughnut",
        category: "Food & Drink",
        aliases: [
            "doughnut"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍪",
        description: "cookie",
        category: "Food & Drink",
        aliases: [
            "cookie"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎂",
        description: "birthday cake",
        category: "Food & Drink",
        aliases: [
            "birthday"
        ],
        tags: [
            "party"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍰",
        description: "shortcake",
        category: "Food & Drink",
        aliases: [
            "cake"
        ],
        tags: [
            "dessert"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧁",
        description: "cupcake",
        category: "Food & Drink",
        aliases: [
            "cupcake"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥧",
        description: "pie",
        category: "Food & Drink",
        aliases: [
            "pie"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🍫",
        description: "chocolate bar",
        category: "Food & Drink",
        aliases: [
            "chocolate_bar"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍬",
        description: "candy",
        category: "Food & Drink",
        aliases: [
            "candy"
        ],
        tags: [
            "sweet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍭",
        description: "lollipop",
        category: "Food & Drink",
        aliases: [
            "lollipop"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍮",
        description: "custard",
        category: "Food & Drink",
        aliases: [
            "custard"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍯",
        description: "honey pot",
        category: "Food & Drink",
        aliases: [
            "honey_pot"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍼",
        description: "baby bottle",
        category: "Food & Drink",
        aliases: [
            "baby_bottle"
        ],
        tags: [
            "milk"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥛",
        description: "glass of milk",
        category: "Food & Drink",
        aliases: [
            "milk_glass"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "☕",
        description: "hot beverage",
        category: "Food & Drink",
        aliases: [
            "coffee"
        ],
        tags: [
            "cafe",
            "espresso"
        ],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🫖",
        description: "teapot",
        category: "Food & Drink",
        aliases: [
            "teapot"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🍵",
        description: "teacup without handle",
        category: "Food & Drink",
        aliases: [
            "tea"
        ],
        tags: [
            "green",
            "breakfast"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍶",
        description: "sake",
        category: "Food & Drink",
        aliases: [
            "sake"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍾",
        description: "bottle with popping cork",
        category: "Food & Drink",
        aliases: [
            "champagne"
        ],
        tags: [
            "bottle",
            "bubbly",
            "celebration"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🍷",
        description: "wine glass",
        category: "Food & Drink",
        aliases: [
            "wine_glass"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍸",
        description: "cocktail glass",
        category: "Food & Drink",
        aliases: [
            "cocktail"
        ],
        tags: [
            "drink"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍹",
        description: "tropical drink",
        category: "Food & Drink",
        aliases: [
            "tropical_drink"
        ],
        tags: [
            "summer",
            "vacation"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍺",
        description: "beer mug",
        category: "Food & Drink",
        aliases: [
            "beer"
        ],
        tags: [
            "drink"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🍻",
        description: "clinking beer mugs",
        category: "Food & Drink",
        aliases: [
            "beers"
        ],
        tags: [
            "drinks"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥂",
        description: "clinking glasses",
        category: "Food & Drink",
        aliases: [
            "clinking_glasses"
        ],
        tags: [
            "cheers",
            "toast"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥃",
        description: "tumbler glass",
        category: "Food & Drink",
        aliases: [
            "tumbler_glass"
        ],
        tags: [
            "whisky"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥤",
        description: "cup with straw",
        category: "Food & Drink",
        aliases: [
            "cup_with_straw"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧋",
        description: "bubble tea",
        category: "Food & Drink",
        aliases: [
            "bubble_tea"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🧃",
        description: "beverage box",
        category: "Food & Drink",
        aliases: [
            "beverage_box"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🧉",
        description: "mate",
        category: "Food & Drink",
        aliases: [
            "mate"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🧊",
        description: "ice",
        category: "Food & Drink",
        aliases: [
            "ice_cube"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🥢",
        description: "chopsticks",
        category: "Food & Drink",
        aliases: [
            "chopsticks"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🍽️",
        description: "fork and knife with plate",
        category: "Food & Drink",
        aliases: [
            "plate_with_cutlery"
        ],
        tags: [
            "dining",
            "dinner"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🍴",
        description: "fork and knife",
        category: "Food & Drink",
        aliases: [
            "fork_and_knife"
        ],
        tags: [
            "cutlery"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥄",
        description: "spoon",
        category: "Food & Drink",
        aliases: [
            "spoon"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🔪",
        description: "kitchen knife",
        category: "Food & Drink",
        aliases: [
            "hocho",
            "knife"
        ],
        tags: [
            "cut",
            "chop"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏺",
        description: "amphora",
        category: "Food & Drink",
        aliases: [
            "amphora"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌍",
        description: "globe showing Europe-Africa",
        category: "Travel & Places",
        aliases: [
            "earth_africa"
        ],
        tags: [
            "globe",
            "world",
            "international"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌎",
        description: "globe showing Americas",
        category: "Travel & Places",
        aliases: [
            "earth_americas"
        ],
        tags: [
            "globe",
            "world",
            "international"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌏",
        description: "globe showing Asia-Australia",
        category: "Travel & Places",
        aliases: [
            "earth_asia"
        ],
        tags: [
            "globe",
            "world",
            "international"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌐",
        description: "globe with meridians",
        category: "Travel & Places",
        aliases: [
            "globe_with_meridians"
        ],
        tags: [
            "world",
            "global",
            "international"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗺️",
        description: "world map",
        category: "Travel & Places",
        aliases: [
            "world_map"
        ],
        tags: [
            "travel"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🗾",
        description: "map of Japan",
        category: "Travel & Places",
        aliases: [
            "japan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧭",
        description: "compass",
        category: "Travel & Places",
        aliases: [
            "compass"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🏔️",
        description: "snow-capped mountain",
        category: "Travel & Places",
        aliases: [
            "mountain_snow"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⛰️",
        description: "mountain",
        category: "Travel & Places",
        aliases: [
            "mountain"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🌋",
        description: "volcano",
        category: "Travel & Places",
        aliases: [
            "volcano"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗻",
        description: "mount fuji",
        category: "Travel & Places",
        aliases: [
            "mount_fuji"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏕️",
        description: "camping",
        category: "Travel & Places",
        aliases: [
            "camping"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏖️",
        description: "beach with umbrella",
        category: "Travel & Places",
        aliases: [
            "beach_umbrella"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏜️",
        description: "desert",
        category: "Travel & Places",
        aliases: [
            "desert"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏝️",
        description: "desert island",
        category: "Travel & Places",
        aliases: [
            "desert_island"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏞️",
        description: "national park",
        category: "Travel & Places",
        aliases: [
            "national_park"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏟️",
        description: "stadium",
        category: "Travel & Places",
        aliases: [
            "stadium"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏛️",
        description: "classical building",
        category: "Travel & Places",
        aliases: [
            "classical_building"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏗️",
        description: "building construction",
        category: "Travel & Places",
        aliases: [
            "building_construction"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🧱",
        description: "brick",
        category: "Travel & Places",
        aliases: [
            "bricks"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪨",
        description: "rock",
        category: "Travel & Places",
        aliases: [
            "rock"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪵",
        description: "wood",
        category: "Travel & Places",
        aliases: [
            "wood"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🛖",
        description: "hut",
        category: "Travel & Places",
        aliases: [
            "hut"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🏘️",
        description: "houses",
        category: "Travel & Places",
        aliases: [
            "houses"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏚️",
        description: "derelict house",
        category: "Travel & Places",
        aliases: [
            "derelict_house"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏠",
        description: "house",
        category: "Travel & Places",
        aliases: [
            "house"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏡",
        description: "house with garden",
        category: "Travel & Places",
        aliases: [
            "house_with_garden"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏢",
        description: "office building",
        category: "Travel & Places",
        aliases: [
            "office"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏣",
        description: "Japanese post office",
        category: "Travel & Places",
        aliases: [
            "post_office"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏤",
        description: "post office",
        category: "Travel & Places",
        aliases: [
            "european_post_office"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏥",
        description: "hospital",
        category: "Travel & Places",
        aliases: [
            "hospital"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏦",
        description: "bank",
        category: "Travel & Places",
        aliases: [
            "bank"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏨",
        description: "hotel",
        category: "Travel & Places",
        aliases: [
            "hotel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏩",
        description: "love hotel",
        category: "Travel & Places",
        aliases: [
            "love_hotel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏪",
        description: "convenience store",
        category: "Travel & Places",
        aliases: [
            "convenience_store"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏫",
        description: "school",
        category: "Travel & Places",
        aliases: [
            "school"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏬",
        description: "department store",
        category: "Travel & Places",
        aliases: [
            "department_store"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏭",
        description: "factory",
        category: "Travel & Places",
        aliases: [
            "factory"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏯",
        description: "Japanese castle",
        category: "Travel & Places",
        aliases: [
            "japanese_castle"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏰",
        description: "castle",
        category: "Travel & Places",
        aliases: [
            "european_castle"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💒",
        description: "wedding",
        category: "Travel & Places",
        aliases: [
            "wedding"
        ],
        tags: [
            "marriage"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗼",
        description: "Tokyo tower",
        category: "Travel & Places",
        aliases: [
            "tokyo_tower"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗽",
        description: "Statue of Liberty",
        category: "Travel & Places",
        aliases: [
            "statue_of_liberty"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⛪",
        description: "church",
        category: "Travel & Places",
        aliases: [
            "church"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🕌",
        description: "mosque",
        category: "Travel & Places",
        aliases: [
            "mosque"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛕",
        description: "hindu temple",
        category: "Travel & Places",
        aliases: [
            "hindu_temple"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🕍",
        description: "synagogue",
        category: "Travel & Places",
        aliases: [
            "synagogue"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⛩️",
        description: "shinto shrine",
        category: "Travel & Places",
        aliases: [
            "shinto_shrine"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🕋",
        description: "kaaba",
        category: "Travel & Places",
        aliases: [
            "kaaba"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⛲",
        description: "fountain",
        category: "Travel & Places",
        aliases: [
            "fountain"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "⛺",
        description: "tent",
        category: "Travel & Places",
        aliases: [
            "tent"
        ],
        tags: [
            "camping"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🌁",
        description: "foggy",
        category: "Travel & Places",
        aliases: [
            "foggy"
        ],
        tags: [
            "karl"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌃",
        description: "night with stars",
        category: "Travel & Places",
        aliases: [
            "night_with_stars"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏙️",
        description: "cityscape",
        category: "Travel & Places",
        aliases: [
            "cityscape"
        ],
        tags: [
            "skyline"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌄",
        description: "sunrise over mountains",
        category: "Travel & Places",
        aliases: [
            "sunrise_over_mountains"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌅",
        description: "sunrise",
        category: "Travel & Places",
        aliases: [
            "sunrise"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌆",
        description: "cityscape at dusk",
        category: "Travel & Places",
        aliases: [
            "city_sunset"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌇",
        description: "sunset",
        category: "Travel & Places",
        aliases: [
            "city_sunrise"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌉",
        description: "bridge at night",
        category: "Travel & Places",
        aliases: [
            "bridge_at_night"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "♨️",
        description: "hot springs",
        category: "Travel & Places",
        aliases: [
            "hotsprings"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🎠",
        description: "carousel horse",
        category: "Travel & Places",
        aliases: [
            "carousel_horse"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎡",
        description: "ferris wheel",
        category: "Travel & Places",
        aliases: [
            "ferris_wheel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎢",
        description: "roller coaster",
        category: "Travel & Places",
        aliases: [
            "roller_coaster"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💈",
        description: "barber pole",
        category: "Travel & Places",
        aliases: [
            "barber"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎪",
        description: "circus tent",
        category: "Travel & Places",
        aliases: [
            "circus_tent"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚂",
        description: "locomotive",
        category: "Travel & Places",
        aliases: [
            "steam_locomotive"
        ],
        tags: [
            "train"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚃",
        description: "railway car",
        category: "Travel & Places",
        aliases: [
            "railway_car"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚄",
        description: "high-speed train",
        category: "Travel & Places",
        aliases: [
            "bullettrain_side"
        ],
        tags: [
            "train"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚅",
        description: "bullet train",
        category: "Travel & Places",
        aliases: [
            "bullettrain_front"
        ],
        tags: [
            "train"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚆",
        description: "train",
        category: "Travel & Places",
        aliases: [
            "train2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚇",
        description: "metro",
        category: "Travel & Places",
        aliases: [
            "metro"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚈",
        description: "light rail",
        category: "Travel & Places",
        aliases: [
            "light_rail"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚉",
        description: "station",
        category: "Travel & Places",
        aliases: [
            "station"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚊",
        description: "tram",
        category: "Travel & Places",
        aliases: [
            "tram"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚝",
        description: "monorail",
        category: "Travel & Places",
        aliases: [
            "monorail"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚞",
        description: "mountain railway",
        category: "Travel & Places",
        aliases: [
            "mountain_railway"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚋",
        description: "tram car",
        category: "Travel & Places",
        aliases: [
            "train"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚌",
        description: "bus",
        category: "Travel & Places",
        aliases: [
            "bus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚍",
        description: "oncoming bus",
        category: "Travel & Places",
        aliases: [
            "oncoming_bus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚎",
        description: "trolleybus",
        category: "Travel & Places",
        aliases: [
            "trolleybus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚐",
        description: "minibus",
        category: "Travel & Places",
        aliases: [
            "minibus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚑",
        description: "ambulance",
        category: "Travel & Places",
        aliases: [
            "ambulance"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚒",
        description: "fire engine",
        category: "Travel & Places",
        aliases: [
            "fire_engine"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚓",
        description: "police car",
        category: "Travel & Places",
        aliases: [
            "police_car"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚔",
        description: "oncoming police car",
        category: "Travel & Places",
        aliases: [
            "oncoming_police_car"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚕",
        description: "taxi",
        category: "Travel & Places",
        aliases: [
            "taxi"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚖",
        description: "oncoming taxi",
        category: "Travel & Places",
        aliases: [
            "oncoming_taxi"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚗",
        description: "automobile",
        category: "Travel & Places",
        aliases: [
            "car",
            "red_car"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚘",
        description: "oncoming automobile",
        category: "Travel & Places",
        aliases: [
            "oncoming_automobile"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚙",
        description: "sport utility vehicle",
        category: "Travel & Places",
        aliases: [
            "blue_car"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛻",
        description: "pickup truck",
        category: "Travel & Places",
        aliases: [
            "pickup_truck"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🚚",
        description: "delivery truck",
        category: "Travel & Places",
        aliases: [
            "truck"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚛",
        description: "articulated lorry",
        category: "Travel & Places",
        aliases: [
            "articulated_lorry"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚜",
        description: "tractor",
        category: "Travel & Places",
        aliases: [
            "tractor"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏎️",
        description: "racing car",
        category: "Travel & Places",
        aliases: [
            "racing_car"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏍️",
        description: "motorcycle",
        category: "Travel & Places",
        aliases: [
            "motorcycle"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛵",
        description: "motor scooter",
        category: "Travel & Places",
        aliases: [
            "motor_scooter"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🦽",
        description: "manual wheelchair",
        category: "Travel & Places",
        aliases: [
            "manual_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🦼",
        description: "motorized wheelchair",
        category: "Travel & Places",
        aliases: [
            "motorized_wheelchair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🛺",
        description: "auto rickshaw",
        category: "Travel & Places",
        aliases: [
            "auto_rickshaw"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🚲",
        description: "bicycle",
        category: "Travel & Places",
        aliases: [
            "bike"
        ],
        tags: [
            "bicycle"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛴",
        description: "kick scooter",
        category: "Travel & Places",
        aliases: [
            "kick_scooter"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🛹",
        description: "skateboard",
        category: "Travel & Places",
        aliases: [
            "skateboard"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🛼",
        description: "roller skate",
        category: "Travel & Places",
        aliases: [
            "roller_skate"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🚏",
        description: "bus stop",
        category: "Travel & Places",
        aliases: [
            "busstop"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛣️",
        description: "motorway",
        category: "Travel & Places",
        aliases: [
            "motorway"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛤️",
        description: "railway track",
        category: "Travel & Places",
        aliases: [
            "railway_track"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛢️",
        description: "oil drum",
        category: "Travel & Places",
        aliases: [
            "oil_drum"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⛽",
        description: "fuel pump",
        category: "Travel & Places",
        aliases: [
            "fuelpump"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🚨",
        description: "police car light",
        category: "Travel & Places",
        aliases: [
            "rotating_light"
        ],
        tags: [
            "911",
            "emergency"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚥",
        description: "horizontal traffic light",
        category: "Travel & Places",
        aliases: [
            "traffic_light"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚦",
        description: "vertical traffic light",
        category: "Travel & Places",
        aliases: [
            "vertical_traffic_light"
        ],
        tags: [
            "semaphore"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛑",
        description: "stop sign",
        category: "Travel & Places",
        aliases: [
            "stop_sign"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🚧",
        description: "construction",
        category: "Travel & Places",
        aliases: [
            "construction"
        ],
        tags: [
            "wip"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⚓",
        description: "anchor",
        category: "Travel & Places",
        aliases: [
            "anchor"
        ],
        tags: [
            "ship"
        ],
        unicodeVersion: "4.1",
        iosVersion: "6.0"
    },
    {
        emoji: "⛵",
        description: "sailboat",
        category: "Travel & Places",
        aliases: [
            "boat",
            "sailboat"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🛶",
        description: "canoe",
        category: "Travel & Places",
        aliases: [
            "canoe"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🚤",
        description: "speedboat",
        category: "Travel & Places",
        aliases: [
            "speedboat"
        ],
        tags: [
            "ship"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛳️",
        description: "passenger ship",
        category: "Travel & Places",
        aliases: [
            "passenger_ship"
        ],
        tags: [
            "cruise"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⛴️",
        description: "ferry",
        category: "Travel & Places",
        aliases: [
            "ferry"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🛥️",
        description: "motor boat",
        category: "Travel & Places",
        aliases: [
            "motor_boat"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🚢",
        description: "ship",
        category: "Travel & Places",
        aliases: [
            "ship"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "✈️",
        description: "airplane",
        category: "Travel & Places",
        aliases: [
            "airplane"
        ],
        tags: [
            "flight"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🛩️",
        description: "small airplane",
        category: "Travel & Places",
        aliases: [
            "small_airplane"
        ],
        tags: [
            "flight"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛫",
        description: "airplane departure",
        category: "Travel & Places",
        aliases: [
            "flight_departure"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛬",
        description: "airplane arrival",
        category: "Travel & Places",
        aliases: [
            "flight_arrival"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🪂",
        description: "parachute",
        category: "Travel & Places",
        aliases: [
            "parachute"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "💺",
        description: "seat",
        category: "Travel & Places",
        aliases: [
            "seat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚁",
        description: "helicopter",
        category: "Travel & Places",
        aliases: [
            "helicopter"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚟",
        description: "suspension railway",
        category: "Travel & Places",
        aliases: [
            "suspension_railway"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚠",
        description: "mountain cableway",
        category: "Travel & Places",
        aliases: [
            "mountain_cableway"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚡",
        description: "aerial tramway",
        category: "Travel & Places",
        aliases: [
            "aerial_tramway"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛰️",
        description: "satellite",
        category: "Travel & Places",
        aliases: [
            "artificial_satellite"
        ],
        tags: [
            "orbit",
            "space"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🚀",
        description: "rocket",
        category: "Travel & Places",
        aliases: [
            "rocket"
        ],
        tags: [
            "ship",
            "launch"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛸",
        description: "flying saucer",
        category: "Travel & Places",
        aliases: [
            "flying_saucer"
        ],
        tags: [
            "ufo"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🛎️",
        description: "bellhop bell",
        category: "Travel & Places",
        aliases: [
            "bellhop_bell"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🧳",
        description: "luggage",
        category: "Travel & Places",
        aliases: [
            "luggage"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "⌛",
        description: "hourglass done",
        category: "Travel & Places",
        aliases: [
            "hourglass"
        ],
        tags: [
            "time"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⏳",
        description: "hourglass not done",
        category: "Travel & Places",
        aliases: [
            "hourglass_flowing_sand"
        ],
        tags: [
            "time"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⌚",
        description: "watch",
        category: "Travel & Places",
        aliases: [
            "watch"
        ],
        tags: [
            "time"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⏰",
        description: "alarm clock",
        category: "Travel & Places",
        aliases: [
            "alarm_clock"
        ],
        tags: [
            "morning"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⏱️",
        description: "stopwatch",
        category: "Travel & Places",
        aliases: [
            "stopwatch"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⏲️",
        description: "timer clock",
        category: "Travel & Places",
        aliases: [
            "timer_clock"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🕰️",
        description: "mantelpiece clock",
        category: "Travel & Places",
        aliases: [
            "mantelpiece_clock"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🕛",
        description: "twelve o’clock",
        category: "Travel & Places",
        aliases: [
            "clock12"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕧",
        description: "twelve-thirty",
        category: "Travel & Places",
        aliases: [
            "clock1230"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕐",
        description: "one o’clock",
        category: "Travel & Places",
        aliases: [
            "clock1"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕜",
        description: "one-thirty",
        category: "Travel & Places",
        aliases: [
            "clock130"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕑",
        description: "two o’clock",
        category: "Travel & Places",
        aliases: [
            "clock2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕝",
        description: "two-thirty",
        category: "Travel & Places",
        aliases: [
            "clock230"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕒",
        description: "three o’clock",
        category: "Travel & Places",
        aliases: [
            "clock3"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕞",
        description: "three-thirty",
        category: "Travel & Places",
        aliases: [
            "clock330"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕓",
        description: "four o’clock",
        category: "Travel & Places",
        aliases: [
            "clock4"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕟",
        description: "four-thirty",
        category: "Travel & Places",
        aliases: [
            "clock430"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕔",
        description: "five o’clock",
        category: "Travel & Places",
        aliases: [
            "clock5"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕠",
        description: "five-thirty",
        category: "Travel & Places",
        aliases: [
            "clock530"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕕",
        description: "six o’clock",
        category: "Travel & Places",
        aliases: [
            "clock6"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕡",
        description: "six-thirty",
        category: "Travel & Places",
        aliases: [
            "clock630"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕖",
        description: "seven o’clock",
        category: "Travel & Places",
        aliases: [
            "clock7"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕢",
        description: "seven-thirty",
        category: "Travel & Places",
        aliases: [
            "clock730"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕗",
        description: "eight o’clock",
        category: "Travel & Places",
        aliases: [
            "clock8"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕣",
        description: "eight-thirty",
        category: "Travel & Places",
        aliases: [
            "clock830"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕘",
        description: "nine o’clock",
        category: "Travel & Places",
        aliases: [
            "clock9"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕤",
        description: "nine-thirty",
        category: "Travel & Places",
        aliases: [
            "clock930"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕙",
        description: "ten o’clock",
        category: "Travel & Places",
        aliases: [
            "clock10"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕥",
        description: "ten-thirty",
        category: "Travel & Places",
        aliases: [
            "clock1030"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕚",
        description: "eleven o’clock",
        category: "Travel & Places",
        aliases: [
            "clock11"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕦",
        description: "eleven-thirty",
        category: "Travel & Places",
        aliases: [
            "clock1130"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌑",
        description: "new moon",
        category: "Travel & Places",
        aliases: [
            "new_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌒",
        description: "waxing crescent moon",
        category: "Travel & Places",
        aliases: [
            "waxing_crescent_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌓",
        description: "first quarter moon",
        category: "Travel & Places",
        aliases: [
            "first_quarter_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌔",
        description: "waxing gibbous moon",
        category: "Travel & Places",
        aliases: [
            "moon",
            "waxing_gibbous_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌕",
        description: "full moon",
        category: "Travel & Places",
        aliases: [
            "full_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌖",
        description: "waning gibbous moon",
        category: "Travel & Places",
        aliases: [
            "waning_gibbous_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌗",
        description: "last quarter moon",
        category: "Travel & Places",
        aliases: [
            "last_quarter_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌘",
        description: "waning crescent moon",
        category: "Travel & Places",
        aliases: [
            "waning_crescent_moon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌙",
        description: "crescent moon",
        category: "Travel & Places",
        aliases: [
            "crescent_moon"
        ],
        tags: [
            "night"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌚",
        description: "new moon face",
        category: "Travel & Places",
        aliases: [
            "new_moon_with_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌛",
        description: "first quarter moon face",
        category: "Travel & Places",
        aliases: [
            "first_quarter_moon_with_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌜",
        description: "last quarter moon face",
        category: "Travel & Places",
        aliases: [
            "last_quarter_moon_with_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌡️",
        description: "thermometer",
        category: "Travel & Places",
        aliases: [
            "thermometer"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "☀️",
        description: "sun",
        category: "Travel & Places",
        aliases: [
            "sunny"
        ],
        tags: [
            "weather"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🌝",
        description: "full moon face",
        category: "Travel & Places",
        aliases: [
            "full_moon_with_face"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌞",
        description: "sun with face",
        category: "Travel & Places",
        aliases: [
            "sun_with_face"
        ],
        tags: [
            "summer"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪐",
        description: "ringed planet",
        category: "Travel & Places",
        aliases: [
            "ringed_planet"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "⭐",
        description: "star",
        category: "Travel & Places",
        aliases: [
            "star"
        ],
        tags: [],
        unicodeVersion: "5.1",
        iosVersion: "6.0"
    },
    {
        emoji: "🌟",
        description: "glowing star",
        category: "Travel & Places",
        aliases: [
            "star2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌠",
        description: "shooting star",
        category: "Travel & Places",
        aliases: [
            "stars"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌌",
        description: "milky way",
        category: "Travel & Places",
        aliases: [
            "milky_way"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☁️",
        description: "cloud",
        category: "Travel & Places",
        aliases: [
            "cloud"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⛅",
        description: "sun behind cloud",
        category: "Travel & Places",
        aliases: [
            "partly_sunny"
        ],
        tags: [
            "weather",
            "cloud"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "⛈️",
        description: "cloud with lightning and rain",
        category: "Travel & Places",
        aliases: [
            "cloud_with_lightning_and_rain"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🌤️",
        description: "sun behind small cloud",
        category: "Travel & Places",
        aliases: [
            "sun_behind_small_cloud"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌥️",
        description: "sun behind large cloud",
        category: "Travel & Places",
        aliases: [
            "sun_behind_large_cloud"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌦️",
        description: "sun behind rain cloud",
        category: "Travel & Places",
        aliases: [
            "sun_behind_rain_cloud"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌧️",
        description: "cloud with rain",
        category: "Travel & Places",
        aliases: [
            "cloud_with_rain"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌨️",
        description: "cloud with snow",
        category: "Travel & Places",
        aliases: [
            "cloud_with_snow"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌩️",
        description: "cloud with lightning",
        category: "Travel & Places",
        aliases: [
            "cloud_with_lightning"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌪️",
        description: "tornado",
        category: "Travel & Places",
        aliases: [
            "tornado"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌫️",
        description: "fog",
        category: "Travel & Places",
        aliases: [
            "fog"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌬️",
        description: "wind face",
        category: "Travel & Places",
        aliases: [
            "wind_face"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🌀",
        description: "cyclone",
        category: "Travel & Places",
        aliases: [
            "cyclone"
        ],
        tags: [
            "swirl"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌈",
        description: "rainbow",
        category: "Travel & Places",
        aliases: [
            "rainbow"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌂",
        description: "closed umbrella",
        category: "Travel & Places",
        aliases: [
            "closed_umbrella"
        ],
        tags: [
            "weather",
            "rain"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☂️",
        description: "umbrella",
        category: "Travel & Places",
        aliases: [
            "open_umbrella"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☔",
        description: "umbrella with rain drops",
        category: "Travel & Places",
        aliases: [
            "umbrella"
        ],
        tags: [
            "rain",
            "weather"
        ],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⛱️",
        description: "umbrella on ground",
        category: "Travel & Places",
        aliases: [
            "parasol_on_ground"
        ],
        tags: [
            "beach_umbrella"
        ],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "⚡",
        description: "high voltage",
        category: "Travel & Places",
        aliases: [
            "zap"
        ],
        tags: [
            "lightning",
            "thunder"
        ],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❄️",
        description: "snowflake",
        category: "Travel & Places",
        aliases: [
            "snowflake"
        ],
        tags: [
            "winter",
            "cold",
            "weather"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "☃️",
        description: "snowman",
        category: "Travel & Places",
        aliases: [
            "snowman_with_snow"
        ],
        tags: [
            "winter",
            "christmas"
        ],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "⛄",
        description: "snowman without snow",
        category: "Travel & Places",
        aliases: [
            "snowman"
        ],
        tags: [
            "winter"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "☄️",
        description: "comet",
        category: "Travel & Places",
        aliases: [
            "comet"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "🔥",
        description: "fire",
        category: "Travel & Places",
        aliases: [
            "fire"
        ],
        tags: [
            "burn"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💧",
        description: "droplet",
        category: "Travel & Places",
        aliases: [
            "droplet"
        ],
        tags: [
            "water"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🌊",
        description: "water wave",
        category: "Travel & Places",
        aliases: [
            "ocean"
        ],
        tags: [
            "sea"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎃",
        description: "jack-o-lantern",
        category: "Activities",
        aliases: [
            "jack_o_lantern"
        ],
        tags: [
            "halloween"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎄",
        description: "Christmas tree",
        category: "Activities",
        aliases: [
            "christmas_tree"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎆",
        description: "fireworks",
        category: "Activities",
        aliases: [
            "fireworks"
        ],
        tags: [
            "festival",
            "celebration"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎇",
        description: "sparkler",
        category: "Activities",
        aliases: [
            "sparkler"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧨",
        description: "firecracker",
        category: "Activities",
        aliases: [
            "firecracker"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "✨",
        description: "sparkles",
        category: "Activities",
        aliases: [
            "sparkles"
        ],
        tags: [
            "shiny"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎈",
        description: "balloon",
        category: "Activities",
        aliases: [
            "balloon"
        ],
        tags: [
            "party",
            "birthday"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎉",
        description: "party popper",
        category: "Activities",
        aliases: [
            "tada"
        ],
        tags: [
            "hooray",
            "party"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎊",
        description: "confetti ball",
        category: "Activities",
        aliases: [
            "confetti_ball"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎋",
        description: "tanabata tree",
        category: "Activities",
        aliases: [
            "tanabata_tree"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎍",
        description: "pine decoration",
        category: "Activities",
        aliases: [
            "bamboo"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎎",
        description: "Japanese dolls",
        category: "Activities",
        aliases: [
            "dolls"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎏",
        description: "carp streamer",
        category: "Activities",
        aliases: [
            "flags"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎐",
        description: "wind chime",
        category: "Activities",
        aliases: [
            "wind_chime"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎑",
        description: "moon viewing ceremony",
        category: "Activities",
        aliases: [
            "rice_scene"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧧",
        description: "red envelope",
        category: "Activities",
        aliases: [
            "red_envelope"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🎀",
        description: "ribbon",
        category: "Activities",
        aliases: [
            "ribbon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎁",
        description: "wrapped gift",
        category: "Activities",
        aliases: [
            "gift"
        ],
        tags: [
            "present",
            "birthday",
            "christmas"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎗️",
        description: "reminder ribbon",
        category: "Activities",
        aliases: [
            "reminder_ribbon"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎟️",
        description: "admission tickets",
        category: "Activities",
        aliases: [
            "tickets"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎫",
        description: "ticket",
        category: "Activities",
        aliases: [
            "ticket"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎖️",
        description: "military medal",
        category: "Activities",
        aliases: [
            "medal_military"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏆",
        description: "trophy",
        category: "Activities",
        aliases: [
            "trophy"
        ],
        tags: [
            "award",
            "contest",
            "winner"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏅",
        description: "sports medal",
        category: "Activities",
        aliases: [
            "medal_sports"
        ],
        tags: [
            "gold",
            "winner"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🥇",
        description: "1st place medal",
        category: "Activities",
        aliases: [
            "1st_place_medal"
        ],
        tags: [
            "gold"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥈",
        description: "2nd place medal",
        category: "Activities",
        aliases: [
            "2nd_place_medal"
        ],
        tags: [
            "silver"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥉",
        description: "3rd place medal",
        category: "Activities",
        aliases: [
            "3rd_place_medal"
        ],
        tags: [
            "bronze"
        ],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "⚽",
        description: "soccer ball",
        category: "Activities",
        aliases: [
            "soccer"
        ],
        tags: [
            "sports"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "⚾",
        description: "baseball",
        category: "Activities",
        aliases: [
            "baseball"
        ],
        tags: [
            "sports"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🥎",
        description: "softball",
        category: "Activities",
        aliases: [
            "softball"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🏀",
        description: "basketball",
        category: "Activities",
        aliases: [
            "basketball"
        ],
        tags: [
            "sports"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏐",
        description: "volleyball",
        category: "Activities",
        aliases: [
            "volleyball"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏈",
        description: "american football",
        category: "Activities",
        aliases: [
            "football"
        ],
        tags: [
            "sports"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏉",
        description: "rugby football",
        category: "Activities",
        aliases: [
            "rugby_football"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎾",
        description: "tennis",
        category: "Activities",
        aliases: [
            "tennis"
        ],
        tags: [
            "sports"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥏",
        description: "flying disc",
        category: "Activities",
        aliases: [
            "flying_disc"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🎳",
        description: "bowling",
        category: "Activities",
        aliases: [
            "bowling"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏏",
        description: "cricket game",
        category: "Activities",
        aliases: [
            "cricket_game"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏑",
        description: "field hockey",
        category: "Activities",
        aliases: [
            "field_hockey"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏒",
        description: "ice hockey",
        category: "Activities",
        aliases: [
            "ice_hockey"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🥍",
        description: "lacrosse",
        category: "Activities",
        aliases: [
            "lacrosse"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🏓",
        description: "ping pong",
        category: "Activities",
        aliases: [
            "ping_pong"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏸",
        description: "badminton",
        category: "Activities",
        aliases: [
            "badminton"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🥊",
        description: "boxing glove",
        category: "Activities",
        aliases: [
            "boxing_glove"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥋",
        description: "martial arts uniform",
        category: "Activities",
        aliases: [
            "martial_arts_uniform"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🥅",
        description: "goal net",
        category: "Activities",
        aliases: [
            "goal_net"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "⛳",
        description: "flag in hole",
        category: "Activities",
        aliases: [
            "golf"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "⛸️",
        description: "ice skate",
        category: "Activities",
        aliases: [
            "ice_skate"
        ],
        tags: [
            "skating"
        ],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🎣",
        description: "fishing pole",
        category: "Activities",
        aliases: [
            "fishing_pole_and_fish"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🤿",
        description: "diving mask",
        category: "Activities",
        aliases: [
            "diving_mask"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🎽",
        description: "running shirt",
        category: "Activities",
        aliases: [
            "running_shirt_with_sash"
        ],
        tags: [
            "marathon"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎿",
        description: "skis",
        category: "Activities",
        aliases: [
            "ski"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛷",
        description: "sled",
        category: "Activities",
        aliases: [
            "sled"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥌",
        description: "curling stone",
        category: "Activities",
        aliases: [
            "curling_stone"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🎯",
        description: "direct hit",
        category: "Activities",
        aliases: [
            "dart"
        ],
        tags: [
            "target"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪀",
        description: "yo-yo",
        category: "Activities",
        aliases: [
            "yo_yo"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🪁",
        description: "kite",
        category: "Activities",
        aliases: [
            "kite"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🎱",
        description: "pool 8 ball",
        category: "Activities",
        aliases: [
            "8ball"
        ],
        tags: [
            "pool",
            "billiards"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔮",
        description: "crystal ball",
        category: "Activities",
        aliases: [
            "crystal_ball"
        ],
        tags: [
            "fortune"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪄",
        description: "magic wand",
        category: "Activities",
        aliases: [
            "magic_wand"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🧿",
        description: "nazar amulet",
        category: "Activities",
        aliases: [
            "nazar_amulet"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🎮",
        description: "video game",
        category: "Activities",
        aliases: [
            "video_game"
        ],
        tags: [
            "play",
            "controller",
            "console"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕹️",
        description: "joystick",
        category: "Activities",
        aliases: [
            "joystick"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎰",
        description: "slot machine",
        category: "Activities",
        aliases: [
            "slot_machine"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎲",
        description: "game die",
        category: "Activities",
        aliases: [
            "game_die"
        ],
        tags: [
            "dice",
            "gambling"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧩",
        description: "puzzle piece",
        category: "Activities",
        aliases: [
            "jigsaw"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧸",
        description: "teddy bear",
        category: "Activities",
        aliases: [
            "teddy_bear"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪅",
        description: "piñata",
        category: "Activities",
        aliases: [
            "pinata"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪆",
        description: "nesting dolls",
        category: "Activities",
        aliases: [
            "nesting_dolls"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "♠️",
        description: "spade suit",
        category: "Activities",
        aliases: [
            "spades"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♥️",
        description: "heart suit",
        category: "Activities",
        aliases: [
            "hearts"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♦️",
        description: "diamond suit",
        category: "Activities",
        aliases: [
            "diamonds"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♣️",
        description: "club suit",
        category: "Activities",
        aliases: [
            "clubs"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♟️",
        description: "chess pawn",
        category: "Activities",
        aliases: [
            "chess_pawn"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🃏",
        description: "joker",
        category: "Activities",
        aliases: [
            "black_joker"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🀄",
        description: "mahjong red dragon",
        category: "Activities",
        aliases: [
            "mahjong"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🎴",
        description: "flower playing cards",
        category: "Activities",
        aliases: [
            "flower_playing_cards"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎭",
        description: "performing arts",
        category: "Activities",
        aliases: [
            "performing_arts"
        ],
        tags: [
            "theater",
            "drama"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🖼️",
        description: "framed picture",
        category: "Activities",
        aliases: [
            "framed_picture"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎨",
        description: "artist palette",
        category: "Activities",
        aliases: [
            "art"
        ],
        tags: [
            "design",
            "paint"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧵",
        description: "thread",
        category: "Activities",
        aliases: [
            "thread"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪡",
        description: "sewing needle",
        category: "Activities",
        aliases: [
            "sewing_needle"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🧶",
        description: "yarn",
        category: "Activities",
        aliases: [
            "yarn"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪢",
        description: "knot",
        category: "Activities",
        aliases: [
            "knot"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "👓",
        description: "glasses",
        category: "Objects",
        aliases: [
            "eyeglasses"
        ],
        tags: [
            "glasses"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕶️",
        description: "sunglasses",
        category: "Objects",
        aliases: [
            "dark_sunglasses"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🥽",
        description: "goggles",
        category: "Objects",
        aliases: [
            "goggles"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥼",
        description: "lab coat",
        category: "Objects",
        aliases: [
            "lab_coat"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🦺",
        description: "safety vest",
        category: "Objects",
        aliases: [
            "safety_vest"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "👔",
        description: "necktie",
        category: "Objects",
        aliases: [
            "necktie"
        ],
        tags: [
            "shirt",
            "formal"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👕",
        description: "t-shirt",
        category: "Objects",
        aliases: [
            "shirt",
            "tshirt"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👖",
        description: "jeans",
        category: "Objects",
        aliases: [
            "jeans"
        ],
        tags: [
            "pants"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧣",
        description: "scarf",
        category: "Objects",
        aliases: [
            "scarf"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧤",
        description: "gloves",
        category: "Objects",
        aliases: [
            "gloves"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧥",
        description: "coat",
        category: "Objects",
        aliases: [
            "coat"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧦",
        description: "socks",
        category: "Objects",
        aliases: [
            "socks"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "👗",
        description: "dress",
        category: "Objects",
        aliases: [
            "dress"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👘",
        description: "kimono",
        category: "Objects",
        aliases: [
            "kimono"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥻",
        description: "sari",
        category: "Objects",
        aliases: [
            "sari"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🩱",
        description: "one-piece swimsuit",
        category: "Objects",
        aliases: [
            "one_piece_swimsuit"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🩲",
        description: "briefs",
        category: "Objects",
        aliases: [
            "swim_brief"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🩳",
        description: "shorts",
        category: "Objects",
        aliases: [
            "shorts"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "👙",
        description: "bikini",
        category: "Objects",
        aliases: [
            "bikini"
        ],
        tags: [
            "beach"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👚",
        description: "woman’s clothes",
        category: "Objects",
        aliases: [
            "womans_clothes"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👛",
        description: "purse",
        category: "Objects",
        aliases: [
            "purse"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👜",
        description: "handbag",
        category: "Objects",
        aliases: [
            "handbag"
        ],
        tags: [
            "bag"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👝",
        description: "clutch bag",
        category: "Objects",
        aliases: [
            "pouch"
        ],
        tags: [
            "bag"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛍️",
        description: "shopping bags",
        category: "Objects",
        aliases: [
            "shopping"
        ],
        tags: [
            "bags"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎒",
        description: "backpack",
        category: "Objects",
        aliases: [
            "school_satchel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🩴",
        description: "thong sandal",
        category: "Objects",
        aliases: [
            "thong_sandal"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "👞",
        description: "man’s shoe",
        category: "Objects",
        aliases: [
            "mans_shoe",
            "shoe"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👟",
        description: "running shoe",
        category: "Objects",
        aliases: [
            "athletic_shoe"
        ],
        tags: [
            "sneaker",
            "sport",
            "running"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🥾",
        description: "hiking boot",
        category: "Objects",
        aliases: [
            "hiking_boot"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🥿",
        description: "flat shoe",
        category: "Objects",
        aliases: [
            "flat_shoe"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "👠",
        description: "high-heeled shoe",
        category: "Objects",
        aliases: [
            "high_heel"
        ],
        tags: [
            "shoe"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👡",
        description: "woman’s sandal",
        category: "Objects",
        aliases: [
            "sandal"
        ],
        tags: [
            "shoe"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🩰",
        description: "ballet shoes",
        category: "Objects",
        aliases: [
            "ballet_shoes"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "👢",
        description: "woman’s boot",
        category: "Objects",
        aliases: [
            "boot"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👑",
        description: "crown",
        category: "Objects",
        aliases: [
            "crown"
        ],
        tags: [
            "king",
            "queen",
            "royal"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "👒",
        description: "woman’s hat",
        category: "Objects",
        aliases: [
            "womans_hat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎩",
        description: "top hat",
        category: "Objects",
        aliases: [
            "tophat"
        ],
        tags: [
            "hat",
            "classy"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎓",
        description: "graduation cap",
        category: "Objects",
        aliases: [
            "mortar_board"
        ],
        tags: [
            "education",
            "college",
            "university",
            "graduation"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧢",
        description: "billed cap",
        category: "Objects",
        aliases: [
            "billed_cap"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪖",
        description: "military helmet",
        category: "Objects",
        aliases: [
            "military_helmet"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "⛑️",
        description: "rescue worker’s helmet",
        category: "Objects",
        aliases: [
            "rescue_worker_helmet"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "📿",
        description: "prayer beads",
        category: "Objects",
        aliases: [
            "prayer_beads"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "💄",
        description: "lipstick",
        category: "Objects",
        aliases: [
            "lipstick"
        ],
        tags: [
            "makeup"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💍",
        description: "ring",
        category: "Objects",
        aliases: [
            "ring"
        ],
        tags: [
            "wedding",
            "marriage",
            "engaged"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💎",
        description: "gem stone",
        category: "Objects",
        aliases: [
            "gem"
        ],
        tags: [
            "diamond"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔇",
        description: "muted speaker",
        category: "Objects",
        aliases: [
            "mute"
        ],
        tags: [
            "sound",
            "volume"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔈",
        description: "speaker low volume",
        category: "Objects",
        aliases: [
            "speaker"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔉",
        description: "speaker medium volume",
        category: "Objects",
        aliases: [
            "sound"
        ],
        tags: [
            "volume"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔊",
        description: "speaker high volume",
        category: "Objects",
        aliases: [
            "loud_sound"
        ],
        tags: [
            "volume"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📢",
        description: "loudspeaker",
        category: "Objects",
        aliases: [
            "loudspeaker"
        ],
        tags: [
            "announcement"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📣",
        description: "megaphone",
        category: "Objects",
        aliases: [
            "mega"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📯",
        description: "postal horn",
        category: "Objects",
        aliases: [
            "postal_horn"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔔",
        description: "bell",
        category: "Objects",
        aliases: [
            "bell"
        ],
        tags: [
            "sound",
            "notification"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔕",
        description: "bell with slash",
        category: "Objects",
        aliases: [
            "no_bell"
        ],
        tags: [
            "volume",
            "off"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎼",
        description: "musical score",
        category: "Objects",
        aliases: [
            "musical_score"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎵",
        description: "musical note",
        category: "Objects",
        aliases: [
            "musical_note"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎶",
        description: "musical notes",
        category: "Objects",
        aliases: [
            "notes"
        ],
        tags: [
            "music"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎙️",
        description: "studio microphone",
        category: "Objects",
        aliases: [
            "studio_microphone"
        ],
        tags: [
            "podcast"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎚️",
        description: "level slider",
        category: "Objects",
        aliases: [
            "level_slider"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎛️",
        description: "control knobs",
        category: "Objects",
        aliases: [
            "control_knobs"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎤",
        description: "microphone",
        category: "Objects",
        aliases: [
            "microphone"
        ],
        tags: [
            "sing"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎧",
        description: "headphone",
        category: "Objects",
        aliases: [
            "headphones"
        ],
        tags: [
            "music",
            "earphones"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📻",
        description: "radio",
        category: "Objects",
        aliases: [
            "radio"
        ],
        tags: [
            "podcast"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎷",
        description: "saxophone",
        category: "Objects",
        aliases: [
            "saxophone"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪗",
        description: "accordion",
        category: "Objects",
        aliases: [
            "accordion"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🎸",
        description: "guitar",
        category: "Objects",
        aliases: [
            "guitar"
        ],
        tags: [
            "rock"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎹",
        description: "musical keyboard",
        category: "Objects",
        aliases: [
            "musical_keyboard"
        ],
        tags: [
            "piano"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎺",
        description: "trumpet",
        category: "Objects",
        aliases: [
            "trumpet"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎻",
        description: "violin",
        category: "Objects",
        aliases: [
            "violin"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪕",
        description: "banjo",
        category: "Objects",
        aliases: [
            "banjo"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🥁",
        description: "drum",
        category: "Objects",
        aliases: [
            "drum"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "10.2"
    },
    {
        emoji: "🪘",
        description: "long drum",
        category: "Objects",
        aliases: [
            "long_drum"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "📱",
        description: "mobile phone",
        category: "Objects",
        aliases: [
            "iphone"
        ],
        tags: [
            "smartphone",
            "mobile"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📲",
        description: "mobile phone with arrow",
        category: "Objects",
        aliases: [
            "calling"
        ],
        tags: [
            "call",
            "incoming"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☎️",
        description: "telephone",
        category: "Objects",
        aliases: [
            "phone",
            "telephone"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "📞",
        description: "telephone receiver",
        category: "Objects",
        aliases: [
            "telephone_receiver"
        ],
        tags: [
            "phone",
            "call"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📟",
        description: "pager",
        category: "Objects",
        aliases: [
            "pager"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📠",
        description: "fax machine",
        category: "Objects",
        aliases: [
            "fax"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔋",
        description: "battery",
        category: "Objects",
        aliases: [
            "battery"
        ],
        tags: [
            "power"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔌",
        description: "electric plug",
        category: "Objects",
        aliases: [
            "electric_plug"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💻",
        description: "laptop",
        category: "Objects",
        aliases: [
            "computer"
        ],
        tags: [
            "desktop",
            "screen"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🖥️",
        description: "desktop computer",
        category: "Objects",
        aliases: [
            "desktop_computer"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🖨️",
        description: "printer",
        category: "Objects",
        aliases: [
            "printer"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⌨️",
        description: "keyboard",
        category: "Objects",
        aliases: [
            "keyboard"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "🖱️",
        description: "computer mouse",
        category: "Objects",
        aliases: [
            "computer_mouse"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🖲️",
        description: "trackball",
        category: "Objects",
        aliases: [
            "trackball"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "💽",
        description: "computer disk",
        category: "Objects",
        aliases: [
            "minidisc"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💾",
        description: "floppy disk",
        category: "Objects",
        aliases: [
            "floppy_disk"
        ],
        tags: [
            "save"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💿",
        description: "optical disk",
        category: "Objects",
        aliases: [
            "cd"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📀",
        description: "dvd",
        category: "Objects",
        aliases: [
            "dvd"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧮",
        description: "abacus",
        category: "Objects",
        aliases: [
            "abacus"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🎥",
        description: "movie camera",
        category: "Objects",
        aliases: [
            "movie_camera"
        ],
        tags: [
            "film",
            "video"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎞️",
        description: "film frames",
        category: "Objects",
        aliases: [
            "film_strip"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📽️",
        description: "film projector",
        category: "Objects",
        aliases: [
            "film_projector"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🎬",
        description: "clapper board",
        category: "Objects",
        aliases: [
            "clapper"
        ],
        tags: [
            "film"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📺",
        description: "television",
        category: "Objects",
        aliases: [
            "tv"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📷",
        description: "camera",
        category: "Objects",
        aliases: [
            "camera"
        ],
        tags: [
            "photo"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📸",
        description: "camera with flash",
        category: "Objects",
        aliases: [
            "camera_flash"
        ],
        tags: [
            "photo"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📹",
        description: "video camera",
        category: "Objects",
        aliases: [
            "video_camera"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📼",
        description: "videocassette",
        category: "Objects",
        aliases: [
            "vhs"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔍",
        description: "magnifying glass tilted left",
        category: "Objects",
        aliases: [
            "mag"
        ],
        tags: [
            "search",
            "zoom"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔎",
        description: "magnifying glass tilted right",
        category: "Objects",
        aliases: [
            "mag_right"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🕯️",
        description: "candle",
        category: "Objects",
        aliases: [
            "candle"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "💡",
        description: "light bulb",
        category: "Objects",
        aliases: [
            "bulb"
        ],
        tags: [
            "idea",
            "light"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔦",
        description: "flashlight",
        category: "Objects",
        aliases: [
            "flashlight"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏮",
        description: "red paper lantern",
        category: "Objects",
        aliases: [
            "izakaya_lantern",
            "lantern"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪔",
        description: "diya lamp",
        category: "Objects",
        aliases: [
            "diya_lamp"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "📔",
        description: "notebook with decorative cover",
        category: "Objects",
        aliases: [
            "notebook_with_decorative_cover"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📕",
        description: "closed book",
        category: "Objects",
        aliases: [
            "closed_book"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📖",
        description: "open book",
        category: "Objects",
        aliases: [
            "book",
            "open_book"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📗",
        description: "green book",
        category: "Objects",
        aliases: [
            "green_book"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📘",
        description: "blue book",
        category: "Objects",
        aliases: [
            "blue_book"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📙",
        description: "orange book",
        category: "Objects",
        aliases: [
            "orange_book"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📚",
        description: "books",
        category: "Objects",
        aliases: [
            "books"
        ],
        tags: [
            "library"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📓",
        description: "notebook",
        category: "Objects",
        aliases: [
            "notebook"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📒",
        description: "ledger",
        category: "Objects",
        aliases: [
            "ledger"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📃",
        description: "page with curl",
        category: "Objects",
        aliases: [
            "page_with_curl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📜",
        description: "scroll",
        category: "Objects",
        aliases: [
            "scroll"
        ],
        tags: [
            "document"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📄",
        description: "page facing up",
        category: "Objects",
        aliases: [
            "page_facing_up"
        ],
        tags: [
            "document"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📰",
        description: "newspaper",
        category: "Objects",
        aliases: [
            "newspaper"
        ],
        tags: [
            "press"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗞️",
        description: "rolled-up newspaper",
        category: "Objects",
        aliases: [
            "newspaper_roll"
        ],
        tags: [
            "press"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📑",
        description: "bookmark tabs",
        category: "Objects",
        aliases: [
            "bookmark_tabs"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔖",
        description: "bookmark",
        category: "Objects",
        aliases: [
            "bookmark"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏷️",
        description: "label",
        category: "Objects",
        aliases: [
            "label"
        ],
        tags: [
            "tag"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "💰",
        description: "money bag",
        category: "Objects",
        aliases: [
            "moneybag"
        ],
        tags: [
            "dollar",
            "cream"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪙",
        description: "coin",
        category: "Objects",
        aliases: [
            "coin"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "💴",
        description: "yen banknote",
        category: "Objects",
        aliases: [
            "yen"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💵",
        description: "dollar banknote",
        category: "Objects",
        aliases: [
            "dollar"
        ],
        tags: [
            "money"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💶",
        description: "euro banknote",
        category: "Objects",
        aliases: [
            "euro"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💷",
        description: "pound banknote",
        category: "Objects",
        aliases: [
            "pound"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💸",
        description: "money with wings",
        category: "Objects",
        aliases: [
            "money_with_wings"
        ],
        tags: [
            "dollar"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💳",
        description: "credit card",
        category: "Objects",
        aliases: [
            "credit_card"
        ],
        tags: [
            "subscription"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🧾",
        description: "receipt",
        category: "Objects",
        aliases: [
            "receipt"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "💹",
        description: "chart increasing with yen",
        category: "Objects",
        aliases: [
            "chart"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "✉️",
        description: "envelope",
        category: "Objects",
        aliases: [
            "email",
            "envelope"
        ],
        tags: [
            "letter"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "📧",
        description: "e-mail",
        category: "Objects",
        aliases: [
            "e-mail"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📨",
        description: "incoming envelope",
        category: "Objects",
        aliases: [
            "incoming_envelope"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📩",
        description: "envelope with arrow",
        category: "Objects",
        aliases: [
            "envelope_with_arrow"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📤",
        description: "outbox tray",
        category: "Objects",
        aliases: [
            "outbox_tray"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📥",
        description: "inbox tray",
        category: "Objects",
        aliases: [
            "inbox_tray"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📦",
        description: "package",
        category: "Objects",
        aliases: [
            "package"
        ],
        tags: [
            "shipping"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📫",
        description: "closed mailbox with raised flag",
        category: "Objects",
        aliases: [
            "mailbox"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📪",
        description: "closed mailbox with lowered flag",
        category: "Objects",
        aliases: [
            "mailbox_closed"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📬",
        description: "open mailbox with raised flag",
        category: "Objects",
        aliases: [
            "mailbox_with_mail"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📭",
        description: "open mailbox with lowered flag",
        category: "Objects",
        aliases: [
            "mailbox_with_no_mail"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📮",
        description: "postbox",
        category: "Objects",
        aliases: [
            "postbox"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗳️",
        description: "ballot box with ballot",
        category: "Objects",
        aliases: [
            "ballot_box"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "✏️",
        description: "pencil",
        category: "Objects",
        aliases: [
            "pencil2"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "✒️",
        description: "black nib",
        category: "Objects",
        aliases: [
            "black_nib"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🖋️",
        description: "fountain pen",
        category: "Objects",
        aliases: [
            "fountain_pen"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🖊️",
        description: "pen",
        category: "Objects",
        aliases: [
            "pen"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🖌️",
        description: "paintbrush",
        category: "Objects",
        aliases: [
            "paintbrush"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🖍️",
        description: "crayon",
        category: "Objects",
        aliases: [
            "crayon"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📝",
        description: "memo",
        category: "Objects",
        aliases: [
            "memo",
            "pencil"
        ],
        tags: [
            "document",
            "note"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💼",
        description: "briefcase",
        category: "Objects",
        aliases: [
            "briefcase"
        ],
        tags: [
            "business"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📁",
        description: "file folder",
        category: "Objects",
        aliases: [
            "file_folder"
        ],
        tags: [
            "directory"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📂",
        description: "open file folder",
        category: "Objects",
        aliases: [
            "open_file_folder"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗂️",
        description: "card index dividers",
        category: "Objects",
        aliases: [
            "card_index_dividers"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📅",
        description: "calendar",
        category: "Objects",
        aliases: [
            "date"
        ],
        tags: [
            "calendar",
            "schedule"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📆",
        description: "tear-off calendar",
        category: "Objects",
        aliases: [
            "calendar"
        ],
        tags: [
            "schedule"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗒️",
        description: "spiral notepad",
        category: "Objects",
        aliases: [
            "spiral_notepad"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🗓️",
        description: "spiral calendar",
        category: "Objects",
        aliases: [
            "spiral_calendar"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📇",
        description: "card index",
        category: "Objects",
        aliases: [
            "card_index"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📈",
        description: "chart increasing",
        category: "Objects",
        aliases: [
            "chart_with_upwards_trend"
        ],
        tags: [
            "graph",
            "metrics"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📉",
        description: "chart decreasing",
        category: "Objects",
        aliases: [
            "chart_with_downwards_trend"
        ],
        tags: [
            "graph",
            "metrics"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📊",
        description: "bar chart",
        category: "Objects",
        aliases: [
            "bar_chart"
        ],
        tags: [
            "stats",
            "metrics"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📋",
        description: "clipboard",
        category: "Objects",
        aliases: [
            "clipboard"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📌",
        description: "pushpin",
        category: "Objects",
        aliases: [
            "pushpin"
        ],
        tags: [
            "location"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📍",
        description: "round pushpin",
        category: "Objects",
        aliases: [
            "round_pushpin"
        ],
        tags: [
            "location"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📎",
        description: "paperclip",
        category: "Objects",
        aliases: [
            "paperclip"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🖇️",
        description: "linked paperclips",
        category: "Objects",
        aliases: [
            "paperclips"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "📏",
        description: "straight ruler",
        category: "Objects",
        aliases: [
            "straight_ruler"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📐",
        description: "triangular ruler",
        category: "Objects",
        aliases: [
            "triangular_ruler"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "✂️",
        description: "scissors",
        category: "Objects",
        aliases: [
            "scissors"
        ],
        tags: [
            "cut"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🗃️",
        description: "card file box",
        category: "Objects",
        aliases: [
            "card_file_box"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🗄️",
        description: "file cabinet",
        category: "Objects",
        aliases: [
            "file_cabinet"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🗑️",
        description: "wastebasket",
        category: "Objects",
        aliases: [
            "wastebasket"
        ],
        tags: [
            "trash"
        ],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🔒",
        description: "locked",
        category: "Objects",
        aliases: [
            "lock"
        ],
        tags: [
            "security",
            "private"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔓",
        description: "unlocked",
        category: "Objects",
        aliases: [
            "unlock"
        ],
        tags: [
            "security"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔏",
        description: "locked with pen",
        category: "Objects",
        aliases: [
            "lock_with_ink_pen"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔐",
        description: "locked with key",
        category: "Objects",
        aliases: [
            "closed_lock_with_key"
        ],
        tags: [
            "security"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔑",
        description: "key",
        category: "Objects",
        aliases: [
            "key"
        ],
        tags: [
            "lock",
            "password"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🗝️",
        description: "old key",
        category: "Objects",
        aliases: [
            "old_key"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🔨",
        description: "hammer",
        category: "Objects",
        aliases: [
            "hammer"
        ],
        tags: [
            "tool"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪓",
        description: "axe",
        category: "Objects",
        aliases: [
            "axe"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "⛏️",
        description: "pick",
        category: "Objects",
        aliases: [
            "pick"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "⚒️",
        description: "hammer and pick",
        category: "Objects",
        aliases: [
            "hammer_and_pick"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🛠️",
        description: "hammer and wrench",
        category: "Objects",
        aliases: [
            "hammer_and_wrench"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🗡️",
        description: "dagger",
        category: "Objects",
        aliases: [
            "dagger"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⚔️",
        description: "crossed swords",
        category: "Objects",
        aliases: [
            "crossed_swords"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🔫",
        description: "pistol",
        category: "Objects",
        aliases: [
            "gun"
        ],
        tags: [
            "shoot",
            "weapon"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪃",
        description: "boomerang",
        category: "Objects",
        aliases: [
            "boomerang"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🏹",
        description: "bow and arrow",
        category: "Objects",
        aliases: [
            "bow_and_arrow"
        ],
        tags: [
            "archery"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛡️",
        description: "shield",
        category: "Objects",
        aliases: [
            "shield"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🪚",
        description: "carpentry saw",
        category: "Objects",
        aliases: [
            "carpentry_saw"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🔧",
        description: "wrench",
        category: "Objects",
        aliases: [
            "wrench"
        ],
        tags: [
            "tool"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪛",
        description: "screwdriver",
        category: "Objects",
        aliases: [
            "screwdriver"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🔩",
        description: "nut and bolt",
        category: "Objects",
        aliases: [
            "nut_and_bolt"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⚙️",
        description: "gear",
        category: "Objects",
        aliases: [
            "gear"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🗜️",
        description: "clamp",
        category: "Objects",
        aliases: [
            "clamp"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⚖️",
        description: "balance scale",
        category: "Objects",
        aliases: [
            "balance_scale"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🦯",
        description: "white cane",
        category: "Objects",
        aliases: [
            "probing_cane"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🔗",
        description: "link",
        category: "Objects",
        aliases: [
            "link"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⛓️",
        description: "chains",
        category: "Objects",
        aliases: [
            "chains"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "9.1"
    },
    {
        emoji: "🪝",
        description: "hook",
        category: "Objects",
        aliases: [
            "hook"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🧰",
        description: "toolbox",
        category: "Objects",
        aliases: [
            "toolbox"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧲",
        description: "magnet",
        category: "Objects",
        aliases: [
            "magnet"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪜",
        description: "ladder",
        category: "Objects",
        aliases: [
            "ladder"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "⚗️",
        description: "alembic",
        category: "Objects",
        aliases: [
            "alembic"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🧪",
        description: "test tube",
        category: "Objects",
        aliases: [
            "test_tube"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧫",
        description: "petri dish",
        category: "Objects",
        aliases: [
            "petri_dish"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧬",
        description: "dna",
        category: "Objects",
        aliases: [
            "dna"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🔬",
        description: "microscope",
        category: "Objects",
        aliases: [
            "microscope"
        ],
        tags: [
            "science",
            "laboratory",
            "investigate"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔭",
        description: "telescope",
        category: "Objects",
        aliases: [
            "telescope"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📡",
        description: "satellite antenna",
        category: "Objects",
        aliases: [
            "satellite"
        ],
        tags: [
            "signal"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💉",
        description: "syringe",
        category: "Objects",
        aliases: [
            "syringe"
        ],
        tags: [
            "health",
            "hospital",
            "needle"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🩸",
        description: "drop of blood",
        category: "Objects",
        aliases: [
            "drop_of_blood"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "💊",
        description: "pill",
        category: "Objects",
        aliases: [
            "pill"
        ],
        tags: [
            "health",
            "medicine"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🩹",
        description: "adhesive bandage",
        category: "Objects",
        aliases: [
            "adhesive_bandage"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🩺",
        description: "stethoscope",
        category: "Objects",
        aliases: [
            "stethoscope"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🚪",
        description: "door",
        category: "Objects",
        aliases: [
            "door"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛗",
        description: "elevator",
        category: "Objects",
        aliases: [
            "elevator"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪞",
        description: "mirror",
        category: "Objects",
        aliases: [
            "mirror"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪟",
        description: "window",
        category: "Objects",
        aliases: [
            "window"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🛏️",
        description: "bed",
        category: "Objects",
        aliases: [
            "bed"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🛋️",
        description: "couch and lamp",
        category: "Objects",
        aliases: [
            "couch_and_lamp"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🪑",
        description: "chair",
        category: "Objects",
        aliases: [
            "chair"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🚽",
        description: "toilet",
        category: "Objects",
        aliases: [
            "toilet"
        ],
        tags: [
            "wc"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪠",
        description: "plunger",
        category: "Objects",
        aliases: [
            "plunger"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🚿",
        description: "shower",
        category: "Objects",
        aliases: [
            "shower"
        ],
        tags: [
            "bath"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛁",
        description: "bathtub",
        category: "Objects",
        aliases: [
            "bathtub"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪤",
        description: "mouse trap",
        category: "Objects",
        aliases: [
            "mouse_trap"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🪒",
        description: "razor",
        category: "Objects",
        aliases: [
            "razor"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🧴",
        description: "lotion bottle",
        category: "Objects",
        aliases: [
            "lotion_bottle"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧷",
        description: "safety pin",
        category: "Objects",
        aliases: [
            "safety_pin"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧹",
        description: "broom",
        category: "Objects",
        aliases: [
            "broom"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧺",
        description: "basket",
        category: "Objects",
        aliases: [
            "basket"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧻",
        description: "roll of paper",
        category: "Objects",
        aliases: [
            "roll_of_paper"
        ],
        tags: [
            "toilet"
        ],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪣",
        description: "bucket",
        category: "Objects",
        aliases: [
            "bucket"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🧼",
        description: "soap",
        category: "Objects",
        aliases: [
            "soap"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🪥",
        description: "toothbrush",
        category: "Objects",
        aliases: [
            "toothbrush"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🧽",
        description: "sponge",
        category: "Objects",
        aliases: [
            "sponge"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🧯",
        description: "fire extinguisher",
        category: "Objects",
        aliases: [
            "fire_extinguisher"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🛒",
        description: "shopping cart",
        category: "Objects",
        aliases: [
            "shopping_cart"
        ],
        tags: [],
        unicodeVersion: "9.0",
        iosVersion: "10.2"
    },
    {
        emoji: "🚬",
        description: "cigarette",
        category: "Objects",
        aliases: [
            "smoking"
        ],
        tags: [
            "cigarette"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⚰️",
        description: "coffin",
        category: "Objects",
        aliases: [
            "coffin"
        ],
        tags: [
            "funeral"
        ],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🪦",
        description: "headstone",
        category: "Objects",
        aliases: [
            "headstone"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "⚱️",
        description: "funeral urn",
        category: "Objects",
        aliases: [
            "funeral_urn"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🗿",
        description: "moai",
        category: "Objects",
        aliases: [
            "moyai"
        ],
        tags: [
            "stone"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🪧",
        description: "placard",
        category: "Objects",
        aliases: [
            "placard"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🏧",
        description: "ATM sign",
        category: "Symbols",
        aliases: [
            "atm"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚮",
        description: "litter in bin sign",
        category: "Symbols",
        aliases: [
            "put_litter_in_its_place"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚰",
        description: "potable water",
        category: "Symbols",
        aliases: [
            "potable_water"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "♿",
        description: "wheelchair symbol",
        category: "Symbols",
        aliases: [
            "wheelchair"
        ],
        tags: [
            "accessibility"
        ],
        unicodeVersion: "4.1",
        iosVersion: "6.0"
    },
    {
        emoji: "🚹",
        description: "men’s room",
        category: "Symbols",
        aliases: [
            "mens"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚺",
        description: "women’s room",
        category: "Symbols",
        aliases: [
            "womens"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚻",
        description: "restroom",
        category: "Symbols",
        aliases: [
            "restroom"
        ],
        tags: [
            "toilet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚼",
        description: "baby symbol",
        category: "Symbols",
        aliases: [
            "baby_symbol"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚾",
        description: "water closet",
        category: "Symbols",
        aliases: [
            "wc"
        ],
        tags: [
            "toilet",
            "restroom"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛂",
        description: "passport control",
        category: "Symbols",
        aliases: [
            "passport_control"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛃",
        description: "customs",
        category: "Symbols",
        aliases: [
            "customs"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛄",
        description: "baggage claim",
        category: "Symbols",
        aliases: [
            "baggage_claim"
        ],
        tags: [
            "airport"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛅",
        description: "left luggage",
        category: "Symbols",
        aliases: [
            "left_luggage"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⚠️",
        description: "warning",
        category: "Symbols",
        aliases: [
            "warning"
        ],
        tags: [
            "wip"
        ],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚸",
        description: "children crossing",
        category: "Symbols",
        aliases: [
            "children_crossing"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⛔",
        description: "no entry",
        category: "Symbols",
        aliases: [
            "no_entry"
        ],
        tags: [
            "limit"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🚫",
        description: "prohibited",
        category: "Symbols",
        aliases: [
            "no_entry_sign"
        ],
        tags: [
            "block",
            "forbidden"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚳",
        description: "no bicycles",
        category: "Symbols",
        aliases: [
            "no_bicycles"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚭",
        description: "no smoking",
        category: "Symbols",
        aliases: [
            "no_smoking"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚯",
        description: "no littering",
        category: "Symbols",
        aliases: [
            "do_not_litter"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚱",
        description: "non-potable water",
        category: "Symbols",
        aliases: [
            "non-potable_water"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚷",
        description: "no pedestrians",
        category: "Symbols",
        aliases: [
            "no_pedestrians"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📵",
        description: "no mobile phones",
        category: "Symbols",
        aliases: [
            "no_mobile_phones"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔞",
        description: "no one under eighteen",
        category: "Symbols",
        aliases: [
            "underage"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☢️",
        description: "radioactive",
        category: "Symbols",
        aliases: [
            "radioactive"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☣️",
        description: "biohazard",
        category: "Symbols",
        aliases: [
            "biohazard"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "⬆️",
        description: "up arrow",
        category: "Symbols",
        aliases: [
            "arrow_up"
        ],
        tags: [],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "↗️",
        description: "up-right arrow",
        category: "Symbols",
        aliases: [
            "arrow_upper_right"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "➡️",
        description: "right arrow",
        category: "Symbols",
        aliases: [
            "arrow_right"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "↘️",
        description: "down-right arrow",
        category: "Symbols",
        aliases: [
            "arrow_lower_right"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⬇️",
        description: "down arrow",
        category: "Symbols",
        aliases: [
            "arrow_down"
        ],
        tags: [],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "↙️",
        description: "down-left arrow",
        category: "Symbols",
        aliases: [
            "arrow_lower_left"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⬅️",
        description: "left arrow",
        category: "Symbols",
        aliases: [
            "arrow_left"
        ],
        tags: [],
        unicodeVersion: "4.0",
        iosVersion: "6.0"
    },
    {
        emoji: "↖️",
        description: "up-left arrow",
        category: "Symbols",
        aliases: [
            "arrow_upper_left"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "↕️",
        description: "up-down arrow",
        category: "Symbols",
        aliases: [
            "arrow_up_down"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "↔️",
        description: "left-right arrow",
        category: "Symbols",
        aliases: [
            "left_right_arrow"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "↩️",
        description: "right arrow curving left",
        category: "Symbols",
        aliases: [
            "leftwards_arrow_with_hook"
        ],
        tags: [
            "return"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "↪️",
        description: "left arrow curving right",
        category: "Symbols",
        aliases: [
            "arrow_right_hook"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⤴️",
        description: "right arrow curving up",
        category: "Symbols",
        aliases: [
            "arrow_heading_up"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⤵️",
        description: "right arrow curving down",
        category: "Symbols",
        aliases: [
            "arrow_heading_down"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🔃",
        description: "clockwise vertical arrows",
        category: "Symbols",
        aliases: [
            "arrows_clockwise"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔄",
        description: "counterclockwise arrows button",
        category: "Symbols",
        aliases: [
            "arrows_counterclockwise"
        ],
        tags: [
            "sync"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔙",
        description: "BACK arrow",
        category: "Symbols",
        aliases: [
            "back"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔚",
        description: "END arrow",
        category: "Symbols",
        aliases: [
            "end"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔛",
        description: "ON! arrow",
        category: "Symbols",
        aliases: [
            "on"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔜",
        description: "SOON arrow",
        category: "Symbols",
        aliases: [
            "soon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔝",
        description: "TOP arrow",
        category: "Symbols",
        aliases: [
            "top"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🛐",
        description: "place of worship",
        category: "Symbols",
        aliases: [
            "place_of_worship"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⚛️",
        description: "atom symbol",
        category: "Symbols",
        aliases: [
            "atom_symbol"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🕉️",
        description: "om",
        category: "Symbols",
        aliases: [
            "om"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "✡️",
        description: "star of David",
        category: "Symbols",
        aliases: [
            "star_of_david"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☸️",
        description: "wheel of dharma",
        category: "Symbols",
        aliases: [
            "wheel_of_dharma"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☯️",
        description: "yin yang",
        category: "Symbols",
        aliases: [
            "yin_yang"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "✝️",
        description: "latin cross",
        category: "Symbols",
        aliases: [
            "latin_cross"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☦️",
        description: "orthodox cross",
        category: "Symbols",
        aliases: [
            "orthodox_cross"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☪️",
        description: "star and crescent",
        category: "Symbols",
        aliases: [
            "star_and_crescent"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "☮️",
        description: "peace symbol",
        category: "Symbols",
        aliases: [
            "peace_symbol"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "🕎",
        description: "menorah",
        category: "Symbols",
        aliases: [
            "menorah"
        ],
        tags: [],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🔯",
        description: "dotted six-pointed star",
        category: "Symbols",
        aliases: [
            "six_pointed_star"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "♈",
        description: "Aries",
        category: "Symbols",
        aliases: [
            "aries"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♉",
        description: "Taurus",
        category: "Symbols",
        aliases: [
            "taurus"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♊",
        description: "Gemini",
        category: "Symbols",
        aliases: [
            "gemini"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♋",
        description: "Cancer",
        category: "Symbols",
        aliases: [
            "cancer"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♌",
        description: "Leo",
        category: "Symbols",
        aliases: [
            "leo"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♍",
        description: "Virgo",
        category: "Symbols",
        aliases: [
            "virgo"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♎",
        description: "Libra",
        category: "Symbols",
        aliases: [
            "libra"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♏",
        description: "Scorpio",
        category: "Symbols",
        aliases: [
            "scorpius"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♐",
        description: "Sagittarius",
        category: "Symbols",
        aliases: [
            "sagittarius"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♑",
        description: "Capricorn",
        category: "Symbols",
        aliases: [
            "capricorn"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♒",
        description: "Aquarius",
        category: "Symbols",
        aliases: [
            "aquarius"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "♓",
        description: "Pisces",
        category: "Symbols",
        aliases: [
            "pisces"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⛎",
        description: "Ophiuchus",
        category: "Symbols",
        aliases: [
            "ophiuchus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔀",
        description: "shuffle tracks button",
        category: "Symbols",
        aliases: [
            "twisted_rightwards_arrows"
        ],
        tags: [
            "shuffle"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔁",
        description: "repeat button",
        category: "Symbols",
        aliases: [
            "repeat"
        ],
        tags: [
            "loop"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔂",
        description: "repeat single button",
        category: "Symbols",
        aliases: [
            "repeat_one"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "▶️",
        description: "play button",
        category: "Symbols",
        aliases: [
            "arrow_forward"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⏩",
        description: "fast-forward button",
        category: "Symbols",
        aliases: [
            "fast_forward"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⏭️",
        description: "next track button",
        category: "Symbols",
        aliases: [
            "next_track_button"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⏯️",
        description: "play or pause button",
        category: "Symbols",
        aliases: [
            "play_or_pause_button"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.1"
    },
    {
        emoji: "◀️",
        description: "reverse button",
        category: "Symbols",
        aliases: [
            "arrow_backward"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⏪",
        description: "fast reverse button",
        category: "Symbols",
        aliases: [
            "rewind"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⏮️",
        description: "last track button",
        category: "Symbols",
        aliases: [
            "previous_track_button"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🔼",
        description: "upwards button",
        category: "Symbols",
        aliases: [
            "arrow_up_small"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⏫",
        description: "fast up button",
        category: "Symbols",
        aliases: [
            "arrow_double_up"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔽",
        description: "downwards button",
        category: "Symbols",
        aliases: [
            "arrow_down_small"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⏬",
        description: "fast down button",
        category: "Symbols",
        aliases: [
            "arrow_double_down"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⏸️",
        description: "pause button",
        category: "Symbols",
        aliases: [
            "pause_button"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⏹️",
        description: "stop button",
        category: "Symbols",
        aliases: [
            "stop_button"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⏺️",
        description: "record button",
        category: "Symbols",
        aliases: [
            "record_button"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "⏏️",
        description: "eject button",
        category: "Symbols",
        aliases: [
            "eject_button"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🎦",
        description: "cinema",
        category: "Symbols",
        aliases: [
            "cinema"
        ],
        tags: [
            "film",
            "movie"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔅",
        description: "dim button",
        category: "Symbols",
        aliases: [
            "low_brightness"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔆",
        description: "bright button",
        category: "Symbols",
        aliases: [
            "high_brightness"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📶",
        description: "antenna bars",
        category: "Symbols",
        aliases: [
            "signal_strength"
        ],
        tags: [
            "wifi"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📳",
        description: "vibration mode",
        category: "Symbols",
        aliases: [
            "vibration_mode"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📴",
        description: "mobile phone off",
        category: "Symbols",
        aliases: [
            "mobile_phone_off"
        ],
        tags: [
            "mute",
            "off"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "♀️",
        description: "female sign",
        category: "Symbols",
        aliases: [
            "female_sign"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "♂️",
        description: "male sign",
        category: "Symbols",
        aliases: [
            "male_sign"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "⚧️",
        description: "transgender symbol",
        category: "Symbols",
        aliases: [
            "transgender_symbol"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "✖️",
        description: "multiply",
        category: "Symbols",
        aliases: [
            "heavy_multiplication_x"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "➕",
        description: "plus",
        category: "Symbols",
        aliases: [
            "heavy_plus_sign"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "➖",
        description: "minus",
        category: "Symbols",
        aliases: [
            "heavy_minus_sign"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "➗",
        description: "divide",
        category: "Symbols",
        aliases: [
            "heavy_division_sign"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "♾️",
        description: "infinity",
        category: "Symbols",
        aliases: [
            "infinity"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "‼️",
        description: "double exclamation mark",
        category: "Symbols",
        aliases: [
            "bangbang"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "⁉️",
        description: "exclamation question mark",
        category: "Symbols",
        aliases: [
            "interrobang"
        ],
        tags: [],
        unicodeVersion: "3.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❓",
        description: "question mark",
        category: "Symbols",
        aliases: [
            "question"
        ],
        tags: [
            "confused"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❔",
        description: "white question mark",
        category: "Symbols",
        aliases: [
            "grey_question"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❕",
        description: "white exclamation mark",
        category: "Symbols",
        aliases: [
            "grey_exclamation"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❗",
        description: "exclamation mark",
        category: "Symbols",
        aliases: [
            "exclamation",
            "heavy_exclamation_mark"
        ],
        tags: [
            "bang"
        ],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "〰️",
        description: "wavy dash",
        category: "Symbols",
        aliases: [
            "wavy_dash"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "💱",
        description: "currency exchange",
        category: "Symbols",
        aliases: [
            "currency_exchange"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💲",
        description: "heavy dollar sign",
        category: "Symbols",
        aliases: [
            "heavy_dollar_sign"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⚕️",
        description: "medical symbol",
        category: "Symbols",
        aliases: [
            "medical_symbol"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "♻️",
        description: "recycling symbol",
        category: "Symbols",
        aliases: [
            "recycle"
        ],
        tags: [
            "environment",
            "green"
        ],
        unicodeVersion: "3.2",
        iosVersion: "6.0"
    },
    {
        emoji: "⚜️",
        description: "fleur-de-lis",
        category: "Symbols",
        aliases: [
            "fleur_de_lis"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "9.1"
    },
    {
        emoji: "🔱",
        description: "trident emblem",
        category: "Symbols",
        aliases: [
            "trident"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "📛",
        description: "name badge",
        category: "Symbols",
        aliases: [
            "name_badge"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔰",
        description: "Japanese symbol for beginner",
        category: "Symbols",
        aliases: [
            "beginner"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "⭕",
        description: "hollow red circle",
        category: "Symbols",
        aliases: [
            "o"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "✅",
        description: "check mark button",
        category: "Symbols",
        aliases: [
            "white_check_mark"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "☑️",
        description: "check box with check",
        category: "Symbols",
        aliases: [
            "ballot_box_with_check"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "✔️",
        description: "check mark",
        category: "Symbols",
        aliases: [
            "heavy_check_mark"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "❌",
        description: "cross mark",
        category: "Symbols",
        aliases: [
            "x"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "❎",
        description: "cross mark button",
        category: "Symbols",
        aliases: [
            "negative_squared_cross_mark"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "➰",
        description: "curly loop",
        category: "Symbols",
        aliases: [
            "curly_loop"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "➿",
        description: "double curly loop",
        category: "Symbols",
        aliases: [
            "loop"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "〽️",
        description: "part alternation mark",
        category: "Symbols",
        aliases: [
            "part_alternation_mark"
        ],
        tags: [],
        unicodeVersion: "3.2",
        iosVersion: "6.0"
    },
    {
        emoji: "✳️",
        description: "eight-spoked asterisk",
        category: "Symbols",
        aliases: [
            "eight_spoked_asterisk"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "✴️",
        description: "eight-pointed star",
        category: "Symbols",
        aliases: [
            "eight_pointed_black_star"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "❇️",
        description: "sparkle",
        category: "Symbols",
        aliases: [
            "sparkle"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "©️",
        description: "copyright",
        category: "Symbols",
        aliases: [
            "copyright"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "®️",
        description: "registered",
        category: "Symbols",
        aliases: [
            "registered"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "™️",
        description: "trade mark",
        category: "Symbols",
        aliases: [
            "tm"
        ],
        tags: [
            "trademark"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "#️⃣",
        description: "keycap: #",
        category: "Symbols",
        aliases: [
            "hash"
        ],
        tags: [
            "number"
        ],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "*️⃣",
        description: "keycap: *",
        category: "Symbols",
        aliases: [
            "asterisk"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "9.1"
    },
    {
        emoji: "0️⃣",
        description: "keycap: 0",
        category: "Symbols",
        aliases: [
            "zero"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "1️⃣",
        description: "keycap: 1",
        category: "Symbols",
        aliases: [
            "one"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "2️⃣",
        description: "keycap: 2",
        category: "Symbols",
        aliases: [
            "two"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "3️⃣",
        description: "keycap: 3",
        category: "Symbols",
        aliases: [
            "three"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "4️⃣",
        description: "keycap: 4",
        category: "Symbols",
        aliases: [
            "four"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "5️⃣",
        description: "keycap: 5",
        category: "Symbols",
        aliases: [
            "five"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "6️⃣",
        description: "keycap: 6",
        category: "Symbols",
        aliases: [
            "six"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "7️⃣",
        description: "keycap: 7",
        category: "Symbols",
        aliases: [
            "seven"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "8️⃣",
        description: "keycap: 8",
        category: "Symbols",
        aliases: [
            "eight"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "9️⃣",
        description: "keycap: 9",
        category: "Symbols",
        aliases: [
            "nine"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🔟",
        description: "keycap: 10",
        category: "Symbols",
        aliases: [
            "keycap_ten"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔠",
        description: "input latin uppercase",
        category: "Symbols",
        aliases: [
            "capital_abcd"
        ],
        tags: [
            "letters"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔡",
        description: "input latin lowercase",
        category: "Symbols",
        aliases: [
            "abcd"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔢",
        description: "input numbers",
        category: "Symbols",
        aliases: [
            "1234"
        ],
        tags: [
            "numbers"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔣",
        description: "input symbols",
        category: "Symbols",
        aliases: [
            "symbols"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔤",
        description: "input latin letters",
        category: "Symbols",
        aliases: [
            "abc"
        ],
        tags: [
            "alphabet"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🅰️",
        description: "A button (blood type)",
        category: "Symbols",
        aliases: [
            "a"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆎",
        description: "AB button (blood type)",
        category: "Symbols",
        aliases: [
            "ab"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🅱️",
        description: "B button (blood type)",
        category: "Symbols",
        aliases: [
            "b"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆑",
        description: "CL button",
        category: "Symbols",
        aliases: [
            "cl"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆒",
        description: "COOL button",
        category: "Symbols",
        aliases: [
            "cool"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆓",
        description: "FREE button",
        category: "Symbols",
        aliases: [
            "free"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "ℹ️",
        description: "information",
        category: "Symbols",
        aliases: [
            "information_source"
        ],
        tags: [],
        unicodeVersion: "3.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆔",
        description: "ID button",
        category: "Symbols",
        aliases: [
            "id"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "Ⓜ️",
        description: "circled M",
        category: "Symbols",
        aliases: [
            "m"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🆕",
        description: "NEW button",
        category: "Symbols",
        aliases: [
            "new"
        ],
        tags: [
            "fresh"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆖",
        description: "NG button",
        category: "Symbols",
        aliases: [
            "ng"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🅾️",
        description: "O button (blood type)",
        category: "Symbols",
        aliases: [
            "o2"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆗",
        description: "OK button",
        category: "Symbols",
        aliases: [
            "ok"
        ],
        tags: [
            "yes"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🅿️",
        description: "P button",
        category: "Symbols",
        aliases: [
            "parking"
        ],
        tags: [],
        unicodeVersion: "5.2",
        iosVersion: "6.0"
    },
    {
        emoji: "🆘",
        description: "SOS button",
        category: "Symbols",
        aliases: [
            "sos"
        ],
        tags: [
            "help",
            "emergency"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆙",
        description: "UP! button",
        category: "Symbols",
        aliases: [
            "up"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🆚",
        description: "VS button",
        category: "Symbols",
        aliases: [
            "vs"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈁",
        description: "Japanese “here” button",
        category: "Symbols",
        aliases: [
            "koko"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈂️",
        description: "Japanese “service charge” button",
        category: "Symbols",
        aliases: [
            "sa"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈷️",
        description: "Japanese “monthly amount” button",
        category: "Symbols",
        aliases: [
            "u6708"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈶",
        description: "Japanese “not free of charge” button",
        category: "Symbols",
        aliases: [
            "u6709"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈯",
        description: "Japanese “reserved” button",
        category: "Symbols",
        aliases: [
            "u6307"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🉐",
        description: "Japanese “bargain” button",
        category: "Symbols",
        aliases: [
            "ideograph_advantage"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈹",
        description: "Japanese “discount” button",
        category: "Symbols",
        aliases: [
            "u5272"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈚",
        description: "Japanese “free of charge” button",
        category: "Symbols",
        aliases: [
            "u7121"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🈲",
        description: "Japanese “prohibited” button",
        category: "Symbols",
        aliases: [
            "u7981"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🉑",
        description: "Japanese “acceptable” button",
        category: "Symbols",
        aliases: [
            "accept"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈸",
        description: "Japanese “application” button",
        category: "Symbols",
        aliases: [
            "u7533"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈴",
        description: "Japanese “passing grade” button",
        category: "Symbols",
        aliases: [
            "u5408"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈳",
        description: "Japanese “vacancy” button",
        category: "Symbols",
        aliases: [
            "u7a7a"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "㊗️",
        description: "Japanese “congratulations” button",
        category: "Symbols",
        aliases: [
            "congratulations"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "㊙️",
        description: "Japanese “secret” button",
        category: "Symbols",
        aliases: [
            "secret"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🈺",
        description: "Japanese “open for business” button",
        category: "Symbols",
        aliases: [
            "u55b6"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🈵",
        description: "Japanese “no vacancy” button",
        category: "Symbols",
        aliases: [
            "u6e80"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔴",
        description: "red circle",
        category: "Symbols",
        aliases: [
            "red_circle"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🟠",
        description: "orange circle",
        category: "Symbols",
        aliases: [
            "orange_circle"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟡",
        description: "yellow circle",
        category: "Symbols",
        aliases: [
            "yellow_circle"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟢",
        description: "green circle",
        category: "Symbols",
        aliases: [
            "green_circle"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🔵",
        description: "blue circle",
        category: "Symbols",
        aliases: [
            "large_blue_circle"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🟣",
        description: "purple circle",
        category: "Symbols",
        aliases: [
            "purple_circle"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟤",
        description: "brown circle",
        category: "Symbols",
        aliases: [
            "brown_circle"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "⚫",
        description: "black circle",
        category: "Symbols",
        aliases: [
            "black_circle"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "6.0"
    },
    {
        emoji: "⚪",
        description: "white circle",
        category: "Symbols",
        aliases: [
            "white_circle"
        ],
        tags: [],
        unicodeVersion: "4.1",
        iosVersion: "6.0"
    },
    {
        emoji: "🟥",
        description: "red square",
        category: "Symbols",
        aliases: [
            "red_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟧",
        description: "orange square",
        category: "Symbols",
        aliases: [
            "orange_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟨",
        description: "yellow square",
        category: "Symbols",
        aliases: [
            "yellow_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟩",
        description: "green square",
        category: "Symbols",
        aliases: [
            "green_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟦",
        description: "blue square",
        category: "Symbols",
        aliases: [
            "blue_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟪",
        description: "purple square",
        category: "Symbols",
        aliases: [
            "purple_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "🟫",
        description: "brown square",
        category: "Symbols",
        aliases: [
            "brown_square"
        ],
        tags: [],
        unicodeVersion: "12.0",
        iosVersion: "13.0"
    },
    {
        emoji: "⬛",
        description: "black large square",
        category: "Symbols",
        aliases: [
            "black_large_square"
        ],
        tags: [],
        unicodeVersion: "5.1",
        iosVersion: "6.0"
    },
    {
        emoji: "⬜",
        description: "white large square",
        category: "Symbols",
        aliases: [
            "white_large_square"
        ],
        tags: [],
        unicodeVersion: "5.1",
        iosVersion: "6.0"
    },
    {
        emoji: "◼️",
        description: "black medium square",
        category: "Symbols",
        aliases: [
            "black_medium_square"
        ],
        tags: [],
        unicodeVersion: "3.2",
        iosVersion: "6.0"
    },
    {
        emoji: "◻️",
        description: "white medium square",
        category: "Symbols",
        aliases: [
            "white_medium_square"
        ],
        tags: [],
        unicodeVersion: "3.2",
        iosVersion: "6.0"
    },
    {
        emoji: "◾",
        description: "black medium-small square",
        category: "Symbols",
        aliases: [
            "black_medium_small_square"
        ],
        tags: [],
        unicodeVersion: "3.2",
        iosVersion: "6.0"
    },
    {
        emoji: "◽",
        description: "white medium-small square",
        category: "Symbols",
        aliases: [
            "white_medium_small_square"
        ],
        tags: [],
        unicodeVersion: "3.2",
        iosVersion: "6.0"
    },
    {
        emoji: "▪️",
        description: "black small square",
        category: "Symbols",
        aliases: [
            "black_small_square"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "▫️",
        description: "white small square",
        category: "Symbols",
        aliases: [
            "white_small_square"
        ],
        tags: [],
        unicodeVersion: "",
        iosVersion: "6.0"
    },
    {
        emoji: "🔶",
        description: "large orange diamond",
        category: "Symbols",
        aliases: [
            "large_orange_diamond"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔷",
        description: "large blue diamond",
        category: "Symbols",
        aliases: [
            "large_blue_diamond"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔸",
        description: "small orange diamond",
        category: "Symbols",
        aliases: [
            "small_orange_diamond"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔹",
        description: "small blue diamond",
        category: "Symbols",
        aliases: [
            "small_blue_diamond"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔺",
        description: "red triangle pointed up",
        category: "Symbols",
        aliases: [
            "small_red_triangle"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔻",
        description: "red triangle pointed down",
        category: "Symbols",
        aliases: [
            "small_red_triangle_down"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "💠",
        description: "diamond with a dot",
        category: "Symbols",
        aliases: [
            "diamond_shape_with_a_dot_inside"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔘",
        description: "radio button",
        category: "Symbols",
        aliases: [
            "radio_button"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔳",
        description: "white square button",
        category: "Symbols",
        aliases: [
            "white_square_button"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🔲",
        description: "black square button",
        category: "Symbols",
        aliases: [
            "black_square_button"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏁",
        description: "chequered flag",
        category: "Flags",
        aliases: [
            "checkered_flag"
        ],
        tags: [
            "milestone",
            "finish"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🚩",
        description: "triangular flag",
        category: "Flags",
        aliases: [
            "triangular_flag_on_post"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🎌",
        description: "crossed flags",
        category: "Flags",
        aliases: [
            "crossed_flags"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🏴",
        description: "black flag",
        category: "Flags",
        aliases: [
            "black_flag"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏳️",
        description: "white flag",
        category: "Flags",
        aliases: [
            "white_flag"
        ],
        tags: [],
        unicodeVersion: "7.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🏳️‍🌈",
        description: "rainbow flag",
        category: "Flags",
        aliases: [
            "rainbow_flag"
        ],
        tags: [
            "pride"
        ],
        unicodeVersion: "6.0",
        iosVersion: "10.0"
    },
    {
        emoji: "🏳️‍⚧️",
        description: "transgender flag",
        category: "Flags",
        aliases: [
            "transgender_flag"
        ],
        tags: [],
        unicodeVersion: "13.0",
        iosVersion: "14.0"
    },
    {
        emoji: "🏴‍☠️",
        description: "pirate flag",
        category: "Flags",
        aliases: [
            "pirate_flag"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇦🇨",
        description: "flag: Ascension Island",
        category: "Flags",
        aliases: [
            "ascension_island"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇦🇩",
        description: "flag: Andorra",
        category: "Flags",
        aliases: [
            "andorra"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇪",
        description: "flag: United Arab Emirates",
        category: "Flags",
        aliases: [
            "united_arab_emirates"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇫",
        description: "flag: Afghanistan",
        category: "Flags",
        aliases: [
            "afghanistan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇬",
        description: "flag: Antigua & Barbuda",
        category: "Flags",
        aliases: [
            "antigua_barbuda"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇮",
        description: "flag: Anguilla",
        category: "Flags",
        aliases: [
            "anguilla"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇱",
        description: "flag: Albania",
        category: "Flags",
        aliases: [
            "albania"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇲",
        description: "flag: Armenia",
        category: "Flags",
        aliases: [
            "armenia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇴",
        description: "flag: Angola",
        category: "Flags",
        aliases: [
            "angola"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇶",
        description: "flag: Antarctica",
        category: "Flags",
        aliases: [
            "antarctica"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇦🇷",
        description: "flag: Argentina",
        category: "Flags",
        aliases: [
            "argentina"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇸",
        description: "flag: American Samoa",
        category: "Flags",
        aliases: [
            "american_samoa"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇹",
        description: "flag: Austria",
        category: "Flags",
        aliases: [
            "austria"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇺",
        description: "flag: Australia",
        category: "Flags",
        aliases: [
            "australia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇼",
        description: "flag: Aruba",
        category: "Flags",
        aliases: [
            "aruba"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇦🇽",
        description: "flag: Åland Islands",
        category: "Flags",
        aliases: [
            "aland_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇦🇿",
        description: "flag: Azerbaijan",
        category: "Flags",
        aliases: [
            "azerbaijan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇦",
        description: "flag: Bosnia & Herzegovina",
        category: "Flags",
        aliases: [
            "bosnia_herzegovina"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇧",
        description: "flag: Barbados",
        category: "Flags",
        aliases: [
            "barbados"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇩",
        description: "flag: Bangladesh",
        category: "Flags",
        aliases: [
            "bangladesh"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇪",
        description: "flag: Belgium",
        category: "Flags",
        aliases: [
            "belgium"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇫",
        description: "flag: Burkina Faso",
        category: "Flags",
        aliases: [
            "burkina_faso"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇬",
        description: "flag: Bulgaria",
        category: "Flags",
        aliases: [
            "bulgaria"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇭",
        description: "flag: Bahrain",
        category: "Flags",
        aliases: [
            "bahrain"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇮",
        description: "flag: Burundi",
        category: "Flags",
        aliases: [
            "burundi"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇯",
        description: "flag: Benin",
        category: "Flags",
        aliases: [
            "benin"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇱",
        description: "flag: St. Barthélemy",
        category: "Flags",
        aliases: [
            "st_barthelemy"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇧🇲",
        description: "flag: Bermuda",
        category: "Flags",
        aliases: [
            "bermuda"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇳",
        description: "flag: Brunei",
        category: "Flags",
        aliases: [
            "brunei"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇴",
        description: "flag: Bolivia",
        category: "Flags",
        aliases: [
            "bolivia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇶",
        description: "flag: Caribbean Netherlands",
        category: "Flags",
        aliases: [
            "caribbean_netherlands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇧🇷",
        description: "flag: Brazil",
        category: "Flags",
        aliases: [
            "brazil"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇸",
        description: "flag: Bahamas",
        category: "Flags",
        aliases: [
            "bahamas"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇹",
        description: "flag: Bhutan",
        category: "Flags",
        aliases: [
            "bhutan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇻",
        description: "flag: Bouvet Island",
        category: "Flags",
        aliases: [
            "bouvet_island"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇧🇼",
        description: "flag: Botswana",
        category: "Flags",
        aliases: [
            "botswana"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇾",
        description: "flag: Belarus",
        category: "Flags",
        aliases: [
            "belarus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇧🇿",
        description: "flag: Belize",
        category: "Flags",
        aliases: [
            "belize"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇦",
        description: "flag: Canada",
        category: "Flags",
        aliases: [
            "canada"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇨",
        description: "flag: Cocos (Keeling) Islands",
        category: "Flags",
        aliases: [
            "cocos_islands"
        ],
        tags: [
            "keeling"
        ],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇨🇩",
        description: "flag: Congo - Kinshasa",
        category: "Flags",
        aliases: [
            "congo_kinshasa"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇫",
        description: "flag: Central African Republic",
        category: "Flags",
        aliases: [
            "central_african_republic"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇬",
        description: "flag: Congo - Brazzaville",
        category: "Flags",
        aliases: [
            "congo_brazzaville"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇭",
        description: "flag: Switzerland",
        category: "Flags",
        aliases: [
            "switzerland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇮",
        description: "flag: Côte d’Ivoire",
        category: "Flags",
        aliases: [
            "cote_divoire"
        ],
        tags: [
            "ivory"
        ],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇰",
        description: "flag: Cook Islands",
        category: "Flags",
        aliases: [
            "cook_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇱",
        description: "flag: Chile",
        category: "Flags",
        aliases: [
            "chile"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇲",
        description: "flag: Cameroon",
        category: "Flags",
        aliases: [
            "cameroon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇳",
        description: "flag: China",
        category: "Flags",
        aliases: [
            "cn"
        ],
        tags: [
            "china"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇨🇴",
        description: "flag: Colombia",
        category: "Flags",
        aliases: [
            "colombia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇵",
        description: "flag: Clipperton Island",
        category: "Flags",
        aliases: [
            "clipperton_island"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇨🇷",
        description: "flag: Costa Rica",
        category: "Flags",
        aliases: [
            "costa_rica"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇺",
        description: "flag: Cuba",
        category: "Flags",
        aliases: [
            "cuba"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇻",
        description: "flag: Cape Verde",
        category: "Flags",
        aliases: [
            "cape_verde"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇼",
        description: "flag: Curaçao",
        category: "Flags",
        aliases: [
            "curacao"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇽",
        description: "flag: Christmas Island",
        category: "Flags",
        aliases: [
            "christmas_island"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇨🇾",
        description: "flag: Cyprus",
        category: "Flags",
        aliases: [
            "cyprus"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇨🇿",
        description: "flag: Czechia",
        category: "Flags",
        aliases: [
            "czech_republic"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇩🇪",
        description: "flag: Germany",
        category: "Flags",
        aliases: [
            "de"
        ],
        tags: [
            "flag",
            "germany"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇩🇬",
        description: "flag: Diego Garcia",
        category: "Flags",
        aliases: [
            "diego_garcia"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇩🇯",
        description: "flag: Djibouti",
        category: "Flags",
        aliases: [
            "djibouti"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇩🇰",
        description: "flag: Denmark",
        category: "Flags",
        aliases: [
            "denmark"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇩🇲",
        description: "flag: Dominica",
        category: "Flags",
        aliases: [
            "dominica"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇩🇴",
        description: "flag: Dominican Republic",
        category: "Flags",
        aliases: [
            "dominican_republic"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇩🇿",
        description: "flag: Algeria",
        category: "Flags",
        aliases: [
            "algeria"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇪🇦",
        description: "flag: Ceuta & Melilla",
        category: "Flags",
        aliases: [
            "ceuta_melilla"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇪🇨",
        description: "flag: Ecuador",
        category: "Flags",
        aliases: [
            "ecuador"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇪🇪",
        description: "flag: Estonia",
        category: "Flags",
        aliases: [
            "estonia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇪🇬",
        description: "flag: Egypt",
        category: "Flags",
        aliases: [
            "egypt"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇪🇭",
        description: "flag: Western Sahara",
        category: "Flags",
        aliases: [
            "western_sahara"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇪🇷",
        description: "flag: Eritrea",
        category: "Flags",
        aliases: [
            "eritrea"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇪🇸",
        description: "flag: Spain",
        category: "Flags",
        aliases: [
            "es"
        ],
        tags: [
            "spain"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇪🇹",
        description: "flag: Ethiopia",
        category: "Flags",
        aliases: [
            "ethiopia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇪🇺",
        description: "flag: European Union",
        category: "Flags",
        aliases: [
            "eu",
            "european_union"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇫🇮",
        description: "flag: Finland",
        category: "Flags",
        aliases: [
            "finland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇫🇯",
        description: "flag: Fiji",
        category: "Flags",
        aliases: [
            "fiji"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇫🇰",
        description: "flag: Falkland Islands",
        category: "Flags",
        aliases: [
            "falkland_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇫🇲",
        description: "flag: Micronesia",
        category: "Flags",
        aliases: [
            "micronesia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇫🇴",
        description: "flag: Faroe Islands",
        category: "Flags",
        aliases: [
            "faroe_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇫🇷",
        description: "flag: France",
        category: "Flags",
        aliases: [
            "fr"
        ],
        tags: [
            "france",
            "french"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇬🇦",
        description: "flag: Gabon",
        category: "Flags",
        aliases: [
            "gabon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇧",
        description: "flag: United Kingdom",
        category: "Flags",
        aliases: [
            "gb",
            "uk"
        ],
        tags: [
            "flag",
            "british"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇬🇩",
        description: "flag: Grenada",
        category: "Flags",
        aliases: [
            "grenada"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇪",
        description: "flag: Georgia",
        category: "Flags",
        aliases: [
            "georgia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇫",
        description: "flag: French Guiana",
        category: "Flags",
        aliases: [
            "french_guiana"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇬",
        description: "flag: Guernsey",
        category: "Flags",
        aliases: [
            "guernsey"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇬🇭",
        description: "flag: Ghana",
        category: "Flags",
        aliases: [
            "ghana"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇮",
        description: "flag: Gibraltar",
        category: "Flags",
        aliases: [
            "gibraltar"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇱",
        description: "flag: Greenland",
        category: "Flags",
        aliases: [
            "greenland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇬🇲",
        description: "flag: Gambia",
        category: "Flags",
        aliases: [
            "gambia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇳",
        description: "flag: Guinea",
        category: "Flags",
        aliases: [
            "guinea"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇵",
        description: "flag: Guadeloupe",
        category: "Flags",
        aliases: [
            "guadeloupe"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇬🇶",
        description: "flag: Equatorial Guinea",
        category: "Flags",
        aliases: [
            "equatorial_guinea"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇷",
        description: "flag: Greece",
        category: "Flags",
        aliases: [
            "greece"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇸",
        description: "flag: South Georgia & South Sandwich Islands",
        category: "Flags",
        aliases: [
            "south_georgia_south_sandwich_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇬🇹",
        description: "flag: Guatemala",
        category: "Flags",
        aliases: [
            "guatemala"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇺",
        description: "flag: Guam",
        category: "Flags",
        aliases: [
            "guam"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇼",
        description: "flag: Guinea-Bissau",
        category: "Flags",
        aliases: [
            "guinea_bissau"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇬🇾",
        description: "flag: Guyana",
        category: "Flags",
        aliases: [
            "guyana"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇭🇰",
        description: "flag: Hong Kong SAR China",
        category: "Flags",
        aliases: [
            "hong_kong"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇭🇲",
        description: "flag: Heard & McDonald Islands",
        category: "Flags",
        aliases: [
            "heard_mcdonald_islands"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇭🇳",
        description: "flag: Honduras",
        category: "Flags",
        aliases: [
            "honduras"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇭🇷",
        description: "flag: Croatia",
        category: "Flags",
        aliases: [
            "croatia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇭🇹",
        description: "flag: Haiti",
        category: "Flags",
        aliases: [
            "haiti"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇭🇺",
        description: "flag: Hungary",
        category: "Flags",
        aliases: [
            "hungary"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇨",
        description: "flag: Canary Islands",
        category: "Flags",
        aliases: [
            "canary_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇮🇩",
        description: "flag: Indonesia",
        category: "Flags",
        aliases: [
            "indonesia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇪",
        description: "flag: Ireland",
        category: "Flags",
        aliases: [
            "ireland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇱",
        description: "flag: Israel",
        category: "Flags",
        aliases: [
            "israel"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇲",
        description: "flag: Isle of Man",
        category: "Flags",
        aliases: [
            "isle_of_man"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇮🇳",
        description: "flag: India",
        category: "Flags",
        aliases: [
            "india"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇴",
        description: "flag: British Indian Ocean Territory",
        category: "Flags",
        aliases: [
            "british_indian_ocean_territory"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇮🇶",
        description: "flag: Iraq",
        category: "Flags",
        aliases: [
            "iraq"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇷",
        description: "flag: Iran",
        category: "Flags",
        aliases: [
            "iran"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇸",
        description: "flag: Iceland",
        category: "Flags",
        aliases: [
            "iceland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇮🇹",
        description: "flag: Italy",
        category: "Flags",
        aliases: [
            "it"
        ],
        tags: [
            "italy"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇯🇪",
        description: "flag: Jersey",
        category: "Flags",
        aliases: [
            "jersey"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇯🇲",
        description: "flag: Jamaica",
        category: "Flags",
        aliases: [
            "jamaica"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇯🇴",
        description: "flag: Jordan",
        category: "Flags",
        aliases: [
            "jordan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇯🇵",
        description: "flag: Japan",
        category: "Flags",
        aliases: [
            "jp"
        ],
        tags: [
            "japan"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇰🇪",
        description: "flag: Kenya",
        category: "Flags",
        aliases: [
            "kenya"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇬",
        description: "flag: Kyrgyzstan",
        category: "Flags",
        aliases: [
            "kyrgyzstan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇭",
        description: "flag: Cambodia",
        category: "Flags",
        aliases: [
            "cambodia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇮",
        description: "flag: Kiribati",
        category: "Flags",
        aliases: [
            "kiribati"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇲",
        description: "flag: Comoros",
        category: "Flags",
        aliases: [
            "comoros"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇳",
        description: "flag: St. Kitts & Nevis",
        category: "Flags",
        aliases: [
            "st_kitts_nevis"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇵",
        description: "flag: North Korea",
        category: "Flags",
        aliases: [
            "north_korea"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇷",
        description: "flag: South Korea",
        category: "Flags",
        aliases: [
            "kr"
        ],
        tags: [
            "korea"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇰🇼",
        description: "flag: Kuwait",
        category: "Flags",
        aliases: [
            "kuwait"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇾",
        description: "flag: Cayman Islands",
        category: "Flags",
        aliases: [
            "cayman_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇰🇿",
        description: "flag: Kazakhstan",
        category: "Flags",
        aliases: [
            "kazakhstan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇦",
        description: "flag: Laos",
        category: "Flags",
        aliases: [
            "laos"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇧",
        description: "flag: Lebanon",
        category: "Flags",
        aliases: [
            "lebanon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇨",
        description: "flag: St. Lucia",
        category: "Flags",
        aliases: [
            "st_lucia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇮",
        description: "flag: Liechtenstein",
        category: "Flags",
        aliases: [
            "liechtenstein"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇰",
        description: "flag: Sri Lanka",
        category: "Flags",
        aliases: [
            "sri_lanka"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇷",
        description: "flag: Liberia",
        category: "Flags",
        aliases: [
            "liberia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇸",
        description: "flag: Lesotho",
        category: "Flags",
        aliases: [
            "lesotho"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇹",
        description: "flag: Lithuania",
        category: "Flags",
        aliases: [
            "lithuania"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇺",
        description: "flag: Luxembourg",
        category: "Flags",
        aliases: [
            "luxembourg"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇻",
        description: "flag: Latvia",
        category: "Flags",
        aliases: [
            "latvia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇱🇾",
        description: "flag: Libya",
        category: "Flags",
        aliases: [
            "libya"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇦",
        description: "flag: Morocco",
        category: "Flags",
        aliases: [
            "morocco"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇨",
        description: "flag: Monaco",
        category: "Flags",
        aliases: [
            "monaco"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇲🇩",
        description: "flag: Moldova",
        category: "Flags",
        aliases: [
            "moldova"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇪",
        description: "flag: Montenegro",
        category: "Flags",
        aliases: [
            "montenegro"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇫",
        description: "flag: St. Martin",
        category: "Flags",
        aliases: [
            "st_martin"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇲🇬",
        description: "flag: Madagascar",
        category: "Flags",
        aliases: [
            "madagascar"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇭",
        description: "flag: Marshall Islands",
        category: "Flags",
        aliases: [
            "marshall_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇲🇰",
        description: "flag: North Macedonia",
        category: "Flags",
        aliases: [
            "macedonia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇱",
        description: "flag: Mali",
        category: "Flags",
        aliases: [
            "mali"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇲",
        description: "flag: Myanmar (Burma)",
        category: "Flags",
        aliases: [
            "myanmar"
        ],
        tags: [
            "burma"
        ],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇳",
        description: "flag: Mongolia",
        category: "Flags",
        aliases: [
            "mongolia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇴",
        description: "flag: Macao SAR China",
        category: "Flags",
        aliases: [
            "macau"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇵",
        description: "flag: Northern Mariana Islands",
        category: "Flags",
        aliases: [
            "northern_mariana_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇶",
        description: "flag: Martinique",
        category: "Flags",
        aliases: [
            "martinique"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇲🇷",
        description: "flag: Mauritania",
        category: "Flags",
        aliases: [
            "mauritania"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇸",
        description: "flag: Montserrat",
        category: "Flags",
        aliases: [
            "montserrat"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇹",
        description: "flag: Malta",
        category: "Flags",
        aliases: [
            "malta"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇺",
        description: "flag: Mauritius",
        category: "Flags",
        aliases: [
            "mauritius"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇲🇻",
        description: "flag: Maldives",
        category: "Flags",
        aliases: [
            "maldives"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇼",
        description: "flag: Malawi",
        category: "Flags",
        aliases: [
            "malawi"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇽",
        description: "flag: Mexico",
        category: "Flags",
        aliases: [
            "mexico"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇾",
        description: "flag: Malaysia",
        category: "Flags",
        aliases: [
            "malaysia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇲🇿",
        description: "flag: Mozambique",
        category: "Flags",
        aliases: [
            "mozambique"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇦",
        description: "flag: Namibia",
        category: "Flags",
        aliases: [
            "namibia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇨",
        description: "flag: New Caledonia",
        category: "Flags",
        aliases: [
            "new_caledonia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇪",
        description: "flag: Niger",
        category: "Flags",
        aliases: [
            "niger"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇫",
        description: "flag: Norfolk Island",
        category: "Flags",
        aliases: [
            "norfolk_island"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇳🇬",
        description: "flag: Nigeria",
        category: "Flags",
        aliases: [
            "nigeria"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇮",
        description: "flag: Nicaragua",
        category: "Flags",
        aliases: [
            "nicaragua"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇱",
        description: "flag: Netherlands",
        category: "Flags",
        aliases: [
            "netherlands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇴",
        description: "flag: Norway",
        category: "Flags",
        aliases: [
            "norway"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇵",
        description: "flag: Nepal",
        category: "Flags",
        aliases: [
            "nepal"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇷",
        description: "flag: Nauru",
        category: "Flags",
        aliases: [
            "nauru"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇳🇺",
        description: "flag: Niue",
        category: "Flags",
        aliases: [
            "niue"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇳🇿",
        description: "flag: New Zealand",
        category: "Flags",
        aliases: [
            "new_zealand"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇴🇲",
        description: "flag: Oman",
        category: "Flags",
        aliases: [
            "oman"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇦",
        description: "flag: Panama",
        category: "Flags",
        aliases: [
            "panama"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇪",
        description: "flag: Peru",
        category: "Flags",
        aliases: [
            "peru"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇫",
        description: "flag: French Polynesia",
        category: "Flags",
        aliases: [
            "french_polynesia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇵🇬",
        description: "flag: Papua New Guinea",
        category: "Flags",
        aliases: [
            "papua_new_guinea"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇭",
        description: "flag: Philippines",
        category: "Flags",
        aliases: [
            "philippines"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇰",
        description: "flag: Pakistan",
        category: "Flags",
        aliases: [
            "pakistan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇱",
        description: "flag: Poland",
        category: "Flags",
        aliases: [
            "poland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇲",
        description: "flag: St. Pierre & Miquelon",
        category: "Flags",
        aliases: [
            "st_pierre_miquelon"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇵🇳",
        description: "flag: Pitcairn Islands",
        category: "Flags",
        aliases: [
            "pitcairn_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇵🇷",
        description: "flag: Puerto Rico",
        category: "Flags",
        aliases: [
            "puerto_rico"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇸",
        description: "flag: Palestinian Territories",
        category: "Flags",
        aliases: [
            "palestinian_territories"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇹",
        description: "flag: Portugal",
        category: "Flags",
        aliases: [
            "portugal"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇼",
        description: "flag: Palau",
        category: "Flags",
        aliases: [
            "palau"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇵🇾",
        description: "flag: Paraguay",
        category: "Flags",
        aliases: [
            "paraguay"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇶🇦",
        description: "flag: Qatar",
        category: "Flags",
        aliases: [
            "qatar"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇷🇪",
        description: "flag: Réunion",
        category: "Flags",
        aliases: [
            "reunion"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇷🇴",
        description: "flag: Romania",
        category: "Flags",
        aliases: [
            "romania"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇷🇸",
        description: "flag: Serbia",
        category: "Flags",
        aliases: [
            "serbia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇷🇺",
        description: "flag: Russia",
        category: "Flags",
        aliases: [
            "ru"
        ],
        tags: [
            "russia"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇷🇼",
        description: "flag: Rwanda",
        category: "Flags",
        aliases: [
            "rwanda"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇦",
        description: "flag: Saudi Arabia",
        category: "Flags",
        aliases: [
            "saudi_arabia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇧",
        description: "flag: Solomon Islands",
        category: "Flags",
        aliases: [
            "solomon_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇨",
        description: "flag: Seychelles",
        category: "Flags",
        aliases: [
            "seychelles"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇩",
        description: "flag: Sudan",
        category: "Flags",
        aliases: [
            "sudan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇪",
        description: "flag: Sweden",
        category: "Flags",
        aliases: [
            "sweden"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇬",
        description: "flag: Singapore",
        category: "Flags",
        aliases: [
            "singapore"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇭",
        description: "flag: St. Helena",
        category: "Flags",
        aliases: [
            "st_helena"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇸🇮",
        description: "flag: Slovenia",
        category: "Flags",
        aliases: [
            "slovenia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇯",
        description: "flag: Svalbard & Jan Mayen",
        category: "Flags",
        aliases: [
            "svalbard_jan_mayen"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇸🇰",
        description: "flag: Slovakia",
        category: "Flags",
        aliases: [
            "slovakia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇱",
        description: "flag: Sierra Leone",
        category: "Flags",
        aliases: [
            "sierra_leone"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇲",
        description: "flag: San Marino",
        category: "Flags",
        aliases: [
            "san_marino"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇳",
        description: "flag: Senegal",
        category: "Flags",
        aliases: [
            "senegal"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇴",
        description: "flag: Somalia",
        category: "Flags",
        aliases: [
            "somalia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇷",
        description: "flag: Suriname",
        category: "Flags",
        aliases: [
            "suriname"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇸",
        description: "flag: South Sudan",
        category: "Flags",
        aliases: [
            "south_sudan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇹",
        description: "flag: São Tomé & Príncipe",
        category: "Flags",
        aliases: [
            "sao_tome_principe"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇻",
        description: "flag: El Salvador",
        category: "Flags",
        aliases: [
            "el_salvador"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇽",
        description: "flag: Sint Maarten",
        category: "Flags",
        aliases: [
            "sint_maarten"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇾",
        description: "flag: Syria",
        category: "Flags",
        aliases: [
            "syria"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇸🇿",
        description: "flag: Eswatini",
        category: "Flags",
        aliases: [
            "swaziland"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇦",
        description: "flag: Tristan da Cunha",
        category: "Flags",
        aliases: [
            "tristan_da_cunha"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇹🇨",
        description: "flag: Turks & Caicos Islands",
        category: "Flags",
        aliases: [
            "turks_caicos_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇩",
        description: "flag: Chad",
        category: "Flags",
        aliases: [
            "chad"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇹🇫",
        description: "flag: French Southern Territories",
        category: "Flags",
        aliases: [
            "french_southern_territories"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇬",
        description: "flag: Togo",
        category: "Flags",
        aliases: [
            "togo"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇭",
        description: "flag: Thailand",
        category: "Flags",
        aliases: [
            "thailand"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇯",
        description: "flag: Tajikistan",
        category: "Flags",
        aliases: [
            "tajikistan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇰",
        description: "flag: Tokelau",
        category: "Flags",
        aliases: [
            "tokelau"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇹🇱",
        description: "flag: Timor-Leste",
        category: "Flags",
        aliases: [
            "timor_leste"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇲",
        description: "flag: Turkmenistan",
        category: "Flags",
        aliases: [
            "turkmenistan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇳",
        description: "flag: Tunisia",
        category: "Flags",
        aliases: [
            "tunisia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇴",
        description: "flag: Tonga",
        category: "Flags",
        aliases: [
            "tonga"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇷",
        description: "flag: Turkey",
        category: "Flags",
        aliases: [
            "tr"
        ],
        tags: [
            "turkey"
        ],
        unicodeVersion: "8.0",
        iosVersion: "9.1"
    },
    {
        emoji: "🇹🇹",
        description: "flag: Trinidad & Tobago",
        category: "Flags",
        aliases: [
            "trinidad_tobago"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇻",
        description: "flag: Tuvalu",
        category: "Flags",
        aliases: [
            "tuvalu"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇹🇼",
        description: "flag: Taiwan",
        category: "Flags",
        aliases: [
            "taiwan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇹🇿",
        description: "flag: Tanzania",
        category: "Flags",
        aliases: [
            "tanzania"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇺🇦",
        description: "flag: Ukraine",
        category: "Flags",
        aliases: [
            "ukraine"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇺🇬",
        description: "flag: Uganda",
        category: "Flags",
        aliases: [
            "uganda"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇺🇲",
        description: "flag: U.S. Outlying Islands",
        category: "Flags",
        aliases: [
            "us_outlying_islands"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇺🇳",
        description: "flag: United Nations",
        category: "Flags",
        aliases: [
            "united_nations"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🇺🇸",
        description: "flag: United States",
        category: "Flags",
        aliases: [
            "us"
        ],
        tags: [
            "flag",
            "united",
            "america"
        ],
        unicodeVersion: "6.0",
        iosVersion: "6.0"
    },
    {
        emoji: "🇺🇾",
        description: "flag: Uruguay",
        category: "Flags",
        aliases: [
            "uruguay"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇺🇿",
        description: "flag: Uzbekistan",
        category: "Flags",
        aliases: [
            "uzbekistan"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇻🇦",
        description: "flag: Vatican City",
        category: "Flags",
        aliases: [
            "vatican_city"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇻🇨",
        description: "flag: St. Vincent & Grenadines",
        category: "Flags",
        aliases: [
            "st_vincent_grenadines"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇻🇪",
        description: "flag: Venezuela",
        category: "Flags",
        aliases: [
            "venezuela"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇻🇬",
        description: "flag: British Virgin Islands",
        category: "Flags",
        aliases: [
            "british_virgin_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇻🇮",
        description: "flag: U.S. Virgin Islands",
        category: "Flags",
        aliases: [
            "us_virgin_islands"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇻🇳",
        description: "flag: Vietnam",
        category: "Flags",
        aliases: [
            "vietnam"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇻🇺",
        description: "flag: Vanuatu",
        category: "Flags",
        aliases: [
            "vanuatu"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇼🇫",
        description: "flag: Wallis & Futuna",
        category: "Flags",
        aliases: [
            "wallis_futuna"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇼🇸",
        description: "flag: Samoa",
        category: "Flags",
        aliases: [
            "samoa"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇽🇰",
        description: "flag: Kosovo",
        category: "Flags",
        aliases: [
            "kosovo"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇾🇪",
        description: "flag: Yemen",
        category: "Flags",
        aliases: [
            "yemen"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇾🇹",
        description: "flag: Mayotte",
        category: "Flags",
        aliases: [
            "mayotte"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "9.0"
    },
    {
        emoji: "🇿🇦",
        description: "flag: South Africa",
        category: "Flags",
        aliases: [
            "south_africa"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇿🇲",
        description: "flag: Zambia",
        category: "Flags",
        aliases: [
            "zambia"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🇿🇼",
        description: "flag: Zimbabwe",
        category: "Flags",
        aliases: [
            "zimbabwe"
        ],
        tags: [],
        unicodeVersion: "6.0",
        iosVersion: "8.3"
    },
    {
        emoji: "🏴󠁧󠁢󠁥󠁮󠁧󠁿",
        description: "flag: England",
        category: "Flags",
        aliases: [
            "england"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🏴󠁧󠁢󠁳󠁣󠁴󠁿",
        description: "flag: Scotland",
        category: "Flags",
        aliases: [
            "scotland"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    },
    {
        emoji: "🏴󠁧󠁢󠁷󠁬󠁳󠁿",
        description: "flag: Wales",
        category: "Flags",
        aliases: [
            "wales"
        ],
        tags: [],
        unicodeVersion: "11.0",
        iosVersion: "12.1"
    }, 
];
const rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
const rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
const rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptconst = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
    rsNonAstral,
    rsRegional,
    rsSurrPair
].join("|") + ")" + rsOptconst + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptconst + reOptMod + rsOptJoin, rsEmoji = "(?:" + [
    rsDingbat,
    rsRegional,
    rsSurrPair
].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [
    rsNonAstral + rsCombo + "?",
    rsCombo,
    rsRegional,
    rsSurrPair,
    rsAstral, 
].join("|") + ")";
new RegExp(rsApos, "g");
new RegExp(rsCombo, "g");
new RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
new RegExp(rsEmoji, "g");
new RegExp([
    rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [
        rsBreak,
        rsUpper,
        "$"
    ].join("|") + ")",
    rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [
        rsBreak,
        rsUpper + rsMiscLower,
        "$"
    ].join("|") + ")",
    rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
    rsUpper + "+" + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji, 
].join("|"), "g");
new RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
const reEmojiName = /:([a-zA-Z0-9_\-\+]+):/g;
const NON_SPACING_MARK = String.fromCharCode(65039);
const reNonSpacing = new RegExp(NON_SPACING_MARK, "g");
function stripNSB(code) {
    return code.replace(reNonSpacing, "");
}
function stripColons(str) {
    var colonIndex = str.indexOf(":");
    if (colonIndex > -1) {
        if (colonIndex === str.length - 1) {
            str = str.substring(0, colonIndex);
            return stripColons(str);
        } else {
            str = str.substr(colonIndex + 1);
            return stripColons(str);
        }
    }
    return str;
}
function wrapColons(str) {
    return str.length > 0 ? ":" + str + ":" : str;
}
const byAlias = Object.fromEntries(emojis.map((emoji1)=>emoji1.aliases.map((alias1)=>[
            alias1,
            emoji1
        ]
    )
).flat());
Object.fromEntries(emojis.map((emoji2)=>{
    return [
        stripNSB(emoji2.emoji),
        emoji2
    ];
}));
function get1(alias) {
    return byAlias[stripColons(alias)]?.emoji;
}
function emojify(str) {
    if (!str) return "";
    return str.split(reEmojiName).map((s30, i)=>{
        if (i % 2 === 0) return s30;
        let emoji5 = get1(s30);
        if (!emoji5) emoji5 = wrapColons(s30);
        return emoji5;
    }).join("");
}
function getDefaults() {
    return {
        baseUrl: null,
        breaks: false,
        extensions: null,
        gfm: true,
        headerIds: true,
        headerPrefix: "",
        highlight: null,
        langPrefix: "language-",
        mangle: true,
        pedantic: false,
        renderer: null,
        sanitize: false,
        sanitizer: null,
        silent: false,
        smartLists: false,
        smartypants: false,
        tokenizer: null,
        walkTokens: null,
        xhtml: false
    };
}
let e4 = getDefaults();
function changeDefaults(t112) {
    e4 = t112;
}
const t5 = /[&<>"']/;
const n5 = /[&<>"']/g;
const r6 = /[<>"']|&(?!#?\w+;)/;
const s4 = /[<>"']|&(?!#?\w+;)/g;
const i5 = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
};
const getEscapeReplacement = (e)=>i5[e]
;
function escape(e113, i16) {
    if (i16) {
        if (t5.test(e113)) return e113.replace(n5, getEscapeReplacement);
    } else if (r6.test(e113)) return e113.replace(s4, getEscapeReplacement);
    return e113;
}
const l4 = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;
function unescape(e24) {
    return e24.replace(l4, (e, t212)=>{
        t212 = t212.toLowerCase();
        return "colon" === t212 ? ":" : "#" === t212.charAt(0) ? "x" === t212.charAt(1) ? String.fromCharCode(parseInt(t212.substring(2), 16)) : String.fromCharCode(+t212.substring(1)) : "";
    });
}
const a5 = /(^|[^\[])\^/g;
function edit(e33, t312) {
    e33 = e33.source || e33;
    t312 = t312 || "";
    const n114 = {
        replace: (t44, r114)=>{
            r114 = r114.source || r114;
            r114 = r114.replace(a5, "$1");
            e33 = e33.replace(t44, r114);
            return n114;
        },
        getRegex: ()=>new RegExp(e33, t312)
    };
    return n114;
}
const o5 = /[^\w:]/g;
const c5 = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
function cleanUrl(e41, t51, n213) {
    if (e41) {
        let e5;
        try {
            e5 = decodeURIComponent(unescape(n213)).replace(o5, "").toLowerCase();
        } catch (e) {
            return null;
        }
        if (0 === e5.indexOf("javascript:") || 0 === e5.indexOf("vbscript:") || 0 === e5.indexOf("data:")) return null;
    }
    t51 && !c5.test(n213) && (n213 = resolveUrl(t51, n213));
    try {
        n213 = encodeURI(n213).replace(/%25/g, "%");
    } catch (e) {
        return null;
    }
    return n213;
}
const h5 = {};
const p4 = /^[^:]+:\/*[^/]*$/;
const u5 = /^([^:]+:)[\s\S]*$/;
const g4 = /^([^:]+:\/*[^/]*)[\s\S]*$/;
function resolveUrl(e6, t6) {
    h5[" " + e6] || (p4.test(e6) ? h5[" " + e6] = e6 + "/" : h5[" " + e6] = rtrim(e6, "/", true));
    e6 = h5[" " + e6];
    const n37 = -1 === e6.indexOf(":");
    return "//" === t6.substring(0, 2) ? n37 ? t6 : e6.replace(u5, "$1") + t6 : "/" === t6.charAt(0) ? n37 ? t6 : e6.replace(g4, "$1") + t6 : e6 + t6;
}
const d4 = {
    exec: function noopTest() {}
};
function merge(e7) {
    let t7, n42, r212 = 1;
    for(; r212 < arguments.length; r212++){
        t7 = arguments[r212];
        for(n42 in t7)Object.prototype.hasOwnProperty.call(t7, n42) && (e7[n42] = t7[n42]);
    }
    return e7;
}
function splitCells(e8, t8) {
    const n51 = e8.replace(/\|/g, (e, t9, n6)=>{
        let r46 = false, s212 = t9;
        while(--s212 >= 0 && "\\" === n6[s212])r46 = !r46;
        return r46 ? "|" : " |";
    }), r312 = n51.split(/ \|/);
    let s112 = 0;
    r312[0].trim() || r312.shift();
    r312[r312.length - 1].trim() || r312.pop();
    if (r312.length > t8) r312.splice(t8);
    else while(r312.length < t8)r312.push("");
    for(; s112 < r312.length; s112++)r312[s112] = r312[s112].trim().replace(/\\\|/g, "|");
    return r312;
}
function rtrim(e9, t10, n7) {
    const r53 = e9.length;
    if (0 === r53) return "";
    let s33 = 0;
    while(s33 < r53){
        const i24 = e9.charAt(r53 - s33 - 1);
        if (i24 !== t10 || n7) {
            if (i24 === t10 || !n7) break;
            s33++;
        } else s33++;
    }
    return e9.substr(0, r53 - s33);
}
function findClosingBracket(e10, t11) {
    if (-1 === e10.indexOf(t11[1])) return -1;
    const n8 = e10.length;
    let r61 = 0, s41 = 0;
    for(; s41 < n8; s41++)if ("\\" === e10[s41]) s41++;
    else if (e10[s41] === t11[0]) r61++;
    else if (e10[s41] === t11[1]) {
        r61--;
        if (r61 < 0) return s41;
    }
    return -1;
}
function checkSanitizeDeprecation(e11) {
    e11 && e11.sanitize && !e11.silent && console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
}
function repeatString(e12, t12) {
    if (t12 < 1) return "";
    let n9 = "";
    while(t12 > 1){
        1 & t12 && (n9 += e12);
        t12 >>= 1;
        e12 += e12;
    }
    return n9 + e12;
}
function outputLink(e13, t13, n10, r7) {
    const s5 = t13.href;
    const i33 = t13.title ? escape(t13.title) : null;
    const l14 = e13[1].replace(/\\([\[\]])/g, "$1");
    if ("!" !== e13[0].charAt(0)) {
        r7.state.inLink = true;
        const e14 = {
            type: "link",
            raw: n10,
            href: s5,
            title: i33,
            text: l14,
            tokens: r7.inlineTokens(l14, [])
        };
        r7.state.inLink = false;
        return e14;
    }
    return {
        type: "image",
        raw: n10,
        href: s5,
        title: i33,
        text: escape(l14)
    };
}
function indentCodeCompensation(e15, t14) {
    const n11 = e15.match(/^(\s+)(?:```)/);
    if (null === n11) return t14;
    const r8 = n11[1];
    return t14.split("\n").map((e16)=>{
        const t15 = e16.match(/^\s+/);
        if (null === t15) return e16;
        const [n12] = t15;
        return n12.length >= r8.length ? e16.slice(r8.length) : e16;
    }).join("\n");
}
class Tokenizer {
    constructor(t16){
        this.options = t16 || e4;
    }
    space(e17) {
        const t17 = this.rules.block.newline.exec(e17);
        if (t17 && t17[0].length > 0) return {
            type: "space",
            raw: t17[0]
        };
    }
    code(e18) {
        const t18 = this.rules.block.code.exec(e18);
        if (t18) {
            const e19 = t18[0].replace(/^ {1,4}/gm, "");
            return {
                type: "code",
                raw: t18[0],
                codeBlockStyle: "indented",
                text: this.options.pedantic ? e19 : rtrim(e19, "\n")
            };
        }
    }
    fences(e20) {
        const t19 = this.rules.block.fences.exec(e20);
        if (t19) {
            const e21 = t19[0];
            const n13 = indentCodeCompensation(e21, t19[3] || "");
            return {
                type: "code",
                raw: e21,
                lang: t19[2] ? t19[2].trim() : t19[2],
                text: n13
            };
        }
    }
    heading(e22) {
        const t20 = this.rules.block.heading.exec(e22);
        if (t20) {
            let e23 = t20[2].trim();
            if (/#$/.test(e23)) {
                const t21 = rtrim(e23, "#");
                this.options.pedantic ? e23 = t21.trim() : t21 && !/ $/.test(t21) || (e23 = t21.trim());
            }
            const n14 = {
                type: "heading",
                raw: t20[0],
                depth: t20[1].length,
                text: e23,
                tokens: []
            };
            this.lexer.inline(n14.text, n14.tokens);
            return n14;
        }
    }
    hr(e24) {
        const t22 = this.rules.block.hr.exec(e24);
        if (t22) return {
            type: "hr",
            raw: t22[0]
        };
    }
    blockquote(e25) {
        const t23 = this.rules.block.blockquote.exec(e25);
        if (t23) {
            const e26 = t23[0].replace(/^ *> ?/gm, "");
            return {
                type: "blockquote",
                raw: t23[0],
                tokens: this.lexer.blockTokens(e26, []),
                text: e26
            };
        }
    }
    list(e27) {
        let t24 = this.rules.block.list.exec(e27);
        if (t24) {
            let n15, r9, s6, i43, l23, a15, o112, c111, h13, p112, u14, g12;
            let d12 = t24[1].trim();
            const k13 = d12.length > 1;
            const f14 = {
                type: "list",
                raw: "",
                ordered: k13,
                start: k13 ? +d12.slice(0, -1) : "",
                loose: false,
                items: []
            };
            d12 = k13 ? `\\d{1,9}\\${d12.slice(-1)}` : `\\${d12}`;
            this.options.pedantic && (d12 = k13 ? d12 : "[*+-]");
            const m13 = new RegExp(`^( {0,3}${d12})((?: [^\\n]*)?(?:\\n|$))`);
            while(e27){
                g12 = false;
                if (!(t24 = m13.exec(e27))) break;
                if (this.rules.block.hr.test(e27)) break;
                n15 = t24[0];
                e27 = e27.substring(n15.length);
                c111 = t24[2].split("\n", 1)[0];
                h13 = e27.split("\n", 1)[0];
                if (this.options.pedantic) {
                    i43 = 2;
                    u14 = c111.trimLeft();
                } else {
                    i43 = t24[2].search(/[^ ]/);
                    i43 = i43 > 4 ? 1 : i43;
                    u14 = c111.slice(i43);
                    i43 += t24[1].length;
                }
                a15 = false;
                if (!c111 && /^ *$/.test(h13)) {
                    n15 += h13 + "\n";
                    e27 = e27.substring(h13.length + 1);
                    g12 = true;
                }
                if (!g12) {
                    const t25 = new RegExp(`^ {0,${Math.min(3, i43 - 1)}}(?:[*+-]|\\d{1,9}[.)])`);
                    while(e27){
                        p112 = e27.split("\n", 1)[0];
                        c111 = p112;
                        this.options.pedantic && (c111 = c111.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  "));
                        if (t25.test(c111)) break;
                        if (c111.search(/[^ ]/) >= i43 || !c111.trim()) u14 += "\n" + c111.slice(i43);
                        else {
                            if (a15) break;
                            u14 += "\n" + c111;
                        }
                        a15 || c111.trim() || (a15 = true);
                        n15 += p112 + "\n";
                        e27 = e27.substring(p112.length + 1);
                    }
                }
                f14.loose || (o112 ? f14.loose = true : /\n *\n *$/.test(n15) && (o112 = true));
                if (this.options.gfm) {
                    r9 = /^\[[ xX]\] /.exec(u14);
                    if (r9) {
                        s6 = "[ ] " !== r9[0];
                        u14 = u14.replace(/^\[[ xX]\] +/, "");
                    }
                }
                f14.items.push({
                    type: "list_item",
                    raw: n15,
                    task: !!r9,
                    checked: s6,
                    loose: false,
                    text: u14
                });
                f14.raw += n15;
            }
            f14.items[f14.items.length - 1].raw = n15.trimRight();
            f14.items[f14.items.length - 1].text = u14.trimRight();
            f14.raw = f14.raw.trimRight();
            const x19 = f14.items.length;
            for(l23 = 0; l23 < x19; l23++){
                this.lexer.state.top = false;
                f14.items[l23].tokens = this.lexer.blockTokens(f14.items[l23].text, []);
                const e28 = f14.items[l23].tokens.filter((e31)=>"space" === e31.type
                );
                const t263 = e28.every((e33)=>{
                    const t29 = e33.raw.split("");
                    let n16 = 0;
                    for (const e32 of t29){
                        "\n" === e32 && (n16 += 1);
                        if (n16 > 1) return true;
                    }
                    return false;
                });
                if (!f14.loose && e28.length && t263) {
                    f14.loose = true;
                    f14.items[l23].loose = true;
                }
            }
            return f14;
        }
    }
    html(e34) {
        const t30 = this.rules.block.html.exec(e34);
        if (t30) {
            const e35 = {
                type: "html",
                raw: t30[0],
                pre: !this.options.sanitizer && ("pre" === t30[1] || "script" === t30[1] || "style" === t30[1]),
                text: t30[0]
            };
            if (this.options.sanitize) {
                e35.type = "paragraph";
                e35.text = this.options.sanitizer ? this.options.sanitizer(t30[0]) : escape(t30[0]);
                e35.tokens = [];
                this.lexer.inline(e35.text, e35.tokens);
            }
            return e35;
        }
    }
    def(e36) {
        const t31 = this.rules.block.def.exec(e36);
        if (t31) {
            t31[3] && (t31[3] = t31[3].substring(1, t31[3].length - 1));
            const e37 = t31[1].toLowerCase().replace(/\s+/g, " ");
            return {
                type: "def",
                tag: e37,
                raw: t31[0],
                href: t31[2],
                title: t31[3]
            };
        }
    }
    table(e38) {
        const t32 = this.rules.block.table.exec(e38);
        if (t32) {
            const e39 = {
                type: "table",
                header: splitCells(t32[1]).map((e41)=>({
                        text: e41
                    })
                ),
                align: t32[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
                rows: t32[3] ? t32[3].replace(/\n[ \t]*$/, "").split("\n") : []
            };
            if (e39.header.length === e39.align.length) {
                e39.raw = t32[0];
                let n17 = e39.align.length;
                let r10, s7, i51, l32;
                for(r10 = 0; r10 < n17; r10++)/^ *-+: *$/.test(e39.align[r10]) ? e39.align[r10] = "right" : /^ *:-+: *$/.test(e39.align[r10]) ? e39.align[r10] = "center" : /^ *:-+ *$/.test(e39.align[r10]) ? e39.align[r10] = "left" : e39.align[r10] = null;
                n17 = e39.rows.length;
                for(r10 = 0; r10 < n17; r10++)e39.rows[r10] = splitCells(e39.rows[r10], e39.header.length).map((e42)=>({
                        text: e42
                    })
                );
                n17 = e39.header.length;
                for(s7 = 0; s7 < n17; s7++){
                    e39.header[s7].tokens = [];
                    this.lexer.inlineTokens(e39.header[s7].text, e39.header[s7].tokens);
                }
                n17 = e39.rows.length;
                for(s7 = 0; s7 < n17; s7++){
                    l32 = e39.rows[s7];
                    for(i51 = 0; i51 < l32.length; i51++){
                        l32[i51].tokens = [];
                        this.lexer.inlineTokens(l32[i51].text, l32[i51].tokens);
                    }
                }
                return e39;
            }
        }
    }
    lheading(e43) {
        const t33 = this.rules.block.lheading.exec(e43);
        if (t33) {
            const e44 = {
                type: "heading",
                raw: t33[0],
                depth: "=" === t33[2].charAt(0) ? 1 : 2,
                text: t33[1],
                tokens: []
            };
            this.lexer.inline(e44.text, e44.tokens);
            return e44;
        }
    }
    paragraph(e45) {
        const t34 = this.rules.block.paragraph.exec(e45);
        if (t34) {
            const e46 = {
                type: "paragraph",
                raw: t34[0],
                text: "\n" === t34[1].charAt(t34[1].length - 1) ? t34[1].slice(0, -1) : t34[1],
                tokens: []
            };
            this.lexer.inline(e46.text, e46.tokens);
            return e46;
        }
    }
    text(e47) {
        const t35 = this.rules.block.text.exec(e47);
        if (t35) {
            const e48 = {
                type: "text",
                raw: t35[0],
                text: t35[0],
                tokens: []
            };
            this.lexer.inline(e48.text, e48.tokens);
            return e48;
        }
    }
    escape(e49) {
        const t36 = this.rules.inline.escape.exec(e49);
        if (t36) return {
            type: "escape",
            raw: t36[0],
            text: escape(t36[1])
        };
    }
    tag(e50) {
        const t37 = this.rules.inline.tag.exec(e50);
        if (t37) {
            !this.lexer.state.inLink && /^<a /i.test(t37[0]) ? this.lexer.state.inLink = true : this.lexer.state.inLink && /^<\/a>/i.test(t37[0]) && (this.lexer.state.inLink = false);
            !this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(t37[0]) ? this.lexer.state.inRawBlock = true : this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(t37[0]) && (this.lexer.state.inRawBlock = false);
            return {
                type: this.options.sanitize ? "text" : "html",
                raw: t37[0],
                inLink: this.lexer.state.inLink,
                inRawBlock: this.lexer.state.inRawBlock,
                text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(t37[0]) : escape(t37[0]) : t37[0]
            };
        }
    }
    link(e51) {
        const t38 = this.rules.inline.link.exec(e51);
        if (t38) {
            const e52 = t38[2].trim();
            if (!this.options.pedantic && /^</.test(e52)) {
                if (!/>$/.test(e52)) return;
                const t39 = rtrim(e52.slice(0, -1), "\\");
                if ((e52.length - t39.length) % 2 === 0) return;
            } else {
                const e53 = findClosingBracket(t38[2], "()");
                if (e53 > -1) {
                    const n18 = 0 === t38[0].indexOf("!") ? 5 : 4;
                    const r11 = n18 + t38[1].length + e53;
                    t38[2] = t38[2].substring(0, e53);
                    t38[0] = t38[0].substring(0, r11).trim();
                    t38[3] = "";
                }
            }
            let n19 = t38[2];
            let r12 = "";
            if (this.options.pedantic) {
                const e54 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n19);
                if (e54) {
                    n19 = e54[1];
                    r12 = e54[3];
                }
            } else r12 = t38[3] ? t38[3].slice(1, -1) : "";
            n19 = n19.trim();
            /^</.test(n19) && (n19 = this.options.pedantic && !/>$/.test(e52) ? n19.slice(1) : n19.slice(1, -1));
            return outputLink(t38, {
                href: n19 ? n19.replace(this.rules.inline._escapes, "$1") : n19,
                title: r12 ? r12.replace(this.rules.inline._escapes, "$1") : r12
            }, t38[0], this.lexer);
        }
    }
    reflink(e55, t40) {
        let n20;
        if ((n20 = this.rules.inline.reflink.exec(e55)) || (n20 = this.rules.inline.nolink.exec(e55))) {
            let e56 = (n20[2] || n20[1]).replace(/\s+/g, " ");
            e56 = t40[e56.toLowerCase()];
            if (!e56 || !e56.href) {
                const e57 = n20[0].charAt(0);
                return {
                    type: "text",
                    raw: e57,
                    text: e57
                };
            }
            return outputLink(n20, e56, n20[0], this.lexer);
        }
    }
    emStrong(e58, t41, n21 = "") {
        let r13 = this.rules.inline.emStrong.lDelim.exec(e58);
        if (!r13) return;
        if (r13[3] && n21.match(/[\p{L}\p{N}]/u)) return;
        const s8 = r13[1] || r13[2] || "";
        if (!s8 || s8 && ("" === n21 || this.rules.inline.punctuation.exec(n21))) {
            const n22 = r13[0].length - 1;
            let s9, i6, l41 = n22, a23 = 0;
            const o25 = "*" === r13[0][0] ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
            o25.lastIndex = 0;
            t41 = t41.slice(-1 * e58.length + n22);
            while(null != (r13 = o25.exec(t41))){
                s9 = r13[1] || r13[2] || r13[3] || r13[4] || r13[5] || r13[6];
                if (!s9) continue;
                i6 = s9.length;
                if (r13[3] || r13[4]) {
                    l41 += i6;
                    continue;
                }
                if ((r13[5] || r13[6]) && n22 % 3 && !((n22 + i6) % 3)) {
                    a23 += i6;
                    continue;
                }
                l41 -= i6;
                if (l41 > 0) continue;
                i6 = Math.min(i6, i6 + l41 + a23);
                if (Math.min(n22, i6) % 2) {
                    const t42 = e58.slice(1, n22 + r13.index + i6);
                    return {
                        type: "em",
                        raw: e58.slice(0, n22 + r13.index + i6 + 1),
                        text: t42,
                        tokens: this.lexer.inlineTokens(t42, [])
                    };
                }
                const t43 = e58.slice(2, n22 + r13.index + i6 - 1);
                return {
                    type: "strong",
                    raw: e58.slice(0, n22 + r13.index + i6 + 1),
                    text: t43,
                    tokens: this.lexer.inlineTokens(t43, [])
                };
            }
        }
    }
    codespan(e59) {
        const t44 = this.rules.inline.code.exec(e59);
        if (t44) {
            let e60 = t44[2].replace(/\n/g, " ");
            const n23 = /[^ ]/.test(e60);
            const r14 = /^ /.test(e60) && / $/.test(e60);
            n23 && r14 && (e60 = e60.substring(1, e60.length - 1));
            e60 = escape(e60, true);
            return {
                type: "codespan",
                raw: t44[0],
                text: e60
            };
        }
    }
    br(e61) {
        const t45 = this.rules.inline.br.exec(e61);
        if (t45) return {
            type: "br",
            raw: t45[0]
        };
    }
    del(e62) {
        const t46 = this.rules.inline.del.exec(e62);
        if (t46) return {
            type: "del",
            raw: t46[0],
            text: t46[2],
            tokens: this.lexer.inlineTokens(t46[2], [])
        };
    }
    autolink(e63, t47) {
        const n24 = this.rules.inline.autolink.exec(e63);
        if (n24) {
            let e64, r15;
            if ("@" === n24[2]) {
                e64 = escape(this.options.mangle ? t47(n24[1]) : n24[1]);
                r15 = "mailto:" + e64;
            } else {
                e64 = escape(n24[1]);
                r15 = e64;
            }
            return {
                type: "link",
                raw: n24[0],
                text: e64,
                href: r15,
                tokens: [
                    {
                        type: "text",
                        raw: e64,
                        text: e64
                    }
                ]
            };
        }
    }
    url(e65, t48) {
        let n25;
        if (n25 = this.rules.inline.url.exec(e65)) {
            let e66, r16;
            if ("@" === n25[2]) {
                e66 = escape(this.options.mangle ? t48(n25[0]) : n25[0]);
                r16 = "mailto:" + e66;
            } else {
                let t49;
                do {
                    t49 = n25[0];
                    n25[0] = this.rules.inline._backpedal.exec(n25[0])[0];
                }while (t49 !== n25[0])
                e66 = escape(n25[0]);
                r16 = "www." === n25[1] ? "http://" + e66 : e66;
            }
            return {
                type: "link",
                raw: n25[0],
                text: e66,
                href: r16,
                tokens: [
                    {
                        type: "text",
                        raw: e66,
                        text: e66
                    }
                ]
            };
        }
    }
    inlineText(e67, t50) {
        const n26 = this.rules.inline.text.exec(e67);
        if (n26) {
            let e68;
            e68 = this.lexer.state.inRawBlock ? this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(n26[0]) : escape(n26[0]) : n26[0] : escape(this.options.smartypants ? t50(n26[0]) : n26[0]);
            return {
                type: "text",
                raw: n26[0],
                text: e68
            };
        }
    }
}
const k4 = {
    newline: /^(?: *(?:\n|$))+/,
    code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
    fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
    hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,
    heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
    list: /^( {0,3}bull)( [^\n]+?)?(?:\n|$)/,
    html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
    def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
    table: d4,
    lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
    text: /^[^\n]+/
};
k4._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
k4._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
k4.def = edit(k4.def).replace("label", k4._label).replace("title", k4._title).getRegex();
k4.bullet = /(?:[*+-]|\d{1,9}[.)])/;
k4.listItemStart = edit(/^( *)(bull) */).replace("bull", k4.bullet).getRegex();
k4.list = edit(k4.list).replace(/bull/g, k4.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + k4.def.source + ")").getRegex();
k4._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
k4._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
k4.html = edit(k4.html, "i").replace("comment", k4._comment).replace("tag", k4._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
k4.paragraph = edit(k4._paragraph).replace("hr", k4.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", k4._tag).getRegex();
k4.blockquote = edit(k4.blockquote).replace("paragraph", k4.paragraph).getRegex();
k4.normal = merge({}, k4);
k4.gfm = merge({}, k4.normal, {
    table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
});
k4.gfm.table = edit(k4.gfm.table).replace("hr", k4.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", k4._tag).getRegex();
k4.gfm.paragraph = edit(k4._paragraph).replace("hr", k4.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", k4.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", k4._tag).getRegex();
k4.pedantic = merge({}, k4.normal, {
    html: edit("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment", k4._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: d4,
    paragraph: edit(k4.normal._paragraph).replace("hr", k4.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", k4.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
});
const f6 = {
    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
    url: d4,
    tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
    reflink: /^!?\[(label)\]\[(ref)\]/,
    nolink: /^!?\[(ref)\](?:\[\])?/,
    reflinkSearch: "reflink|nolink(?!\\()",
    emStrong: {
        lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
        rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
        rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
    },
    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
    br: /^( {2,}|\\)\n(?!\s*$)/,
    del: d4,
    text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
    punctuation: /^([\spunctuation])/
};
f6._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
f6.punctuation = edit(f6.punctuation).replace(/punctuation/g, f6._punctuation).getRegex();
f6.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
f6.escapedEmSt = /\\\*|\\_/g;
f6._comment = edit(k4._comment).replace("(?:--\x3e|$)", "--\x3e").getRegex();
f6.emStrong.lDelim = edit(f6.emStrong.lDelim).replace(/punct/g, f6._punctuation).getRegex();
f6.emStrong.rDelimAst = edit(f6.emStrong.rDelimAst, "g").replace(/punct/g, f6._punctuation).getRegex();
f6.emStrong.rDelimUnd = edit(f6.emStrong.rDelimUnd, "g").replace(/punct/g, f6._punctuation).getRegex();
f6._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
f6._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
f6._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
f6.autolink = edit(f6.autolink).replace("scheme", f6._scheme).replace("email", f6._email).getRegex();
f6._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
f6.tag = edit(f6.tag).replace("comment", f6._comment).replace("attribute", f6._attribute).getRegex();
f6._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
f6._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
f6._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
f6.link = edit(f6.link).replace("label", f6._label).replace("href", f6._href).replace("title", f6._title).getRegex();
f6.reflink = edit(f6.reflink).replace("label", f6._label).replace("ref", k4._label).getRegex();
f6.nolink = edit(f6.nolink).replace("ref", k4._label).getRegex();
f6.reflinkSearch = edit(f6.reflinkSearch, "g").replace("reflink", f6.reflink).replace("nolink", f6.nolink).getRegex();
f6.normal = merge({}, f6);
f6.pedantic = merge({}, f6.normal, {
    strong: {
        start: /^__|\*\*/,
        middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
        endAst: /\*\*(?!\*)/g,
        endUnd: /__(?!_)/g
    },
    em: {
        start: /^_|\*/,
        middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
        endAst: /\*(?!\*)/g,
        endUnd: /_(?!_)/g
    },
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", f6._label).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", f6._label).getRegex()
});
f6.gfm = merge({}, f6.normal, {
    escape: edit(f6.escape).replace("])", "~|])").getRegex(),
    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
    _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
f6.gfm.url = edit(f6.gfm.url, "i").replace("email", f6.gfm._extended_email).getRegex();
f6.breaks = merge({}, f6.gfm, {
    br: edit(f6.br).replace("{2,}", "*").getRegex(),
    text: edit(f6.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
});
function smartypants(e69) {
    return e69.replace(/---/g, "—").replace(/--/g, "–").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1‘").replace(/'/g, "’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1“").replace(/"/g, "”").replace(/\.{3}/g, "…");
}
function mangle(e70) {
    let t51, n27, r17 = "";
    const s10 = e70.length;
    for(t51 = 0; t51 < s10; t51++){
        n27 = e70.charCodeAt(t51);
        Math.random() > 0.5 && (n27 = "x" + n27.toString(16));
        r17 += "&#" + n27 + ";";
    }
    return r17;
}
class Lexer {
    constructor(t52){
        this.tokens = [];
        this.tokens.links = Object.create(null);
        this.options = t52 || e4;
        this.options.tokenizer = this.options.tokenizer || new Tokenizer;
        this.tokenizer = this.options.tokenizer;
        this.tokenizer.options = this.options;
        this.tokenizer.lexer = this;
        this.inlineQueue = [];
        this.state = {
            inLink: false,
            inRawBlock: false,
            top: true
        };
        const n28 = {
            block: k4.normal,
            inline: f6.normal
        };
        if (this.options.pedantic) {
            n28.block = k4.pedantic;
            n28.inline = f6.pedantic;
        } else if (this.options.gfm) {
            n28.block = k4.gfm;
            this.options.breaks ? n28.inline = f6.breaks : n28.inline = f6.gfm;
        }
        this.tokenizer.rules = n28;
    }
    static get rules() {
        return {
            block: k4,
            inline: f6
        };
    }
    static lex(e71, t53) {
        const n29 = new Lexer(t53);
        return n29.lex(e71);
    }
    static lexInline(e72, t54) {
        const n30 = new Lexer(t54);
        return n30.inlineTokens(e72);
    }
    lex(e73) {
        e73 = e73.replace(/\r\n|\r/g, "\n").replace(/\t/g, "    ");
        this.blockTokens(e73, this.tokens);
        let t55;
        while(t55 = this.inlineQueue.shift())this.inlineTokens(t55.src, t55.tokens);
        return this.tokens;
    }
    blockTokens(e74, t56 = []) {
        this.options.pedantic && (e74 = e74.replace(/^ +$/gm, ""));
        let n31, r18, s11, i7;
        while(e74)if (!(this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((r19)=>{
            if (n31 = r19.call({
                lexer: this
            }, e74, t56)) {
                e74 = e74.substring(n31.raw.length);
                t56.push(n31);
                return true;
            }
            return false;
        }))) if (n31 = this.tokenizer.space(e74)) {
            e74 = e74.substring(n31.raw.length);
            1 === n31.raw.length && t56.length > 0 ? t56[t56.length - 1].raw += "\n" : t56.push(n31);
        } else if (n31 = this.tokenizer.code(e74)) {
            e74 = e74.substring(n31.raw.length);
            r18 = t56[t56.length - 1];
            if (!r18 || "paragraph" !== r18.type && "text" !== r18.type) t56.push(n31);
            else {
                r18.raw += "\n" + n31.raw;
                r18.text += "\n" + n31.text;
                this.inlineQueue[this.inlineQueue.length - 1].src = r18.text;
            }
        } else if (n31 = this.tokenizer.fences(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.heading(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.hr(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.blockquote(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.list(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.html(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.def(e74)) {
            e74 = e74.substring(n31.raw.length);
            r18 = t56[t56.length - 1];
            if (!r18 || "paragraph" !== r18.type && "text" !== r18.type) this.tokens.links[n31.tag] || (this.tokens.links[n31.tag] = {
                href: n31.href,
                title: n31.title
            });
            else {
                r18.raw += "\n" + n31.raw;
                r18.text += "\n" + n31.raw;
                this.inlineQueue[this.inlineQueue.length - 1].src = r18.text;
            }
        } else if (n31 = this.tokenizer.table(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else if (n31 = this.tokenizer.lheading(e74)) {
            e74 = e74.substring(n31.raw.length);
            t56.push(n31);
        } else {
            s11 = e74;
            if (this.options.extensions && this.options.extensions.startBlock) {
                let t57 = Infinity;
                const n32 = e74.slice(1);
                let r20;
                this.options.extensions.startBlock.forEach(function(e75) {
                    r20 = e75.call({
                        lexer: this
                    }, n32);
                    "number" === typeof r20 && r20 >= 0 && (t57 = Math.min(t57, r20));
                });
                t57 < Infinity && t57 >= 0 && (s11 = e74.substring(0, t57 + 1));
            }
            if (this.state.top && (n31 = this.tokenizer.paragraph(s11))) {
                r18 = t56[t56.length - 1];
                if (i7 && "paragraph" === r18.type) {
                    r18.raw += "\n" + n31.raw;
                    r18.text += "\n" + n31.text;
                    this.inlineQueue.pop();
                    this.inlineQueue[this.inlineQueue.length - 1].src = r18.text;
                } else t56.push(n31);
                i7 = s11.length !== e74.length;
                e74 = e74.substring(n31.raw.length);
            } else if (n31 = this.tokenizer.text(e74)) {
                e74 = e74.substring(n31.raw.length);
                r18 = t56[t56.length - 1];
                if (r18 && "text" === r18.type) {
                    r18.raw += "\n" + n31.raw;
                    r18.text += "\n" + n31.text;
                    this.inlineQueue.pop();
                    this.inlineQueue[this.inlineQueue.length - 1].src = r18.text;
                } else t56.push(n31);
            } else if (e74) {
                const t58 = "Infinite loop on byte: " + e74.charCodeAt(0);
                if (this.options.silent) {
                    console.error(t58);
                    break;
                }
                throw new Error(t58);
            }
        }
        this.state.top = true;
        return t56;
    }
    inline(e76, t59) {
        this.inlineQueue.push({
            src: e76,
            tokens: t59
        });
    }
    inlineTokens(e77, t60 = []) {
        let n33, r21, s12;
        let i8 = e77;
        let l5;
        let a35, o32;
        if (this.tokens.links) {
            const e78 = Object.keys(this.tokens.links);
            if (e78.length > 0) while(null != (l5 = this.tokenizer.rules.inline.reflinkSearch.exec(i8)))e78.includes(l5[0].slice(l5[0].lastIndexOf("[") + 1, -1)) && (i8 = i8.slice(0, l5.index) + "[" + repeatString("a", l5[0].length - 2) + "]" + i8.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));
        }
        while(null != (l5 = this.tokenizer.rules.inline.blockSkip.exec(i8)))i8 = i8.slice(0, l5.index) + "[" + repeatString("a", l5[0].length - 2) + "]" + i8.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
        while(null != (l5 = this.tokenizer.rules.inline.escapedEmSt.exec(i8)))i8 = i8.slice(0, l5.index) + "++" + i8.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
        while(e77){
            a35 || (o32 = "");
            a35 = false;
            if (!(this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((r22)=>{
                if (n33 = r22.call({
                    lexer: this
                }, e77, t60)) {
                    e77 = e77.substring(n33.raw.length);
                    t60.push(n33);
                    return true;
                }
                return false;
            }))) if (n33 = this.tokenizer.escape(e77)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (n33 = this.tokenizer.tag(e77)) {
                e77 = e77.substring(n33.raw.length);
                r21 = t60[t60.length - 1];
                if (r21 && "text" === n33.type && "text" === r21.type) {
                    r21.raw += n33.raw;
                    r21.text += n33.text;
                } else t60.push(n33);
            } else if (n33 = this.tokenizer.link(e77)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (n33 = this.tokenizer.reflink(e77, this.tokens.links)) {
                e77 = e77.substring(n33.raw.length);
                r21 = t60[t60.length - 1];
                if (r21 && "text" === n33.type && "text" === r21.type) {
                    r21.raw += n33.raw;
                    r21.text += n33.text;
                } else t60.push(n33);
            } else if (n33 = this.tokenizer.emStrong(e77, i8, o32)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (n33 = this.tokenizer.codespan(e77)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (n33 = this.tokenizer.br(e77)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (n33 = this.tokenizer.del(e77)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (n33 = this.tokenizer.autolink(e77, mangle)) {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            } else if (this.state.inLink || !(n33 = this.tokenizer.url(e77, mangle))) {
                s12 = e77;
                if (this.options.extensions && this.options.extensions.startInline) {
                    let t61 = Infinity;
                    const n34 = e77.slice(1);
                    let r23;
                    this.options.extensions.startInline.forEach(function(e79) {
                        r23 = e79.call({
                            lexer: this
                        }, n34);
                        "number" === typeof r23 && r23 >= 0 && (t61 = Math.min(t61, r23));
                    });
                    t61 < Infinity && t61 >= 0 && (s12 = e77.substring(0, t61 + 1));
                }
                if (n33 = this.tokenizer.inlineText(s12, smartypants)) {
                    e77 = e77.substring(n33.raw.length);
                    "_" !== n33.raw.slice(-1) && (o32 = n33.raw.slice(-1));
                    a35 = true;
                    r21 = t60[t60.length - 1];
                    if (r21 && "text" === r21.type) {
                        r21.raw += n33.raw;
                        r21.text += n33.text;
                    } else t60.push(n33);
                } else if (e77) {
                    const t62 = "Infinite loop on byte: " + e77.charCodeAt(0);
                    if (this.options.silent) {
                        console.error(t62);
                        break;
                    }
                    throw new Error(t62);
                }
            } else {
                e77 = e77.substring(n33.raw.length);
                t60.push(n33);
            }
        }
        return t60;
    }
}
class Renderer {
    constructor(t63){
        this.options = t63 || e4;
    }
    code(e80, t64, n35) {
        const r24 = (t64 || "").match(/\S*/)[0];
        if (this.options.highlight) {
            const t65 = this.options.highlight(e80, r24);
            if (null != t65 && t65 !== e80) {
                n35 = true;
                e80 = t65;
            }
        }
        e80 = e80.replace(/\n$/, "") + "\n";
        return r24 ? '<pre><code class="' + this.options.langPrefix + escape(r24, true) + '">' + (n35 ? e80 : escape(e80, true)) + "</code></pre>\n" : "<pre><code>" + (n35 ? e80 : escape(e80, true)) + "</code></pre>\n";
    }
    blockquote(e81) {
        return "<blockquote>\n" + e81 + "</blockquote>\n";
    }
    html(e82) {
        return e82;
    }
    heading(e83, t66, n36, r25) {
        return this.options.headerIds ? "<h" + t66 + ' id="' + this.options.headerPrefix + r25.slug(n36) + '">' + e83 + "</h" + t66 + ">\n" : "<h" + t66 + ">" + e83 + "</h" + t66 + ">\n";
    }
    hr() {
        return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
    }
    list(e84, t67, n37) {
        const r26 = t67 ? "ol" : "ul", s13 = t67 && 1 !== n37 ? ' start="' + n37 + '"' : "";
        return "<" + r26 + s13 + ">\n" + e84 + "</" + r26 + ">\n";
    }
    listitem(e85) {
        return "<li>" + e85 + "</li>\n";
    }
    checkbox(e86) {
        return "<input " + (e86 ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
    }
    paragraph(e87) {
        return "<p>" + e87 + "</p>\n";
    }
    table(e88, t68) {
        t68 && (t68 = "<tbody>" + t68 + "</tbody>");
        return "<table>\n<thead>\n" + e88 + "</thead>\n" + t68 + "</table>\n";
    }
    tablerow(e89) {
        return "<tr>\n" + e89 + "</tr>\n";
    }
    tablecell(e90, t69) {
        const n38 = t69.header ? "th" : "td";
        const r27 = t69.align ? "<" + n38 + ' align="' + t69.align + '">' : "<" + n38 + ">";
        return r27 + e90 + "</" + n38 + ">\n";
    }
    strong(e91) {
        return "<strong>" + e91 + "</strong>";
    }
    em(e92) {
        return "<em>" + e92 + "</em>";
    }
    codespan(e93) {
        return "<code>" + e93 + "</code>";
    }
    br() {
        return this.options.xhtml ? "<br/>" : "<br>";
    }
    del(e94) {
        return "<del>" + e94 + "</del>";
    }
    link(e95, t70, n39) {
        e95 = cleanUrl(this.options.sanitize, this.options.baseUrl, e95);
        if (null === e95) return n39;
        let r28 = '<a href="' + escape(e95) + '"';
        t70 && (r28 += ' title="' + t70 + '"');
        r28 += ">" + n39 + "</a>";
        return r28;
    }
    image(e96, t71, n40) {
        e96 = cleanUrl(this.options.sanitize, this.options.baseUrl, e96);
        if (null === e96) return n40;
        let r29 = '<img src="' + e96 + '" alt="' + n40 + '"';
        t71 && (r29 += ' title="' + t71 + '"');
        r29 += this.options.xhtml ? "/>" : ">";
        return r29;
    }
    text(e97) {
        return e97;
    }
}
class TextRenderer {
    strong(e98) {
        return e98;
    }
    em(e99) {
        return e99;
    }
    codespan(e100) {
        return e100;
    }
    del(e101) {
        return e101;
    }
    html(e102) {
        return e102;
    }
    text(e103) {
        return e103;
    }
    link(e, t, n41) {
        return "" + n41;
    }
    image(e, t, n42) {
        return "" + n42;
    }
    br() {
        return "";
    }
}
class Slugger {
    constructor(){
        this.seen = {};
    }
    serialize(e104) {
        return e104.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
    }
    getNextSafeSlug(e105, t72) {
        let n43 = e105;
        let r30 = 0;
        if (this.seen.hasOwnProperty(n43)) {
            r30 = this.seen[e105];
            do {
                r30++;
                n43 = e105 + "-" + r30;
            }while (this.seen.hasOwnProperty(n43))
        }
        if (!t72) {
            this.seen[e105] = r30;
            this.seen[n43] = 0;
        }
        return n43;
    }
    slug(e106, t73 = {}) {
        const n44 = this.serialize(e106);
        return this.getNextSafeSlug(n44, t73.dryrun);
    }
}
class Parser {
    constructor(t74){
        this.options = t74 || e4;
        this.options.renderer = this.options.renderer || new Renderer;
        this.renderer = this.options.renderer;
        this.renderer.options = this.options;
        this.textRenderer = new TextRenderer;
        this.slugger = new Slugger;
    }
    static parse(e107, t75) {
        const n45 = new Parser(t75);
        return n45.parse(e107);
    }
    static parseInline(e108, t76) {
        const n46 = new Parser(t76);
        return n46.parseInline(e108);
    }
    parse(e109, t77 = true) {
        let n47, r31, s14, i9, l6, a43, o42, c24, h22, p25, u23, g22, d22, k21, f24, m22, x21, b12, w15, _11 = "";
        const y12 = e109.length;
        for(n47 = 0; n47 < y12; n47++){
            p25 = e109[n47];
            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[p25.type]) {
                w15 = this.options.extensions.renderers[p25.type].call({
                    parser: this
                }, p25);
                if (false !== w15 || ![
                    "space",
                    "hr",
                    "heading",
                    "code",
                    "table",
                    "blockquote",
                    "list",
                    "html",
                    "paragraph",
                    "text"
                ].includes(p25.type)) {
                    _11 += w15 || "";
                    continue;
                }
            }
            switch(p25.type){
                case "space":
                    continue;
                case "hr":
                    _11 += this.renderer.hr();
                    continue;
                case "heading":
                    _11 += this.renderer.heading(this.parseInline(p25.tokens), p25.depth, unescape(this.parseInline(p25.tokens, this.textRenderer)), this.slugger);
                    continue;
                case "code":
                    _11 += this.renderer.code(p25.text, p25.lang, p25.escaped);
                    continue;
                case "table":
                    c24 = "";
                    o42 = "";
                    i9 = p25.header.length;
                    for(r31 = 0; r31 < i9; r31++)o42 += this.renderer.tablecell(this.parseInline(p25.header[r31].tokens), {
                        header: true,
                        align: p25.align[r31]
                    });
                    c24 += this.renderer.tablerow(o42);
                    h22 = "";
                    i9 = p25.rows.length;
                    for(r31 = 0; r31 < i9; r31++){
                        a43 = p25.rows[r31];
                        o42 = "";
                        l6 = a43.length;
                        for(s14 = 0; s14 < l6; s14++)o42 += this.renderer.tablecell(this.parseInline(a43[s14].tokens), {
                            header: false,
                            align: p25.align[s14]
                        });
                        h22 += this.renderer.tablerow(o42);
                    }
                    _11 += this.renderer.table(c24, h22);
                    continue;
                case "blockquote":
                    h22 = this.parse(p25.tokens);
                    _11 += this.renderer.blockquote(h22);
                    continue;
                case "list":
                    u23 = p25.ordered;
                    g22 = p25.start;
                    d22 = p25.loose;
                    i9 = p25.items.length;
                    h22 = "";
                    for(r31 = 0; r31 < i9; r31++){
                        f24 = p25.items[r31];
                        m22 = f24.checked;
                        x21 = f24.task;
                        k21 = "";
                        if (f24.task) {
                            b12 = this.renderer.checkbox(m22);
                            if (d22) if (f24.tokens.length > 0 && "paragraph" === f24.tokens[0].type) {
                                f24.tokens[0].text = b12 + " " + f24.tokens[0].text;
                                f24.tokens[0].tokens && f24.tokens[0].tokens.length > 0 && "text" === f24.tokens[0].tokens[0].type && (f24.tokens[0].tokens[0].text = b12 + " " + f24.tokens[0].tokens[0].text);
                            } else f24.tokens.unshift({
                                type: "text",
                                text: b12
                            });
                            else k21 += b12;
                        }
                        k21 += this.parse(f24.tokens, d22);
                        h22 += this.renderer.listitem(k21, x21, m22);
                    }
                    _11 += this.renderer.list(h22, u23, g22);
                    continue;
                case "html":
                    _11 += this.renderer.html(p25.text);
                    continue;
                case "paragraph":
                    _11 += this.renderer.paragraph(this.parseInline(p25.tokens));
                    continue;
                case "text":
                    h22 = p25.tokens ? this.parseInline(p25.tokens) : p25.text;
                    while(n47 + 1 < y12 && "text" === e109[n47 + 1].type){
                        p25 = e109[++n47];
                        h22 += "\n" + (p25.tokens ? this.parseInline(p25.tokens) : p25.text);
                    }
                    _11 += t77 ? this.renderer.paragraph(h22) : h22;
                    continue;
                default:
                    {
                        const e110 = 'Token with "' + p25.type + '" type was not found.';
                        if (this.options.silent) {
                            console.error(e110);
                            return;
                        }
                        throw new Error(e110);
                    }
            }
        }
        return _11;
    }
    parseInline(e111, t78) {
        t78 = t78 || this.renderer;
        let n48, r32, s15, i10 = "";
        const l7 = e111.length;
        for(n48 = 0; n48 < l7; n48++){
            r32 = e111[n48];
            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[r32.type]) {
                s15 = this.options.extensions.renderers[r32.type].call({
                    parser: this
                }, r32);
                if (false !== s15 || ![
                    "escape",
                    "html",
                    "link",
                    "image",
                    "strong",
                    "em",
                    "codespan",
                    "br",
                    "del",
                    "text"
                ].includes(r32.type)) {
                    i10 += s15 || "";
                    continue;
                }
            }
            switch(r32.type){
                case "escape":
                    i10 += t78.text(r32.text);
                    break;
                case "html":
                    i10 += t78.html(r32.text);
                    break;
                case "link":
                    i10 += t78.link(r32.href, r32.title, this.parseInline(r32.tokens, t78));
                    break;
                case "image":
                    i10 += t78.image(r32.href, r32.title, r32.text);
                    break;
                case "strong":
                    i10 += t78.strong(this.parseInline(r32.tokens, t78));
                    break;
                case "em":
                    i10 += t78.em(this.parseInline(r32.tokens, t78));
                    break;
                case "codespan":
                    i10 += t78.codespan(r32.text);
                    break;
                case "br":
                    i10 += t78.br();
                    break;
                case "del":
                    i10 += t78.del(this.parseInline(r32.tokens, t78));
                    break;
                case "text":
                    i10 += t78.text(r32.text);
                    break;
                default:
                    {
                        const e112 = 'Token with "' + r32.type + '" type was not found.';
                        if (this.options.silent) {
                            console.error(e112);
                            return;
                        }
                        throw new Error(e112);
                    }
            }
        }
        return i10;
    }
}
function marked(e113, t79, n49) {
    if ("undefined" === typeof e113 || null === e113) throw new Error("marked(): input parameter is undefined or null");
    if ("string" !== typeof e113) throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(e113) + ", string expected");
    if ("function" === typeof t79) {
        n49 = t79;
        t79 = null;
    }
    t79 = merge({}, marked.defaults, t79 || {});
    checkSanitizeDeprecation(t79);
    if (n49) {
        const r33 = t79.highlight;
        let s16;
        try {
            s16 = Lexer.lex(e113, t79);
        } catch (e114) {
            return n49(e114);
        }
        const done = function(e115) {
            let i13;
            if (!e115) try {
                t79.walkTokens && marked.walkTokens(s16, t79.walkTokens);
                i13 = Parser.parse(s16, t79);
            } catch (t80) {
                e115 = t80;
            }
            t79.highlight = r33;
            return e115 ? n49(e115) : n49(null, i13);
        };
        if (!r33 || r33.length < 3) return done();
        delete t79.highlight;
        if (!s16.length) return done();
        let i11 = 0;
        marked.walkTokens(s16, function(e116) {
            if ("code" === e116.type) {
                i11++;
                setTimeout(()=>{
                    r33(e116.text, e116.lang, function(t81, n50) {
                        if (t81) return done(t81);
                        if (null != n50 && n50 !== e116.text) {
                            e116.text = n50;
                            e116.escaped = true;
                        }
                        i11--;
                        0 === i11 && done();
                    });
                }, 0);
            }
        });
        0 === i11 && done();
    } else try {
        const n51 = Lexer.lex(e113, t79);
        t79.walkTokens && marked.walkTokens(n51, t79.walkTokens);
        return Parser.parse(n51, t79);
    } catch (e117) {
        e117.message += "\nPlease report this to https://github.com/markedjs/marked.";
        if (t79.silent) return "<p>An error occurred:</p><pre>" + escape(e117.message + "", true) + "</pre>";
        throw e117;
    }
}
marked.options = marked.setOptions = function(e118) {
    merge(marked.defaults, e118);
    changeDefaults(marked.defaults);
    return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = e4;
marked.use = function(...e119) {
    const t82 = merge({}, ...e119);
    const n52 = marked.defaults.extensions || {
        renderers: {},
        childTokens: {}
    };
    let r34;
    e119.forEach((e120)=>{
        if (e120.extensions) {
            r34 = true;
            e120.extensions.forEach((e121)=>{
                if (!e121.name) throw new Error("extension name required");
                if (e121.renderer) {
                    const t83 = n52.renderers ? n52.renderers[e121.name] : null;
                    n52.renderers[e121.name] = t83 ? function(...n53) {
                        let r35 = e121.renderer.apply(this, n53);
                        false === r35 && (r35 = t83.apply(this, n53));
                        return r35;
                    } : e121.renderer;
                }
                if (e121.tokenizer) {
                    if (!e121.level || "block" !== e121.level && "inline" !== e121.level) throw new Error("extension level must be 'block' or 'inline'");
                    n52[e121.level] ? n52[e121.level].unshift(e121.tokenizer) : n52[e121.level] = [
                        e121.tokenizer
                    ];
                    e121.start && ("block" === e121.level ? n52.startBlock ? n52.startBlock.push(e121.start) : n52.startBlock = [
                        e121.start
                    ] : "inline" === e121.level && (n52.startInline ? n52.startInline.push(e121.start) : n52.startInline = [
                        e121.start
                    ]));
                }
                e121.childTokens && (n52.childTokens[e121.name] = e121.childTokens);
            });
        }
        if (e120.renderer) {
            const n54 = marked.defaults.renderer || new Renderer;
            for(const t in e120.renderer){
                const r36 = n54[t];
                n54[t] = (...s17)=>{
                    let i14 = e120.renderer[t].apply(n54, s17);
                    false === i14 && (i14 = r36.apply(n54, s17));
                    return i14;
                };
            }
            t82.renderer = n54;
        }
        if (e120.tokenizer) {
            const n55 = marked.defaults.tokenizer || new Tokenizer;
            for(const t in e120.tokenizer){
                const r37 = n55[t];
                n55[t] = (...s18)=>{
                    let i15 = e120.tokenizer[t].apply(n55, s18);
                    false === i15 && (i15 = r37.apply(n55, s18));
                    return i15;
                };
            }
            t82.tokenizer = n55;
        }
        if (e120.walkTokens) {
            const n56 = marked.defaults.walkTokens;
            t82.walkTokens = function(t84) {
                e120.walkTokens.call(this, t84);
                n56 && n56.call(this, t84);
            };
        }
        r34 && (t82.extensions = n52);
        marked.setOptions(t82);
    });
};
marked.walkTokens = function(e122, t85) {
    for (const n58 of e122){
        t85.call(marked, n58);
        switch(n58.type){
            case "table":
                for (const e124 of n58.header)marked.walkTokens(e124.tokens, t85);
                for (const e123 of n58.rows)for (const n57 of e123)marked.walkTokens(n57.tokens, t85);
                break;
            case "list":
                marked.walkTokens(n58.items, t85);
                break;
            default:
                marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[n58.type] ? marked.defaults.extensions.childTokens[n58.type].forEach(function(e) {
                    marked.walkTokens(n58[e], t85);
                }) : n58.tokens && marked.walkTokens(n58.tokens, t85);
        }
    }
};
marked.parseInline = function(e125, t86) {
    if ("undefined" === typeof e125 || null === e125) throw new Error("marked.parseInline(): input parameter is undefined or null");
    if ("string" !== typeof e125) throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(e125) + ", string expected");
    t86 = merge({}, marked.defaults, t86 || {});
    checkSanitizeDeprecation(t86);
    try {
        const n59 = Lexer.lexInline(e125, t86);
        t86.walkTokens && marked.walkTokens(n59, t86.walkTokens);
        return Parser.parseInline(n59, t86);
    } catch (e126) {
        e126.message += "\nPlease report this to https://github.com/markedjs/marked.";
        if (t86.silent) return "<p>An error occurred:</p><pre>" + escape(e126.message + "", true) + "</pre>";
        throw e126;
    }
};
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
marked.options;
marked.setOptions;
marked.use;
marked.walkTokens;
marked.parseInline;
Parser.parse;
Lexer.lex;
var r7 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var e5 = {};
var a6 = {
    exports: e5
};
(function(t113) {
    var o113 = e5;
    var s113 = true && a6.exports == o113 && a6;
    var u15 = "object" == typeof r7 && r7;
    u15.global !== u15 && u15.window !== u15 || (t113 = u15);
    var c112 = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var l15 = /[\x01-\x7F]/g;
    var i17 = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;
    var n38 = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
    var p113 = {
        "­": "shy",
        "‌": "zwnj",
        "‍": "zwj",
        "‎": "lrm",
        "⁣": "ic",
        "⁢": "it",
        "⁡": "af",
        "‏": "rlm",
        "​": "ZeroWidthSpace",
        "⁠": "NoBreak",
        "̑": "DownBreve",
        "⃛": "tdot",
        "⃜": "DotDot",
        "\t": "Tab",
        "\n": "NewLine",
        " ": "puncsp",
        " ": "MediumSpace",
        " ": "thinsp",
        " ": "hairsp",
        " ": "emsp13",
        " ": "ensp",
        " ": "emsp14",
        " ": "emsp",
        " ": "numsp",
        " ": "nbsp",
        "  ": "ThickSpace",
        "‾": "oline",
        _: "lowbar",
        "‐": "dash",
        "–": "ndash",
        "—": "mdash",
        "―": "horbar",
        ",": "comma",
        ";": "semi",
        "⁏": "bsemi",
        ":": "colon",
        "⩴": "Colone",
        "!": "excl",
        "¡": "iexcl",
        "?": "quest",
        "¿": "iquest",
        ".": "period",
        "‥": "nldr",
        "…": "mldr",
        "·": "middot",
        "'": "apos",
        "‘": "lsquo",
        "’": "rsquo",
        "‚": "sbquo",
        "‹": "lsaquo",
        "›": "rsaquo",
        '"': "quot",
        "“": "ldquo",
        "”": "rdquo",
        "„": "bdquo",
        "«": "laquo",
        "»": "raquo",
        "(": "lpar",
        ")": "rpar",
        "[": "lsqb",
        "]": "rsqb",
        "{": "lcub",
        "}": "rcub",
        "⌈": "lceil",
        "⌉": "rceil",
        "⌊": "lfloor",
        "⌋": "rfloor",
        "⦅": "lopar",
        "⦆": "ropar",
        "⦋": "lbrke",
        "⦌": "rbrke",
        "⦍": "lbrkslu",
        "⦎": "rbrksld",
        "⦏": "lbrksld",
        "⦐": "rbrkslu",
        "⦑": "langd",
        "⦒": "rangd",
        "⦓": "lparlt",
        "⦔": "rpargt",
        "⦕": "gtlPar",
        "⦖": "ltrPar",
        "⟦": "lobrk",
        "⟧": "robrk",
        "⟨": "lang",
        "⟩": "rang",
        "⟪": "Lang",
        "⟫": "Rang",
        "⟬": "loang",
        "⟭": "roang",
        "❲": "lbbrk",
        "❳": "rbbrk",
        "‖": "Vert",
        "§": "sect",
        "¶": "para",
        "@": "commat",
        "*": "ast",
        "/": "sol",
        undefined: null,
        "&": "amp",
        "#": "num",
        "%": "percnt",
        "‰": "permil",
        "‱": "pertenk",
        "†": "dagger",
        "‡": "Dagger",
        "•": "bull",
        "⁃": "hybull",
        "′": "prime",
        "″": "Prime",
        "‴": "tprime",
        "⁗": "qprime",
        "‵": "bprime",
        "⁁": "caret",
        "`": "grave",
        "´": "acute",
        "˜": "tilde",
        "^": "Hat",
        "¯": "macr",
        "˘": "breve",
        "˙": "dot",
        "¨": "die",
        "˚": "ring",
        "˝": "dblac",
        "¸": "cedil",
        "˛": "ogon",
        "ˆ": "circ",
        "ˇ": "caron",
        "°": "deg",
        "©": "copy",
        "®": "reg",
        "℗": "copysr",
        "℘": "wp",
        "℞": "rx",
        "℧": "mho",
        "℩": "iiota",
        "←": "larr",
        "↚": "nlarr",
        "→": "rarr",
        "↛": "nrarr",
        "↑": "uarr",
        "↓": "darr",
        "↔": "harr",
        "↮": "nharr",
        "↕": "varr",
        "↖": "nwarr",
        "↗": "nearr",
        "↘": "searr",
        "↙": "swarr",
        "↝": "rarrw",
        "↝̸": "nrarrw",
        "↞": "Larr",
        "↟": "Uarr",
        "↠": "Rarr",
        "↡": "Darr",
        "↢": "larrtl",
        "↣": "rarrtl",
        "↤": "mapstoleft",
        "↥": "mapstoup",
        "↦": "map",
        "↧": "mapstodown",
        "↩": "larrhk",
        "↪": "rarrhk",
        "↫": "larrlp",
        "↬": "rarrlp",
        "↭": "harrw",
        "↰": "lsh",
        "↱": "rsh",
        "↲": "ldsh",
        "↳": "rdsh",
        "↵": "crarr",
        "↶": "cularr",
        "↷": "curarr",
        "↺": "olarr",
        "↻": "orarr",
        "↼": "lharu",
        "↽": "lhard",
        "↾": "uharr",
        "↿": "uharl",
        "⇀": "rharu",
        "⇁": "rhard",
        "⇂": "dharr",
        "⇃": "dharl",
        "⇄": "rlarr",
        "⇅": "udarr",
        "⇆": "lrarr",
        "⇇": "llarr",
        "⇈": "uuarr",
        "⇉": "rrarr",
        "⇊": "ddarr",
        "⇋": "lrhar",
        "⇌": "rlhar",
        "⇐": "lArr",
        "⇍": "nlArr",
        "⇑": "uArr",
        "⇒": "rArr",
        "⇏": "nrArr",
        "⇓": "dArr",
        "⇔": "iff",
        "⇎": "nhArr",
        "⇕": "vArr",
        "⇖": "nwArr",
        "⇗": "neArr",
        "⇘": "seArr",
        "⇙": "swArr",
        "⇚": "lAarr",
        "⇛": "rAarr",
        "⇝": "zigrarr",
        "⇤": "larrb",
        "⇥": "rarrb",
        "⇵": "duarr",
        "⇽": "loarr",
        "⇾": "roarr",
        "⇿": "hoarr",
        "∀": "forall",
        "∁": "comp",
        "∂": "part",
        "∂̸": "npart",
        "∃": "exist",
        "∄": "nexist",
        "∅": "empty",
        "∇": "Del",
        "∈": "in",
        "∉": "notin",
        "∋": "ni",
        "∌": "notni",
        "϶": "bepsi",
        "∏": "prod",
        "∐": "coprod",
        "∑": "sum",
        "+": "plus",
        "±": "pm",
        "÷": "div",
        "×": "times",
        "<": "lt",
        "≮": "nlt",
        "<⃒": "nvlt",
        "=": "equals",
        "≠": "ne",
        "=⃥": "bne",
        "⩵": "Equal",
        ">": "gt",
        "≯": "ngt",
        ">⃒": "nvgt",
        "¬": "not",
        "|": "vert",
        "¦": "brvbar",
        "−": "minus",
        "∓": "mp",
        "∔": "plusdo",
        "⁄": "frasl",
        "∖": "setmn",
        "∗": "lowast",
        "∘": "compfn",
        "√": "Sqrt",
        "∝": "prop",
        "∞": "infin",
        "∟": "angrt",
        "∠": "ang",
        "∠⃒": "nang",
        "∡": "angmsd",
        "∢": "angsph",
        "∣": "mid",
        "∤": "nmid",
        "∥": "par",
        "∦": "npar",
        "∧": "and",
        "∨": "or",
        "∩": "cap",
        "∩︀": "caps",
        "∪": "cup",
        "∪︀": "cups",
        "∫": "int",
        "∬": "Int",
        "∭": "tint",
        "⨌": "qint",
        "∮": "oint",
        "∯": "Conint",
        "∰": "Cconint",
        "∱": "cwint",
        "∲": "cwconint",
        "∳": "awconint",
        "∴": "there4",
        "∵": "becaus",
        "∶": "ratio",
        "∷": "Colon",
        "∸": "minusd",
        "∺": "mDDot",
        "∻": "homtht",
        "∼": "sim",
        "≁": "nsim",
        "∼⃒": "nvsim",
        "∽": "bsim",
        "∽̱": "race",
        "∾": "ac",
        "∾̳": "acE",
        "∿": "acd",
        "≀": "wr",
        "≂": "esim",
        "≂̸": "nesim",
        "≃": "sime",
        "≄": "nsime",
        "≅": "cong",
        "≇": "ncong",
        "≆": "simne",
        "≈": "ap",
        "≉": "nap",
        "≊": "ape",
        "≋": "apid",
        "≋̸": "napid",
        "≌": "bcong",
        "≍": "CupCap",
        "≭": "NotCupCap",
        "≍⃒": "nvap",
        "≎": "bump",
        "≎̸": "nbump",
        "≏": "bumpe",
        "≏̸": "nbumpe",
        "≐": "doteq",
        "≐̸": "nedot",
        "≑": "eDot",
        "≒": "efDot",
        "≓": "erDot",
        "≔": "colone",
        "≕": "ecolon",
        "≖": "ecir",
        "≗": "cire",
        "≙": "wedgeq",
        "≚": "veeeq",
        "≜": "trie",
        "≟": "equest",
        "≡": "equiv",
        "≢": "nequiv",
        "≡⃥": "bnequiv",
        "≤": "le",
        "≰": "nle",
        "≤⃒": "nvle",
        "≥": "ge",
        "≱": "nge",
        "≥⃒": "nvge",
        "≦": "lE",
        "≦̸": "nlE",
        "≧": "gE",
        "≧̸": "ngE",
        "≨︀": "lvnE",
        "≨": "lnE",
        "≩": "gnE",
        "≩︀": "gvnE",
        "≪": "ll",
        "≪̸": "nLtv",
        "≪⃒": "nLt",
        "≫": "gg",
        "≫̸": "nGtv",
        "≫⃒": "nGt",
        "≬": "twixt",
        "≲": "lsim",
        "≴": "nlsim",
        "≳": "gsim",
        "≵": "ngsim",
        "≶": "lg",
        "≸": "ntlg",
        "≷": "gl",
        "≹": "ntgl",
        "≺": "pr",
        "⊀": "npr",
        "≻": "sc",
        "⊁": "nsc",
        "≼": "prcue",
        "⋠": "nprcue",
        "≽": "sccue",
        "⋡": "nsccue",
        "≾": "prsim",
        "≿": "scsim",
        "≿̸": "NotSucceedsTilde",
        "⊂": "sub",
        "⊄": "nsub",
        "⊂⃒": "vnsub",
        "⊃": "sup",
        "⊅": "nsup",
        "⊃⃒": "vnsup",
        "⊆": "sube",
        "⊈": "nsube",
        "⊇": "supe",
        "⊉": "nsupe",
        "⊊︀": "vsubne",
        "⊊": "subne",
        "⊋︀": "vsupne",
        "⊋": "supne",
        "⊍": "cupdot",
        "⊎": "uplus",
        "⊏": "sqsub",
        "⊏̸": "NotSquareSubset",
        "⊐": "sqsup",
        "⊐̸": "NotSquareSuperset",
        "⊑": "sqsube",
        "⋢": "nsqsube",
        "⊒": "sqsupe",
        "⋣": "nsqsupe",
        "⊓": "sqcap",
        "⊓︀": "sqcaps",
        "⊔": "sqcup",
        "⊔︀": "sqcups",
        "⊕": "oplus",
        "⊖": "ominus",
        "⊗": "otimes",
        "⊘": "osol",
        "⊙": "odot",
        "⊚": "ocir",
        "⊛": "oast",
        "⊝": "odash",
        "⊞": "plusb",
        "⊟": "minusb",
        "⊠": "timesb",
        "⊡": "sdotb",
        "⊢": "vdash",
        "⊬": "nvdash",
        "⊣": "dashv",
        "⊤": "top",
        "⊥": "bot",
        "⊧": "models",
        "⊨": "vDash",
        "⊭": "nvDash",
        "⊩": "Vdash",
        "⊮": "nVdash",
        "⊪": "Vvdash",
        "⊫": "VDash",
        "⊯": "nVDash",
        "⊰": "prurel",
        "⊲": "vltri",
        "⋪": "nltri",
        "⊳": "vrtri",
        "⋫": "nrtri",
        "⊴": "ltrie",
        "⋬": "nltrie",
        "⊴⃒": "nvltrie",
        "⊵": "rtrie",
        "⋭": "nrtrie",
        "⊵⃒": "nvrtrie",
        "⊶": "origof",
        "⊷": "imof",
        "⊸": "mumap",
        "⊹": "hercon",
        "⊺": "intcal",
        "⊻": "veebar",
        "⊽": "barvee",
        "⊾": "angrtvb",
        "⊿": "lrtri",
        "⋀": "Wedge",
        "⋁": "Vee",
        "⋂": "xcap",
        "⋃": "xcup",
        "⋄": "diam",
        "⋅": "sdot",
        "⋆": "Star",
        "⋇": "divonx",
        "⋈": "bowtie",
        "⋉": "ltimes",
        "⋊": "rtimes",
        "⋋": "lthree",
        "⋌": "rthree",
        "⋍": "bsime",
        "⋎": "cuvee",
        "⋏": "cuwed",
        "⋐": "Sub",
        "⋑": "Sup",
        "⋒": "Cap",
        "⋓": "Cup",
        "⋔": "fork",
        "⋕": "epar",
        "⋖": "ltdot",
        "⋗": "gtdot",
        "⋘": "Ll",
        "⋘̸": "nLl",
        "⋙": "Gg",
        "⋙̸": "nGg",
        "⋚︀": "lesg",
        "⋚": "leg",
        "⋛": "gel",
        "⋛︀": "gesl",
        "⋞": "cuepr",
        "⋟": "cuesc",
        "⋦": "lnsim",
        "⋧": "gnsim",
        "⋨": "prnsim",
        "⋩": "scnsim",
        "⋮": "vellip",
        "⋯": "ctdot",
        "⋰": "utdot",
        "⋱": "dtdot",
        "⋲": "disin",
        "⋳": "isinsv",
        "⋴": "isins",
        "⋵": "isindot",
        "⋵̸": "notindot",
        "⋶": "notinvc",
        "⋷": "notinvb",
        "⋹": "isinE",
        "⋹̸": "notinE",
        "⋺": "nisd",
        "⋻": "xnis",
        "⋼": "nis",
        "⋽": "notnivc",
        "⋾": "notnivb",
        "⌅": "barwed",
        "⌆": "Barwed",
        "⌌": "drcrop",
        "⌍": "dlcrop",
        "⌎": "urcrop",
        "⌏": "ulcrop",
        "⌐": "bnot",
        "⌒": "profline",
        "⌓": "profsurf",
        "⌕": "telrec",
        "⌖": "target",
        "⌜": "ulcorn",
        "⌝": "urcorn",
        "⌞": "dlcorn",
        "⌟": "drcorn",
        "⌢": "frown",
        "⌣": "smile",
        "⌭": "cylcty",
        "⌮": "profalar",
        "⌶": "topbot",
        "⌽": "ovbar",
        "⌿": "solbar",
        "⍼": "angzarr",
        "⎰": "lmoust",
        "⎱": "rmoust",
        "⎴": "tbrk",
        "⎵": "bbrk",
        "⎶": "bbrktbrk",
        "⏜": "OverParenthesis",
        "⏝": "UnderParenthesis",
        "⏞": "OverBrace",
        "⏟": "UnderBrace",
        "⏢": "trpezium",
        "⏧": "elinters",
        "␣": "blank",
        "─": "boxh",
        "│": "boxv",
        "┌": "boxdr",
        "┐": "boxdl",
        "└": "boxur",
        "┘": "boxul",
        "├": "boxvr",
        "┤": "boxvl",
        "┬": "boxhd",
        "┴": "boxhu",
        "┼": "boxvh",
        "═": "boxH",
        "║": "boxV",
        "╒": "boxdR",
        "╓": "boxDr",
        "╔": "boxDR",
        "╕": "boxdL",
        "╖": "boxDl",
        "╗": "boxDL",
        "╘": "boxuR",
        "╙": "boxUr",
        "╚": "boxUR",
        "╛": "boxuL",
        "╜": "boxUl",
        "╝": "boxUL",
        "╞": "boxvR",
        "╟": "boxVr",
        "╠": "boxVR",
        "╡": "boxvL",
        "╢": "boxVl",
        "╣": "boxVL",
        "╤": "boxHd",
        "╥": "boxhD",
        "╦": "boxHD",
        "╧": "boxHu",
        "╨": "boxhU",
        "╩": "boxHU",
        "╪": "boxvH",
        "╫": "boxVh",
        "╬": "boxVH",
        "▀": "uhblk",
        "▄": "lhblk",
        "█": "block",
        "░": "blk14",
        "▒": "blk12",
        "▓": "blk34",
        "□": "squ",
        "▪": "squf",
        "▫": "EmptyVerySmallSquare",
        "▭": "rect",
        "▮": "marker",
        "▱": "fltns",
        "△": "xutri",
        "▴": "utrif",
        "▵": "utri",
        "▸": "rtrif",
        "▹": "rtri",
        "▽": "xdtri",
        "▾": "dtrif",
        "▿": "dtri",
        "◂": "ltrif",
        "◃": "ltri",
        "◊": "loz",
        "○": "cir",
        "◬": "tridot",
        "◯": "xcirc",
        "◸": "ultri",
        "◹": "urtri",
        "◺": "lltri",
        "◻": "EmptySmallSquare",
        "◼": "FilledSmallSquare",
        "★": "starf",
        "☆": "star",
        "☎": "phone",
        "♀": "female",
        "♂": "male",
        "♠": "spades",
        "♣": "clubs",
        "♥": "hearts",
        "♦": "diams",
        "♪": "sung",
        "✓": "check",
        "✗": "cross",
        "✠": "malt",
        "✶": "sext",
        "❘": "VerticalSeparator",
        "⟈": "bsolhsub",
        "⟉": "suphsol",
        "⟵": "xlarr",
        "⟶": "xrarr",
        "⟷": "xharr",
        "⟸": "xlArr",
        "⟹": "xrArr",
        "⟺": "xhArr",
        "⟼": "xmap",
        "⟿": "dzigrarr",
        "⤂": "nvlArr",
        "⤃": "nvrArr",
        "⤄": "nvHarr",
        "⤅": "Map",
        "⤌": "lbarr",
        "⤍": "rbarr",
        "⤎": "lBarr",
        "⤏": "rBarr",
        "⤐": "RBarr",
        "⤑": "DDotrahd",
        "⤒": "UpArrowBar",
        "⤓": "DownArrowBar",
        "⤖": "Rarrtl",
        "⤙": "latail",
        "⤚": "ratail",
        "⤛": "lAtail",
        "⤜": "rAtail",
        "⤝": "larrfs",
        "⤞": "rarrfs",
        "⤟": "larrbfs",
        "⤠": "rarrbfs",
        "⤣": "nwarhk",
        "⤤": "nearhk",
        "⤥": "searhk",
        "⤦": "swarhk",
        "⤧": "nwnear",
        "⤨": "toea",
        "⤩": "tosa",
        "⤪": "swnwar",
        "⤳": "rarrc",
        "⤳̸": "nrarrc",
        "⤵": "cudarrr",
        "⤶": "ldca",
        "⤷": "rdca",
        "⤸": "cudarrl",
        "⤹": "larrpl",
        "⤼": "curarrm",
        "⤽": "cularrp",
        "⥅": "rarrpl",
        "⥈": "harrcir",
        "⥉": "Uarrocir",
        "⥊": "lurdshar",
        "⥋": "ldrushar",
        "⥎": "LeftRightVector",
        "⥏": "RightUpDownVector",
        "⥐": "DownLeftRightVector",
        "⥑": "LeftUpDownVector",
        "⥒": "LeftVectorBar",
        "⥓": "RightVectorBar",
        "⥔": "RightUpVectorBar",
        "⥕": "RightDownVectorBar",
        "⥖": "DownLeftVectorBar",
        "⥗": "DownRightVectorBar",
        "⥘": "LeftUpVectorBar",
        "⥙": "LeftDownVectorBar",
        "⥚": "LeftTeeVector",
        "⥛": "RightTeeVector",
        "⥜": "RightUpTeeVector",
        "⥝": "RightDownTeeVector",
        "⥞": "DownLeftTeeVector",
        "⥟": "DownRightTeeVector",
        "⥠": "LeftUpTeeVector",
        "⥡": "LeftDownTeeVector",
        "⥢": "lHar",
        "⥣": "uHar",
        "⥤": "rHar",
        "⥥": "dHar",
        "⥦": "luruhar",
        "⥧": "ldrdhar",
        "⥨": "ruluhar",
        "⥩": "rdldhar",
        "⥪": "lharul",
        "⥫": "llhard",
        "⥬": "rharul",
        "⥭": "lrhard",
        "⥮": "udhar",
        "⥯": "duhar",
        "⥰": "RoundImplies",
        "⥱": "erarr",
        "⥲": "simrarr",
        "⥳": "larrsim",
        "⥴": "rarrsim",
        "⥵": "rarrap",
        "⥶": "ltlarr",
        "⥸": "gtrarr",
        "⥹": "subrarr",
        "⥻": "suplarr",
        "⥼": "lfisht",
        "⥽": "rfisht",
        "⥾": "ufisht",
        "⥿": "dfisht",
        "⦚": "vzigzag",
        "⦜": "vangrt",
        "⦝": "angrtvbd",
        "⦤": "ange",
        "⦥": "range",
        "⦦": "dwangle",
        "⦧": "uwangle",
        "⦨": "angmsdaa",
        "⦩": "angmsdab",
        "⦪": "angmsdac",
        "⦫": "angmsdad",
        "⦬": "angmsdae",
        "⦭": "angmsdaf",
        "⦮": "angmsdag",
        "⦯": "angmsdah",
        "⦰": "bemptyv",
        "⦱": "demptyv",
        "⦲": "cemptyv",
        "⦳": "raemptyv",
        "⦴": "laemptyv",
        "⦵": "ohbar",
        "⦶": "omid",
        "⦷": "opar",
        "⦹": "operp",
        "⦻": "olcross",
        "⦼": "odsold",
        "⦾": "olcir",
        "⦿": "ofcir",
        "⧀": "olt",
        "⧁": "ogt",
        "⧂": "cirscir",
        "⧃": "cirE",
        "⧄": "solb",
        "⧅": "bsolb",
        "⧉": "boxbox",
        "⧍": "trisb",
        "⧎": "rtriltri",
        "⧏": "LeftTriangleBar",
        "⧏̸": "NotLeftTriangleBar",
        "⧐": "RightTriangleBar",
        "⧐̸": "NotRightTriangleBar",
        "⧜": "iinfin",
        "⧝": "infintie",
        "⧞": "nvinfin",
        "⧣": "eparsl",
        "⧤": "smeparsl",
        "⧥": "eqvparsl",
        "⧫": "lozf",
        "⧴": "RuleDelayed",
        "⧶": "dsol",
        "⨀": "xodot",
        "⨁": "xoplus",
        "⨂": "xotime",
        "⨄": "xuplus",
        "⨆": "xsqcup",
        "⨍": "fpartint",
        "⨐": "cirfnint",
        "⨑": "awint",
        "⨒": "rppolint",
        "⨓": "scpolint",
        "⨔": "npolint",
        "⨕": "pointint",
        "⨖": "quatint",
        "⨗": "intlarhk",
        "⨢": "pluscir",
        "⨣": "plusacir",
        "⨤": "simplus",
        "⨥": "plusdu",
        "⨦": "plussim",
        "⨧": "plustwo",
        "⨩": "mcomma",
        "⨪": "minusdu",
        "⨭": "loplus",
        "⨮": "roplus",
        "⨯": "Cross",
        "⨰": "timesd",
        "⨱": "timesbar",
        "⨳": "smashp",
        "⨴": "lotimes",
        "⨵": "rotimes",
        "⨶": "otimesas",
        "⨷": "Otimes",
        "⨸": "odiv",
        "⨹": "triplus",
        "⨺": "triminus",
        "⨻": "tritime",
        "⨼": "iprod",
        "⨿": "amalg",
        "⩀": "capdot",
        "⩂": "ncup",
        "⩃": "ncap",
        "⩄": "capand",
        "⩅": "cupor",
        "⩆": "cupcap",
        "⩇": "capcup",
        "⩈": "cupbrcap",
        "⩉": "capbrcup",
        "⩊": "cupcup",
        "⩋": "capcap",
        "⩌": "ccups",
        "⩍": "ccaps",
        "⩐": "ccupssm",
        "⩓": "And",
        "⩔": "Or",
        "⩕": "andand",
        "⩖": "oror",
        "⩗": "orslope",
        "⩘": "andslope",
        "⩚": "andv",
        "⩛": "orv",
        "⩜": "andd",
        "⩝": "ord",
        "⩟": "wedbar",
        "⩦": "sdote",
        "⩪": "simdot",
        "⩭": "congdot",
        "⩭̸": "ncongdot",
        "⩮": "easter",
        "⩯": "apacir",
        "⩰": "apE",
        "⩰̸": "napE",
        "⩱": "eplus",
        "⩲": "pluse",
        "⩳": "Esim",
        "⩷": "eDDot",
        "⩸": "equivDD",
        "⩹": "ltcir",
        "⩺": "gtcir",
        "⩻": "ltquest",
        "⩼": "gtquest",
        "⩽": "les",
        "⩽̸": "nles",
        "⩾": "ges",
        "⩾̸": "nges",
        "⩿": "lesdot",
        "⪀": "gesdot",
        "⪁": "lesdoto",
        "⪂": "gesdoto",
        "⪃": "lesdotor",
        "⪄": "gesdotol",
        "⪅": "lap",
        "⪆": "gap",
        "⪇": "lne",
        "⪈": "gne",
        "⪉": "lnap",
        "⪊": "gnap",
        "⪋": "lEg",
        "⪌": "gEl",
        "⪍": "lsime",
        "⪎": "gsime",
        "⪏": "lsimg",
        "⪐": "gsiml",
        "⪑": "lgE",
        "⪒": "glE",
        "⪓": "lesges",
        "⪔": "gesles",
        "⪕": "els",
        "⪖": "egs",
        "⪗": "elsdot",
        "⪘": "egsdot",
        "⪙": "el",
        "⪚": "eg",
        "⪝": "siml",
        "⪞": "simg",
        "⪟": "simlE",
        "⪠": "simgE",
        "⪡": "LessLess",
        "⪡̸": "NotNestedLessLess",
        "⪢": "GreaterGreater",
        "⪢̸": "NotNestedGreaterGreater",
        "⪤": "glj",
        "⪥": "gla",
        "⪦": "ltcc",
        "⪧": "gtcc",
        "⪨": "lescc",
        "⪩": "gescc",
        "⪪": "smt",
        "⪫": "lat",
        "⪬": "smte",
        "⪬︀": "smtes",
        "⪭": "late",
        "⪭︀": "lates",
        "⪮": "bumpE",
        "⪯": "pre",
        "⪯̸": "npre",
        "⪰": "sce",
        "⪰̸": "nsce",
        "⪳": "prE",
        "⪴": "scE",
        "⪵": "prnE",
        "⪶": "scnE",
        "⪷": "prap",
        "⪸": "scap",
        "⪹": "prnap",
        "⪺": "scnap",
        "⪻": "Pr",
        "⪼": "Sc",
        "⪽": "subdot",
        "⪾": "supdot",
        "⪿": "subplus",
        "⫀": "supplus",
        "⫁": "submult",
        "⫂": "supmult",
        "⫃": "subedot",
        "⫄": "supedot",
        "⫅": "subE",
        "⫅̸": "nsubE",
        "⫆": "supE",
        "⫆̸": "nsupE",
        "⫇": "subsim",
        "⫈": "supsim",
        "⫋︀": "vsubnE",
        "⫋": "subnE",
        "⫌︀": "vsupnE",
        "⫌": "supnE",
        "⫏": "csub",
        "⫐": "csup",
        "⫑": "csube",
        "⫒": "csupe",
        "⫓": "subsup",
        "⫔": "supsub",
        "⫕": "subsub",
        "⫖": "supsup",
        "⫗": "suphsub",
        "⫘": "supdsub",
        "⫙": "forkv",
        "⫚": "topfork",
        "⫛": "mlcp",
        "⫤": "Dashv",
        "⫦": "Vdashl",
        "⫧": "Barv",
        "⫨": "vBar",
        "⫩": "vBarv",
        "⫫": "Vbar",
        "⫬": "Not",
        "⫭": "bNot",
        "⫮": "rnmid",
        "⫯": "cirmid",
        "⫰": "midcir",
        "⫱": "topcir",
        "⫲": "nhpar",
        "⫳": "parsim",
        "⫽": "parsl",
        "⫽⃥": "nparsl",
        "♭": "flat",
        "♮": "natur",
        "♯": "sharp",
        "¤": "curren",
        "¢": "cent",
        $: "dollar",
        "£": "pound",
        "¥": "yen",
        "€": "euro",
        "¹": "sup1",
        "½": "half",
        "⅓": "frac13",
        "¼": "frac14",
        "⅕": "frac15",
        "⅙": "frac16",
        "⅛": "frac18",
        "²": "sup2",
        "⅔": "frac23",
        "⅖": "frac25",
        "³": "sup3",
        "¾": "frac34",
        "⅗": "frac35",
        "⅜": "frac38",
        "⅘": "frac45",
        "⅚": "frac56",
        "⅝": "frac58",
        "⅞": "frac78",
        "𝒶": "ascr",
        "𝕒": "aopf",
        "𝔞": "afr",
        "𝔸": "Aopf",
        "𝔄": "Afr",
        "𝒜": "Ascr",
        "ª": "ordf",
        "á": "aacute",
        "Á": "Aacute",
        "à": "agrave",
        "À": "Agrave",
        "ă": "abreve",
        "Ă": "Abreve",
        "â": "acirc",
        "Â": "Acirc",
        "å": "aring",
        "Å": "angst",
        "ä": "auml",
        "Ä": "Auml",
        "ã": "atilde",
        "Ã": "Atilde",
        "ą": "aogon",
        "Ą": "Aogon",
        "ā": "amacr",
        "Ā": "Amacr",
        "æ": "aelig",
        "Æ": "AElig",
        "𝒷": "bscr",
        "𝕓": "bopf",
        "𝔟": "bfr",
        "𝔹": "Bopf",
        "ℬ": "Bscr",
        "𝔅": "Bfr",
        "𝔠": "cfr",
        "𝒸": "cscr",
        "𝕔": "copf",
        "ℭ": "Cfr",
        "𝒞": "Cscr",
        "ℂ": "Copf",
        "ć": "cacute",
        "Ć": "Cacute",
        "ĉ": "ccirc",
        "Ĉ": "Ccirc",
        "č": "ccaron",
        "Č": "Ccaron",
        "ċ": "cdot",
        "Ċ": "Cdot",
        "ç": "ccedil",
        "Ç": "Ccedil",
        "℅": "incare",
        "𝔡": "dfr",
        "ⅆ": "dd",
        "𝕕": "dopf",
        "𝒹": "dscr",
        "𝒟": "Dscr",
        "𝔇": "Dfr",
        "ⅅ": "DD",
        "𝔻": "Dopf",
        "ď": "dcaron",
        "Ď": "Dcaron",
        "đ": "dstrok",
        "Đ": "Dstrok",
        "ð": "eth",
        "Ð": "ETH",
        "ⅇ": "ee",
        "ℯ": "escr",
        "𝔢": "efr",
        "𝕖": "eopf",
        "ℰ": "Escr",
        "𝔈": "Efr",
        "𝔼": "Eopf",
        "é": "eacute",
        "É": "Eacute",
        "è": "egrave",
        "È": "Egrave",
        "ê": "ecirc",
        "Ê": "Ecirc",
        "ě": "ecaron",
        "Ě": "Ecaron",
        "ë": "euml",
        "Ë": "Euml",
        "ė": "edot",
        "Ė": "Edot",
        "ę": "eogon",
        "Ę": "Eogon",
        "ē": "emacr",
        "Ē": "Emacr",
        "𝔣": "ffr",
        "𝕗": "fopf",
        "𝒻": "fscr",
        "𝔉": "Ffr",
        "𝔽": "Fopf",
        "ℱ": "Fscr",
        "ﬀ": "fflig",
        "ﬃ": "ffilig",
        "ﬄ": "ffllig",
        "ﬁ": "filig",
        fj: "fjlig",
        "ﬂ": "fllig",
        "ƒ": "fnof",
        "ℊ": "gscr",
        "𝕘": "gopf",
        "𝔤": "gfr",
        "𝒢": "Gscr",
        "𝔾": "Gopf",
        "𝔊": "Gfr",
        "ǵ": "gacute",
        "ğ": "gbreve",
        "Ğ": "Gbreve",
        "ĝ": "gcirc",
        "Ĝ": "Gcirc",
        "ġ": "gdot",
        "Ġ": "Gdot",
        "Ģ": "Gcedil",
        "𝔥": "hfr",
        "ℎ": "planckh",
        "𝒽": "hscr",
        "𝕙": "hopf",
        "ℋ": "Hscr",
        "ℌ": "Hfr",
        "ℍ": "Hopf",
        "ĥ": "hcirc",
        "Ĥ": "Hcirc",
        "ℏ": "hbar",
        "ħ": "hstrok",
        "Ħ": "Hstrok",
        "𝕚": "iopf",
        "𝔦": "ifr",
        "𝒾": "iscr",
        "ⅈ": "ii",
        "𝕀": "Iopf",
        "ℐ": "Iscr",
        "ℑ": "Im",
        "í": "iacute",
        "Í": "Iacute",
        "ì": "igrave",
        "Ì": "Igrave",
        "î": "icirc",
        "Î": "Icirc",
        "ï": "iuml",
        "Ï": "Iuml",
        "ĩ": "itilde",
        "Ĩ": "Itilde",
        "İ": "Idot",
        "į": "iogon",
        "Į": "Iogon",
        "ī": "imacr",
        "Ī": "Imacr",
        "ĳ": "ijlig",
        "Ĳ": "IJlig",
        "ı": "imath",
        "𝒿": "jscr",
        "𝕛": "jopf",
        "𝔧": "jfr",
        "𝒥": "Jscr",
        "𝔍": "Jfr",
        "𝕁": "Jopf",
        "ĵ": "jcirc",
        "Ĵ": "Jcirc",
        "ȷ": "jmath",
        "𝕜": "kopf",
        "𝓀": "kscr",
        "𝔨": "kfr",
        "𝒦": "Kscr",
        "𝕂": "Kopf",
        "𝔎": "Kfr",
        "ķ": "kcedil",
        "Ķ": "Kcedil",
        "𝔩": "lfr",
        "𝓁": "lscr",
        "ℓ": "ell",
        "𝕝": "lopf",
        "ℒ": "Lscr",
        "𝔏": "Lfr",
        "𝕃": "Lopf",
        "ĺ": "lacute",
        "Ĺ": "Lacute",
        "ľ": "lcaron",
        "Ľ": "Lcaron",
        "ļ": "lcedil",
        "Ļ": "Lcedil",
        "ł": "lstrok",
        "Ł": "Lstrok",
        "ŀ": "lmidot",
        "Ŀ": "Lmidot",
        "𝔪": "mfr",
        "𝕞": "mopf",
        "𝓂": "mscr",
        "𝔐": "Mfr",
        "𝕄": "Mopf",
        "ℳ": "Mscr",
        "𝔫": "nfr",
        "𝕟": "nopf",
        "𝓃": "nscr",
        "ℕ": "Nopf",
        "𝒩": "Nscr",
        "𝔑": "Nfr",
        "ń": "nacute",
        "Ń": "Nacute",
        "ň": "ncaron",
        "Ň": "Ncaron",
        "ñ": "ntilde",
        "Ñ": "Ntilde",
        "ņ": "ncedil",
        "Ņ": "Ncedil",
        "№": "numero",
        "ŋ": "eng",
        "Ŋ": "ENG",
        "𝕠": "oopf",
        "𝔬": "ofr",
        "ℴ": "oscr",
        "𝒪": "Oscr",
        "𝔒": "Ofr",
        "𝕆": "Oopf",
        "º": "ordm",
        "ó": "oacute",
        "Ó": "Oacute",
        "ò": "ograve",
        "Ò": "Ograve",
        "ô": "ocirc",
        "Ô": "Ocirc",
        "ö": "ouml",
        "Ö": "Ouml",
        "ő": "odblac",
        "Ő": "Odblac",
        "õ": "otilde",
        "Õ": "Otilde",
        "ø": "oslash",
        "Ø": "Oslash",
        "ō": "omacr",
        "Ō": "Omacr",
        "œ": "oelig",
        "Œ": "OElig",
        "𝔭": "pfr",
        "𝓅": "pscr",
        "𝕡": "popf",
        "ℙ": "Popf",
        "𝔓": "Pfr",
        "𝒫": "Pscr",
        "𝕢": "qopf",
        "𝔮": "qfr",
        "𝓆": "qscr",
        "𝒬": "Qscr",
        "𝔔": "Qfr",
        "ℚ": "Qopf",
        "ĸ": "kgreen",
        "𝔯": "rfr",
        "𝕣": "ropf",
        "𝓇": "rscr",
        "ℛ": "Rscr",
        "ℜ": "Re",
        "ℝ": "Ropf",
        "ŕ": "racute",
        "Ŕ": "Racute",
        "ř": "rcaron",
        "Ř": "Rcaron",
        "ŗ": "rcedil",
        "Ŗ": "Rcedil",
        "𝕤": "sopf",
        "𝓈": "sscr",
        "𝔰": "sfr",
        "𝕊": "Sopf",
        "𝔖": "Sfr",
        "𝒮": "Sscr",
        "Ⓢ": "oS",
        "ś": "sacute",
        "Ś": "Sacute",
        "ŝ": "scirc",
        "Ŝ": "Scirc",
        "š": "scaron",
        "Š": "Scaron",
        "ş": "scedil",
        "Ş": "Scedil",
        "ß": "szlig",
        "𝔱": "tfr",
        "𝓉": "tscr",
        "𝕥": "topf",
        "𝒯": "Tscr",
        "𝔗": "Tfr",
        "𝕋": "Topf",
        "ť": "tcaron",
        "Ť": "Tcaron",
        "ţ": "tcedil",
        "Ţ": "Tcedil",
        "™": "trade",
        "ŧ": "tstrok",
        "Ŧ": "Tstrok",
        "𝓊": "uscr",
        "𝕦": "uopf",
        "𝔲": "ufr",
        "𝕌": "Uopf",
        "𝔘": "Ufr",
        "𝒰": "Uscr",
        "ú": "uacute",
        "Ú": "Uacute",
        "ù": "ugrave",
        "Ù": "Ugrave",
        "ŭ": "ubreve",
        "Ŭ": "Ubreve",
        "û": "ucirc",
        "Û": "Ucirc",
        "ů": "uring",
        "Ů": "Uring",
        "ü": "uuml",
        "Ü": "Uuml",
        "ű": "udblac",
        "Ű": "Udblac",
        "ũ": "utilde",
        "Ũ": "Utilde",
        "ų": "uogon",
        "Ų": "Uogon",
        "ū": "umacr",
        "Ū": "Umacr",
        "𝔳": "vfr",
        "𝕧": "vopf",
        "𝓋": "vscr",
        "𝔙": "Vfr",
        "𝕍": "Vopf",
        "𝒱": "Vscr",
        "𝕨": "wopf",
        "𝓌": "wscr",
        "𝔴": "wfr",
        "𝒲": "Wscr",
        "𝕎": "Wopf",
        "𝔚": "Wfr",
        "ŵ": "wcirc",
        "Ŵ": "Wcirc",
        "𝔵": "xfr",
        "𝓍": "xscr",
        "𝕩": "xopf",
        "𝕏": "Xopf",
        "𝔛": "Xfr",
        "𝒳": "Xscr",
        "𝔶": "yfr",
        "𝓎": "yscr",
        "𝕪": "yopf",
        "𝒴": "Yscr",
        "𝔜": "Yfr",
        "𝕐": "Yopf",
        "ý": "yacute",
        "Ý": "Yacute",
        "ŷ": "ycirc",
        "Ŷ": "Ycirc",
        "ÿ": "yuml",
        "Ÿ": "Yuml",
        "𝓏": "zscr",
        "𝔷": "zfr",
        "𝕫": "zopf",
        "ℨ": "Zfr",
        "ℤ": "Zopf",
        "𝒵": "Zscr",
        "ź": "zacute",
        "Ź": "Zacute",
        "ž": "zcaron",
        "Ž": "Zcaron",
        "ż": "zdot",
        "Ż": "Zdot",
        "Ƶ": "imped",
        "þ": "thorn",
        "Þ": "THORN",
        "ŉ": "napos",
        "α": "alpha",
        "Α": "Alpha",
        "β": "beta",
        "Β": "Beta",
        "γ": "gamma",
        "Γ": "Gamma",
        "δ": "delta",
        "Δ": "Delta",
        "ε": "epsi",
        "ϵ": "epsiv",
        "Ε": "Epsilon",
        "ϝ": "gammad",
        "Ϝ": "Gammad",
        "ζ": "zeta",
        "Ζ": "Zeta",
        "η": "eta",
        "Η": "Eta",
        "θ": "theta",
        "ϑ": "thetav",
        "Θ": "Theta",
        "ι": "iota",
        "Ι": "Iota",
        "κ": "kappa",
        "ϰ": "kappav",
        "Κ": "Kappa",
        "λ": "lambda",
        "Λ": "Lambda",
        "μ": "mu",
        "µ": "micro",
        "Μ": "Mu",
        "ν": "nu",
        "Ν": "Nu",
        "ξ": "xi",
        "Ξ": "Xi",
        "ο": "omicron",
        "Ο": "Omicron",
        "π": "pi",
        "ϖ": "piv",
        "Π": "Pi",
        "ρ": "rho",
        "ϱ": "rhov",
        "Ρ": "Rho",
        "σ": "sigma",
        "Σ": "Sigma",
        "ς": "sigmaf",
        "τ": "tau",
        "Τ": "Tau",
        "υ": "upsi",
        "Υ": "Upsilon",
        "ϒ": "Upsi",
        "φ": "phi",
        "ϕ": "phiv",
        "Φ": "Phi",
        "χ": "chi",
        "Χ": "Chi",
        "ψ": "psi",
        "Ψ": "Psi",
        "ω": "omega",
        "Ω": "ohm",
        "а": "acy",
        "А": "Acy",
        "б": "bcy",
        "Б": "Bcy",
        "в": "vcy",
        "В": "Vcy",
        "г": "gcy",
        "Г": "Gcy",
        "ѓ": "gjcy",
        "Ѓ": "GJcy",
        "д": "dcy",
        "Д": "Dcy",
        "ђ": "djcy",
        "Ђ": "DJcy",
        "е": "iecy",
        "Е": "IEcy",
        "ё": "iocy",
        "Ё": "IOcy",
        "є": "jukcy",
        "Є": "Jukcy",
        "ж": "zhcy",
        "Ж": "ZHcy",
        "з": "zcy",
        "З": "Zcy",
        "ѕ": "dscy",
        "Ѕ": "DScy",
        "и": "icy",
        "И": "Icy",
        "і": "iukcy",
        "І": "Iukcy",
        "ї": "yicy",
        "Ї": "YIcy",
        "й": "jcy",
        "Й": "Jcy",
        "ј": "jsercy",
        "Ј": "Jsercy",
        "к": "kcy",
        "К": "Kcy",
        "ќ": "kjcy",
        "Ќ": "KJcy",
        "л": "lcy",
        "Л": "Lcy",
        "љ": "ljcy",
        "Љ": "LJcy",
        "м": "mcy",
        "М": "Mcy",
        "н": "ncy",
        "Н": "Ncy",
        "њ": "njcy",
        "Њ": "NJcy",
        "о": "ocy",
        "О": "Ocy",
        "п": "pcy",
        "П": "Pcy",
        "р": "rcy",
        "Р": "Rcy",
        "с": "scy",
        "С": "Scy",
        "т": "tcy",
        "Т": "Tcy",
        "ћ": "tshcy",
        "Ћ": "TSHcy",
        "у": "ucy",
        "У": "Ucy",
        "ў": "ubrcy",
        "Ў": "Ubrcy",
        "ф": "fcy",
        "Ф": "Fcy",
        "х": "khcy",
        "Х": "KHcy",
        "ц": "tscy",
        "Ц": "TScy",
        "ч": "chcy",
        "Ч": "CHcy",
        "џ": "dzcy",
        "Џ": "DZcy",
        "ш": "shcy",
        "Ш": "SHcy",
        "щ": "shchcy",
        "Щ": "SHCHcy",
        "ъ": "hardcy",
        "Ъ": "HARDcy",
        "ы": "ycy",
        "Ы": "Ycy",
        "ь": "softcy",
        "Ь": "SOFTcy",
        "э": "ecy",
        "Э": "Ecy",
        "ю": "yucy",
        "Ю": "YUcy",
        "я": "yacy",
        "Я": "YAcy",
        "ℵ": "aleph",
        "ℶ": "beth",
        "ℷ": "gimel",
        "ℸ": "daleth"
    };
    var d13 = /["&'<>`]/g;
    var g13 = {
        '"': "&quot;",
        "&": "&amp;",
        "'": "&#x27;",
        "<": "&lt;",
        ">": "&gt;",
        "`": "&#x60;"
    };
    var m14 = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
    var f15 = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    var b13 = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
    var h7 = {
        aacute: "á",
        Aacute: "Á",
        abreve: "ă",
        Abreve: "Ă",
        ac: "∾",
        acd: "∿",
        acE: "∾̳",
        acirc: "â",
        Acirc: "Â",
        acute: "´",
        acy: "а",
        Acy: "А",
        aelig: "æ",
        AElig: "Æ",
        af: "⁡",
        afr: "𝔞",
        Afr: "𝔄",
        agrave: "à",
        Agrave: "À",
        alefsym: "ℵ",
        aleph: "ℵ",
        alpha: "α",
        Alpha: "Α",
        amacr: "ā",
        Amacr: "Ā",
        amalg: "⨿",
        amp: "&",
        AMP: "&",
        and: "∧",
        And: "⩓",
        andand: "⩕",
        andd: "⩜",
        andslope: "⩘",
        andv: "⩚",
        ang: "∠",
        ange: "⦤",
        angle: "∠",
        angmsd: "∡",
        angmsdaa: "⦨",
        angmsdab: "⦩",
        angmsdac: "⦪",
        angmsdad: "⦫",
        angmsdae: "⦬",
        angmsdaf: "⦭",
        angmsdag: "⦮",
        angmsdah: "⦯",
        angrt: "∟",
        angrtvb: "⊾",
        angrtvbd: "⦝",
        angsph: "∢",
        angst: "Å",
        angzarr: "⍼",
        aogon: "ą",
        Aogon: "Ą",
        aopf: "𝕒",
        Aopf: "𝔸",
        ap: "≈",
        apacir: "⩯",
        ape: "≊",
        apE: "⩰",
        apid: "≋",
        apos: "'",
        ApplyFunction: "⁡",
        approx: "≈",
        approxeq: "≊",
        aring: "å",
        Aring: "Å",
        ascr: "𝒶",
        Ascr: "𝒜",
        Assign: "≔",
        ast: "*",
        asymp: "≈",
        asympeq: "≍",
        atilde: "ã",
        Atilde: "Ã",
        auml: "ä",
        Auml: "Ä",
        awconint: "∳",
        awint: "⨑",
        backcong: "≌",
        backepsilon: "϶",
        backprime: "‵",
        backsim: "∽",
        backsimeq: "⋍",
        Backslash: "∖",
        Barv: "⫧",
        barvee: "⊽",
        barwed: "⌅",
        Barwed: "⌆",
        barwedge: "⌅",
        bbrk: "⎵",
        bbrktbrk: "⎶",
        bcong: "≌",
        bcy: "б",
        Bcy: "Б",
        bdquo: "„",
        becaus: "∵",
        because: "∵",
        Because: "∵",
        bemptyv: "⦰",
        bepsi: "϶",
        bernou: "ℬ",
        Bernoullis: "ℬ",
        beta: "β",
        Beta: "Β",
        beth: "ℶ",
        between: "≬",
        bfr: "𝔟",
        Bfr: "𝔅",
        bigcap: "⋂",
        bigcirc: "◯",
        bigcup: "⋃",
        bigodot: "⨀",
        bigoplus: "⨁",
        bigotimes: "⨂",
        bigsqcup: "⨆",
        bigstar: "★",
        bigtriangledown: "▽",
        bigtriangleup: "△",
        biguplus: "⨄",
        bigvee: "⋁",
        bigwedge: "⋀",
        bkarow: "⤍",
        blacklozenge: "⧫",
        blacksquare: "▪",
        blacktriangle: "▴",
        blacktriangledown: "▾",
        blacktriangleleft: "◂",
        blacktriangleright: "▸",
        blank: "␣",
        blk12: "▒",
        blk14: "░",
        blk34: "▓",
        block: "█",
        bne: "=⃥",
        bnequiv: "≡⃥",
        bnot: "⌐",
        bNot: "⫭",
        bopf: "𝕓",
        Bopf: "𝔹",
        bot: "⊥",
        bottom: "⊥",
        bowtie: "⋈",
        boxbox: "⧉",
        boxdl: "┐",
        boxdL: "╕",
        boxDl: "╖",
        boxDL: "╗",
        boxdr: "┌",
        boxdR: "╒",
        boxDr: "╓",
        boxDR: "╔",
        boxh: "─",
        boxH: "═",
        boxhd: "┬",
        boxhD: "╥",
        boxHd: "╤",
        boxHD: "╦",
        boxhu: "┴",
        boxhU: "╨",
        boxHu: "╧",
        boxHU: "╩",
        boxminus: "⊟",
        boxplus: "⊞",
        boxtimes: "⊠",
        boxul: "┘",
        boxuL: "╛",
        boxUl: "╜",
        boxUL: "╝",
        boxur: "└",
        boxuR: "╘",
        boxUr: "╙",
        boxUR: "╚",
        boxv: "│",
        boxV: "║",
        boxvh: "┼",
        boxvH: "╪",
        boxVh: "╫",
        boxVH: "╬",
        boxvl: "┤",
        boxvL: "╡",
        boxVl: "╢",
        boxVL: "╣",
        boxvr: "├",
        boxvR: "╞",
        boxVr: "╟",
        boxVR: "╠",
        bprime: "‵",
        breve: "˘",
        Breve: "˘",
        brvbar: "¦",
        bscr: "𝒷",
        Bscr: "ℬ",
        bsemi: "⁏",
        bsim: "∽",
        bsime: "⋍",
        bsol: "\\",
        bsolb: "⧅",
        bsolhsub: "⟈",
        bull: "•",
        bullet: "•",
        bump: "≎",
        bumpe: "≏",
        bumpE: "⪮",
        bumpeq: "≏",
        Bumpeq: "≎",
        cacute: "ć",
        Cacute: "Ć",
        cap: "∩",
        Cap: "⋒",
        capand: "⩄",
        capbrcup: "⩉",
        capcap: "⩋",
        capcup: "⩇",
        capdot: "⩀",
        CapitalDifferentialD: "ⅅ",
        caps: "∩︀",
        caret: "⁁",
        caron: "ˇ",
        Cayleys: "ℭ",
        ccaps: "⩍",
        ccaron: "č",
        Ccaron: "Č",
        ccedil: "ç",
        Ccedil: "Ç",
        ccirc: "ĉ",
        Ccirc: "Ĉ",
        Cconint: "∰",
        ccups: "⩌",
        ccupssm: "⩐",
        cdot: "ċ",
        Cdot: "Ċ",
        cedil: "¸",
        Cedilla: "¸",
        cemptyv: "⦲",
        cent: "¢",
        centerdot: "·",
        CenterDot: "·",
        cfr: "𝔠",
        Cfr: "ℭ",
        chcy: "ч",
        CHcy: "Ч",
        check: "✓",
        checkmark: "✓",
        chi: "χ",
        Chi: "Χ",
        cir: "○",
        circ: "ˆ",
        circeq: "≗",
        circlearrowleft: "↺",
        circlearrowright: "↻",
        circledast: "⊛",
        circledcirc: "⊚",
        circleddash: "⊝",
        CircleDot: "⊙",
        circledR: "®",
        circledS: "Ⓢ",
        CircleMinus: "⊖",
        CirclePlus: "⊕",
        CircleTimes: "⊗",
        cire: "≗",
        cirE: "⧃",
        cirfnint: "⨐",
        cirmid: "⫯",
        cirscir: "⧂",
        ClockwiseContourIntegral: "∲",
        CloseCurlyDoubleQuote: "”",
        CloseCurlyQuote: "’",
        clubs: "♣",
        clubsuit: "♣",
        colon: ":",
        Colon: "∷",
        colone: "≔",
        Colone: "⩴",
        coloneq: "≔",
        comma: ",",
        commat: "@",
        comp: "∁",
        compfn: "∘",
        complement: "∁",
        complexes: "ℂ",
        cong: "≅",
        congdot: "⩭",
        Congruent: "≡",
        conint: "∮",
        Conint: "∯",
        ContourIntegral: "∮",
        copf: "𝕔",
        Copf: "ℂ",
        coprod: "∐",
        Coproduct: "∐",
        copy: "©",
        COPY: "©",
        copysr: "℗",
        CounterClockwiseContourIntegral: "∳",
        crarr: "↵",
        cross: "✗",
        Cross: "⨯",
        cscr: "𝒸",
        Cscr: "𝒞",
        csub: "⫏",
        csube: "⫑",
        csup: "⫐",
        csupe: "⫒",
        ctdot: "⋯",
        cudarrl: "⤸",
        cudarrr: "⤵",
        cuepr: "⋞",
        cuesc: "⋟",
        cularr: "↶",
        cularrp: "⤽",
        cup: "∪",
        Cup: "⋓",
        cupbrcap: "⩈",
        cupcap: "⩆",
        CupCap: "≍",
        cupcup: "⩊",
        cupdot: "⊍",
        cupor: "⩅",
        cups: "∪︀",
        curarr: "↷",
        curarrm: "⤼",
        curlyeqprec: "⋞",
        curlyeqsucc: "⋟",
        curlyvee: "⋎",
        curlywedge: "⋏",
        curren: "¤",
        curvearrowleft: "↶",
        curvearrowright: "↷",
        cuvee: "⋎",
        cuwed: "⋏",
        cwconint: "∲",
        cwint: "∱",
        cylcty: "⌭",
        dagger: "†",
        Dagger: "‡",
        daleth: "ℸ",
        darr: "↓",
        dArr: "⇓",
        Darr: "↡",
        dash: "‐",
        dashv: "⊣",
        Dashv: "⫤",
        dbkarow: "⤏",
        dblac: "˝",
        dcaron: "ď",
        Dcaron: "Ď",
        dcy: "д",
        Dcy: "Д",
        dd: "ⅆ",
        DD: "ⅅ",
        ddagger: "‡",
        ddarr: "⇊",
        DDotrahd: "⤑",
        ddotseq: "⩷",
        deg: "°",
        Del: "∇",
        delta: "δ",
        Delta: "Δ",
        demptyv: "⦱",
        dfisht: "⥿",
        dfr: "𝔡",
        Dfr: "𝔇",
        dHar: "⥥",
        dharl: "⇃",
        dharr: "⇂",
        DiacriticalAcute: "´",
        DiacriticalDot: "˙",
        DiacriticalDoubleAcute: "˝",
        DiacriticalGrave: "`",
        DiacriticalTilde: "˜",
        diam: "⋄",
        diamond: "⋄",
        Diamond: "⋄",
        diamondsuit: "♦",
        diams: "♦",
        die: "¨",
        DifferentialD: "ⅆ",
        digamma: "ϝ",
        disin: "⋲",
        div: "÷",
        divide: "÷",
        divideontimes: "⋇",
        divonx: "⋇",
        djcy: "ђ",
        DJcy: "Ђ",
        dlcorn: "⌞",
        dlcrop: "⌍",
        dollar: "$",
        dopf: "𝕕",
        Dopf: "𝔻",
        dot: "˙",
        Dot: "¨",
        DotDot: "⃜",
        doteq: "≐",
        doteqdot: "≑",
        DotEqual: "≐",
        dotminus: "∸",
        dotplus: "∔",
        dotsquare: "⊡",
        doublebarwedge: "⌆",
        DoubleContourIntegral: "∯",
        DoubleDot: "¨",
        DoubleDownArrow: "⇓",
        DoubleLeftArrow: "⇐",
        DoubleLeftRightArrow: "⇔",
        DoubleLeftTee: "⫤",
        DoubleLongLeftArrow: "⟸",
        DoubleLongLeftRightArrow: "⟺",
        DoubleLongRightArrow: "⟹",
        DoubleRightArrow: "⇒",
        DoubleRightTee: "⊨",
        DoubleUpArrow: "⇑",
        DoubleUpDownArrow: "⇕",
        DoubleVerticalBar: "∥",
        downarrow: "↓",
        Downarrow: "⇓",
        DownArrow: "↓",
        DownArrowBar: "⤓",
        DownArrowUpArrow: "⇵",
        DownBreve: "̑",
        downdownarrows: "⇊",
        downharpoonleft: "⇃",
        downharpoonright: "⇂",
        DownLeftRightVector: "⥐",
        DownLeftTeeVector: "⥞",
        DownLeftVector: "↽",
        DownLeftVectorBar: "⥖",
        DownRightTeeVector: "⥟",
        DownRightVector: "⇁",
        DownRightVectorBar: "⥗",
        DownTee: "⊤",
        DownTeeArrow: "↧",
        drbkarow: "⤐",
        drcorn: "⌟",
        drcrop: "⌌",
        dscr: "𝒹",
        Dscr: "𝒟",
        dscy: "ѕ",
        DScy: "Ѕ",
        dsol: "⧶",
        dstrok: "đ",
        Dstrok: "Đ",
        dtdot: "⋱",
        dtri: "▿",
        dtrif: "▾",
        duarr: "⇵",
        duhar: "⥯",
        dwangle: "⦦",
        dzcy: "џ",
        DZcy: "Џ",
        dzigrarr: "⟿",
        eacute: "é",
        Eacute: "É",
        easter: "⩮",
        ecaron: "ě",
        Ecaron: "Ě",
        ecir: "≖",
        ecirc: "ê",
        Ecirc: "Ê",
        ecolon: "≕",
        ecy: "э",
        Ecy: "Э",
        eDDot: "⩷",
        edot: "ė",
        eDot: "≑",
        Edot: "Ė",
        ee: "ⅇ",
        efDot: "≒",
        efr: "𝔢",
        Efr: "𝔈",
        eg: "⪚",
        egrave: "è",
        Egrave: "È",
        egs: "⪖",
        egsdot: "⪘",
        el: "⪙",
        Element: "∈",
        elinters: "⏧",
        ell: "ℓ",
        els: "⪕",
        elsdot: "⪗",
        emacr: "ē",
        Emacr: "Ē",
        empty: "∅",
        emptyset: "∅",
        EmptySmallSquare: "◻",
        emptyv: "∅",
        EmptyVerySmallSquare: "▫",
        emsp: " ",
        emsp13: " ",
        emsp14: " ",
        eng: "ŋ",
        ENG: "Ŋ",
        ensp: " ",
        eogon: "ę",
        Eogon: "Ę",
        eopf: "𝕖",
        Eopf: "𝔼",
        epar: "⋕",
        eparsl: "⧣",
        eplus: "⩱",
        epsi: "ε",
        epsilon: "ε",
        Epsilon: "Ε",
        epsiv: "ϵ",
        eqcirc: "≖",
        eqcolon: "≕",
        eqsim: "≂",
        eqslantgtr: "⪖",
        eqslantless: "⪕",
        Equal: "⩵",
        equals: "=",
        EqualTilde: "≂",
        equest: "≟",
        Equilibrium: "⇌",
        equiv: "≡",
        equivDD: "⩸",
        eqvparsl: "⧥",
        erarr: "⥱",
        erDot: "≓",
        escr: "ℯ",
        Escr: "ℰ",
        esdot: "≐",
        esim: "≂",
        Esim: "⩳",
        eta: "η",
        Eta: "Η",
        eth: "ð",
        ETH: "Ð",
        euml: "ë",
        Euml: "Ë",
        euro: "€",
        excl: "!",
        exist: "∃",
        Exists: "∃",
        expectation: "ℰ",
        exponentiale: "ⅇ",
        ExponentialE: "ⅇ",
        fallingdotseq: "≒",
        fcy: "ф",
        Fcy: "Ф",
        female: "♀",
        ffilig: "ﬃ",
        fflig: "ﬀ",
        ffllig: "ﬄ",
        ffr: "𝔣",
        Ffr: "𝔉",
        filig: "ﬁ",
        FilledSmallSquare: "◼",
        FilledVerySmallSquare: "▪",
        fjlig: "fj",
        flat: "♭",
        fllig: "ﬂ",
        fltns: "▱",
        fnof: "ƒ",
        fopf: "𝕗",
        Fopf: "𝔽",
        forall: "∀",
        ForAll: "∀",
        fork: "⋔",
        forkv: "⫙",
        Fouriertrf: "ℱ",
        fpartint: "⨍",
        frac12: "½",
        frac13: "⅓",
        frac14: "¼",
        frac15: "⅕",
        frac16: "⅙",
        frac18: "⅛",
        frac23: "⅔",
        frac25: "⅖",
        frac34: "¾",
        frac35: "⅗",
        frac38: "⅜",
        frac45: "⅘",
        frac56: "⅚",
        frac58: "⅝",
        frac78: "⅞",
        frasl: "⁄",
        frown: "⌢",
        fscr: "𝒻",
        Fscr: "ℱ",
        gacute: "ǵ",
        gamma: "γ",
        Gamma: "Γ",
        gammad: "ϝ",
        Gammad: "Ϝ",
        gap: "⪆",
        gbreve: "ğ",
        Gbreve: "Ğ",
        Gcedil: "Ģ",
        gcirc: "ĝ",
        Gcirc: "Ĝ",
        gcy: "г",
        Gcy: "Г",
        gdot: "ġ",
        Gdot: "Ġ",
        ge: "≥",
        gE: "≧",
        gel: "⋛",
        gEl: "⪌",
        geq: "≥",
        geqq: "≧",
        geqslant: "⩾",
        ges: "⩾",
        gescc: "⪩",
        gesdot: "⪀",
        gesdoto: "⪂",
        gesdotol: "⪄",
        gesl: "⋛︀",
        gesles: "⪔",
        gfr: "𝔤",
        Gfr: "𝔊",
        gg: "≫",
        Gg: "⋙",
        ggg: "⋙",
        gimel: "ℷ",
        gjcy: "ѓ",
        GJcy: "Ѓ",
        gl: "≷",
        gla: "⪥",
        glE: "⪒",
        glj: "⪤",
        gnap: "⪊",
        gnapprox: "⪊",
        gne: "⪈",
        gnE: "≩",
        gneq: "⪈",
        gneqq: "≩",
        gnsim: "⋧",
        gopf: "𝕘",
        Gopf: "𝔾",
        grave: "`",
        GreaterEqual: "≥",
        GreaterEqualLess: "⋛",
        GreaterFullEqual: "≧",
        GreaterGreater: "⪢",
        GreaterLess: "≷",
        GreaterSlantEqual: "⩾",
        GreaterTilde: "≳",
        gscr: "ℊ",
        Gscr: "𝒢",
        gsim: "≳",
        gsime: "⪎",
        gsiml: "⪐",
        gt: ">",
        Gt: "≫",
        GT: ">",
        gtcc: "⪧",
        gtcir: "⩺",
        gtdot: "⋗",
        gtlPar: "⦕",
        gtquest: "⩼",
        gtrapprox: "⪆",
        gtrarr: "⥸",
        gtrdot: "⋗",
        gtreqless: "⋛",
        gtreqqless: "⪌",
        gtrless: "≷",
        gtrsim: "≳",
        gvertneqq: "≩︀",
        gvnE: "≩︀",
        Hacek: "ˇ",
        hairsp: " ",
        half: "½",
        hamilt: "ℋ",
        hardcy: "ъ",
        HARDcy: "Ъ",
        harr: "↔",
        hArr: "⇔",
        harrcir: "⥈",
        harrw: "↭",
        Hat: "^",
        hbar: "ℏ",
        hcirc: "ĥ",
        Hcirc: "Ĥ",
        hearts: "♥",
        heartsuit: "♥",
        hellip: "…",
        hercon: "⊹",
        hfr: "𝔥",
        Hfr: "ℌ",
        HilbertSpace: "ℋ",
        hksearow: "⤥",
        hkswarow: "⤦",
        hoarr: "⇿",
        homtht: "∻",
        hookleftarrow: "↩",
        hookrightarrow: "↪",
        hopf: "𝕙",
        Hopf: "ℍ",
        horbar: "―",
        HorizontalLine: "─",
        hscr: "𝒽",
        Hscr: "ℋ",
        hslash: "ℏ",
        hstrok: "ħ",
        Hstrok: "Ħ",
        HumpDownHump: "≎",
        HumpEqual: "≏",
        hybull: "⁃",
        hyphen: "‐",
        iacute: "í",
        Iacute: "Í",
        ic: "⁣",
        icirc: "î",
        Icirc: "Î",
        icy: "и",
        Icy: "И",
        Idot: "İ",
        iecy: "е",
        IEcy: "Е",
        iexcl: "¡",
        iff: "⇔",
        ifr: "𝔦",
        Ifr: "ℑ",
        igrave: "ì",
        Igrave: "Ì",
        ii: "ⅈ",
        iiiint: "⨌",
        iiint: "∭",
        iinfin: "⧜",
        iiota: "℩",
        ijlig: "ĳ",
        IJlig: "Ĳ",
        Im: "ℑ",
        imacr: "ī",
        Imacr: "Ī",
        image: "ℑ",
        ImaginaryI: "ⅈ",
        imagline: "ℐ",
        imagpart: "ℑ",
        imath: "ı",
        imof: "⊷",
        imped: "Ƶ",
        Implies: "⇒",
        in: "∈",
        incare: "℅",
        infin: "∞",
        infintie: "⧝",
        inodot: "ı",
        int: "∫",
        Int: "∬",
        intcal: "⊺",
        integers: "ℤ",
        Integral: "∫",
        intercal: "⊺",
        Intersection: "⋂",
        intlarhk: "⨗",
        intprod: "⨼",
        InvisibleComma: "⁣",
        InvisibleTimes: "⁢",
        iocy: "ё",
        IOcy: "Ё",
        iogon: "į",
        Iogon: "Į",
        iopf: "𝕚",
        Iopf: "𝕀",
        iota: "ι",
        Iota: "Ι",
        iprod: "⨼",
        iquest: "¿",
        iscr: "𝒾",
        Iscr: "ℐ",
        isin: "∈",
        isindot: "⋵",
        isinE: "⋹",
        isins: "⋴",
        isinsv: "⋳",
        isinv: "∈",
        it: "⁢",
        itilde: "ĩ",
        Itilde: "Ĩ",
        iukcy: "і",
        Iukcy: "І",
        iuml: "ï",
        Iuml: "Ï",
        jcirc: "ĵ",
        Jcirc: "Ĵ",
        jcy: "й",
        Jcy: "Й",
        jfr: "𝔧",
        Jfr: "𝔍",
        jmath: "ȷ",
        jopf: "𝕛",
        Jopf: "𝕁",
        jscr: "𝒿",
        Jscr: "𝒥",
        jsercy: "ј",
        Jsercy: "Ј",
        jukcy: "є",
        Jukcy: "Є",
        kappa: "κ",
        Kappa: "Κ",
        kappav: "ϰ",
        kcedil: "ķ",
        Kcedil: "Ķ",
        kcy: "к",
        Kcy: "К",
        kfr: "𝔨",
        Kfr: "𝔎",
        kgreen: "ĸ",
        khcy: "х",
        KHcy: "Х",
        kjcy: "ќ",
        KJcy: "Ќ",
        kopf: "𝕜",
        Kopf: "𝕂",
        kscr: "𝓀",
        Kscr: "𝒦",
        lAarr: "⇚",
        lacute: "ĺ",
        Lacute: "Ĺ",
        laemptyv: "⦴",
        lagran: "ℒ",
        lambda: "λ",
        Lambda: "Λ",
        lang: "⟨",
        Lang: "⟪",
        langd: "⦑",
        langle: "⟨",
        lap: "⪅",
        Laplacetrf: "ℒ",
        laquo: "«",
        larr: "←",
        lArr: "⇐",
        Larr: "↞",
        larrb: "⇤",
        larrbfs: "⤟",
        larrfs: "⤝",
        larrhk: "↩",
        larrlp: "↫",
        larrpl: "⤹",
        larrsim: "⥳",
        larrtl: "↢",
        lat: "⪫",
        latail: "⤙",
        lAtail: "⤛",
        late: "⪭",
        lates: "⪭︀",
        lbarr: "⤌",
        lBarr: "⤎",
        lbbrk: "❲",
        lbrace: "{",
        lbrack: "[",
        lbrke: "⦋",
        lbrksld: "⦏",
        lbrkslu: "⦍",
        lcaron: "ľ",
        Lcaron: "Ľ",
        lcedil: "ļ",
        Lcedil: "Ļ",
        lceil: "⌈",
        lcub: "{",
        lcy: "л",
        Lcy: "Л",
        ldca: "⤶",
        ldquo: "“",
        ldquor: "„",
        ldrdhar: "⥧",
        ldrushar: "⥋",
        ldsh: "↲",
        le: "≤",
        lE: "≦",
        LeftAngleBracket: "⟨",
        leftarrow: "←",
        Leftarrow: "⇐",
        LeftArrow: "←",
        LeftArrowBar: "⇤",
        LeftArrowRightArrow: "⇆",
        leftarrowtail: "↢",
        LeftCeiling: "⌈",
        LeftDoubleBracket: "⟦",
        LeftDownTeeVector: "⥡",
        LeftDownVector: "⇃",
        LeftDownVectorBar: "⥙",
        LeftFloor: "⌊",
        leftharpoondown: "↽",
        leftharpoonup: "↼",
        leftleftarrows: "⇇",
        leftrightarrow: "↔",
        Leftrightarrow: "⇔",
        LeftRightArrow: "↔",
        leftrightarrows: "⇆",
        leftrightharpoons: "⇋",
        leftrightsquigarrow: "↭",
        LeftRightVector: "⥎",
        LeftTee: "⊣",
        LeftTeeArrow: "↤",
        LeftTeeVector: "⥚",
        leftthreetimes: "⋋",
        LeftTriangle: "⊲",
        LeftTriangleBar: "⧏",
        LeftTriangleEqual: "⊴",
        LeftUpDownVector: "⥑",
        LeftUpTeeVector: "⥠",
        LeftUpVector: "↿",
        LeftUpVectorBar: "⥘",
        LeftVector: "↼",
        LeftVectorBar: "⥒",
        leg: "⋚",
        lEg: "⪋",
        leq: "≤",
        leqq: "≦",
        leqslant: "⩽",
        les: "⩽",
        lescc: "⪨",
        lesdot: "⩿",
        lesdoto: "⪁",
        lesdotor: "⪃",
        lesg: "⋚︀",
        lesges: "⪓",
        lessapprox: "⪅",
        lessdot: "⋖",
        lesseqgtr: "⋚",
        lesseqqgtr: "⪋",
        LessEqualGreater: "⋚",
        LessFullEqual: "≦",
        LessGreater: "≶",
        lessgtr: "≶",
        LessLess: "⪡",
        lesssim: "≲",
        LessSlantEqual: "⩽",
        LessTilde: "≲",
        lfisht: "⥼",
        lfloor: "⌊",
        lfr: "𝔩",
        Lfr: "𝔏",
        lg: "≶",
        lgE: "⪑",
        lHar: "⥢",
        lhard: "↽",
        lharu: "↼",
        lharul: "⥪",
        lhblk: "▄",
        ljcy: "љ",
        LJcy: "Љ",
        ll: "≪",
        Ll: "⋘",
        llarr: "⇇",
        llcorner: "⌞",
        Lleftarrow: "⇚",
        llhard: "⥫",
        lltri: "◺",
        lmidot: "ŀ",
        Lmidot: "Ŀ",
        lmoust: "⎰",
        lmoustache: "⎰",
        lnap: "⪉",
        lnapprox: "⪉",
        lne: "⪇",
        lnE: "≨",
        lneq: "⪇",
        lneqq: "≨",
        lnsim: "⋦",
        loang: "⟬",
        loarr: "⇽",
        lobrk: "⟦",
        longleftarrow: "⟵",
        Longleftarrow: "⟸",
        LongLeftArrow: "⟵",
        longleftrightarrow: "⟷",
        Longleftrightarrow: "⟺",
        LongLeftRightArrow: "⟷",
        longmapsto: "⟼",
        longrightarrow: "⟶",
        Longrightarrow: "⟹",
        LongRightArrow: "⟶",
        looparrowleft: "↫",
        looparrowright: "↬",
        lopar: "⦅",
        lopf: "𝕝",
        Lopf: "𝕃",
        loplus: "⨭",
        lotimes: "⨴",
        lowast: "∗",
        lowbar: "_",
        LowerLeftArrow: "↙",
        LowerRightArrow: "↘",
        loz: "◊",
        lozenge: "◊",
        lozf: "⧫",
        lpar: "(",
        lparlt: "⦓",
        lrarr: "⇆",
        lrcorner: "⌟",
        lrhar: "⇋",
        lrhard: "⥭",
        lrm: "‎",
        lrtri: "⊿",
        lsaquo: "‹",
        lscr: "𝓁",
        Lscr: "ℒ",
        lsh: "↰",
        Lsh: "↰",
        lsim: "≲",
        lsime: "⪍",
        lsimg: "⪏",
        lsqb: "[",
        lsquo: "‘",
        lsquor: "‚",
        lstrok: "ł",
        Lstrok: "Ł",
        lt: "<",
        Lt: "≪",
        LT: "<",
        ltcc: "⪦",
        ltcir: "⩹",
        ltdot: "⋖",
        lthree: "⋋",
        ltimes: "⋉",
        ltlarr: "⥶",
        ltquest: "⩻",
        ltri: "◃",
        ltrie: "⊴",
        ltrif: "◂",
        ltrPar: "⦖",
        lurdshar: "⥊",
        luruhar: "⥦",
        lvertneqq: "≨︀",
        lvnE: "≨︀",
        macr: "¯",
        male: "♂",
        malt: "✠",
        maltese: "✠",
        map: "↦",
        Map: "⤅",
        mapsto: "↦",
        mapstodown: "↧",
        mapstoleft: "↤",
        mapstoup: "↥",
        marker: "▮",
        mcomma: "⨩",
        mcy: "м",
        Mcy: "М",
        mdash: "—",
        mDDot: "∺",
        measuredangle: "∡",
        MediumSpace: " ",
        Mellintrf: "ℳ",
        mfr: "𝔪",
        Mfr: "𝔐",
        mho: "℧",
        micro: "µ",
        mid: "∣",
        midast: "*",
        midcir: "⫰",
        middot: "·",
        minus: "−",
        minusb: "⊟",
        minusd: "∸",
        minusdu: "⨪",
        MinusPlus: "∓",
        mlcp: "⫛",
        mldr: "…",
        mnplus: "∓",
        models: "⊧",
        mopf: "𝕞",
        Mopf: "𝕄",
        mp: "∓",
        mscr: "𝓂",
        Mscr: "ℳ",
        mstpos: "∾",
        mu: "μ",
        Mu: "Μ",
        multimap: "⊸",
        mumap: "⊸",
        nabla: "∇",
        nacute: "ń",
        Nacute: "Ń",
        nang: "∠⃒",
        nap: "≉",
        napE: "⩰̸",
        napid: "≋̸",
        napos: "ŉ",
        napprox: "≉",
        natur: "♮",
        natural: "♮",
        naturals: "ℕ",
        nbsp: " ",
        nbump: "≎̸",
        nbumpe: "≏̸",
        ncap: "⩃",
        ncaron: "ň",
        Ncaron: "Ň",
        ncedil: "ņ",
        Ncedil: "Ņ",
        ncong: "≇",
        ncongdot: "⩭̸",
        ncup: "⩂",
        ncy: "н",
        Ncy: "Н",
        ndash: "–",
        ne: "≠",
        nearhk: "⤤",
        nearr: "↗",
        neArr: "⇗",
        nearrow: "↗",
        nedot: "≐̸",
        NegativeMediumSpace: "​",
        NegativeThickSpace: "​",
        NegativeThinSpace: "​",
        NegativeVeryThinSpace: "​",
        nequiv: "≢",
        nesear: "⤨",
        nesim: "≂̸",
        NestedGreaterGreater: "≫",
        NestedLessLess: "≪",
        NewLine: "\n",
        nexist: "∄",
        nexists: "∄",
        nfr: "𝔫",
        Nfr: "𝔑",
        nge: "≱",
        ngE: "≧̸",
        ngeq: "≱",
        ngeqq: "≧̸",
        ngeqslant: "⩾̸",
        nges: "⩾̸",
        nGg: "⋙̸",
        ngsim: "≵",
        ngt: "≯",
        nGt: "≫⃒",
        ngtr: "≯",
        nGtv: "≫̸",
        nharr: "↮",
        nhArr: "⇎",
        nhpar: "⫲",
        ni: "∋",
        nis: "⋼",
        nisd: "⋺",
        niv: "∋",
        njcy: "њ",
        NJcy: "Њ",
        nlarr: "↚",
        nlArr: "⇍",
        nldr: "‥",
        nle: "≰",
        nlE: "≦̸",
        nleftarrow: "↚",
        nLeftarrow: "⇍",
        nleftrightarrow: "↮",
        nLeftrightarrow: "⇎",
        nleq: "≰",
        nleqq: "≦̸",
        nleqslant: "⩽̸",
        nles: "⩽̸",
        nless: "≮",
        nLl: "⋘̸",
        nlsim: "≴",
        nlt: "≮",
        nLt: "≪⃒",
        nltri: "⋪",
        nltrie: "⋬",
        nLtv: "≪̸",
        nmid: "∤",
        NoBreak: "⁠",
        NonBreakingSpace: " ",
        nopf: "𝕟",
        Nopf: "ℕ",
        not: "¬",
        Not: "⫬",
        NotCongruent: "≢",
        NotCupCap: "≭",
        NotDoubleVerticalBar: "∦",
        NotElement: "∉",
        NotEqual: "≠",
        NotEqualTilde: "≂̸",
        NotExists: "∄",
        NotGreater: "≯",
        NotGreaterEqual: "≱",
        NotGreaterFullEqual: "≧̸",
        NotGreaterGreater: "≫̸",
        NotGreaterLess: "≹",
        NotGreaterSlantEqual: "⩾̸",
        NotGreaterTilde: "≵",
        NotHumpDownHump: "≎̸",
        NotHumpEqual: "≏̸",
        notin: "∉",
        notindot: "⋵̸",
        notinE: "⋹̸",
        notinva: "∉",
        notinvb: "⋷",
        notinvc: "⋶",
        NotLeftTriangle: "⋪",
        NotLeftTriangleBar: "⧏̸",
        NotLeftTriangleEqual: "⋬",
        NotLess: "≮",
        NotLessEqual: "≰",
        NotLessGreater: "≸",
        NotLessLess: "≪̸",
        NotLessSlantEqual: "⩽̸",
        NotLessTilde: "≴",
        NotNestedGreaterGreater: "⪢̸",
        NotNestedLessLess: "⪡̸",
        notni: "∌",
        notniva: "∌",
        notnivb: "⋾",
        notnivc: "⋽",
        NotPrecedes: "⊀",
        NotPrecedesEqual: "⪯̸",
        NotPrecedesSlantEqual: "⋠",
        NotReverseElement: "∌",
        NotRightTriangle: "⋫",
        NotRightTriangleBar: "⧐̸",
        NotRightTriangleEqual: "⋭",
        NotSquareSubset: "⊏̸",
        NotSquareSubsetEqual: "⋢",
        NotSquareSuperset: "⊐̸",
        NotSquareSupersetEqual: "⋣",
        NotSubset: "⊂⃒",
        NotSubsetEqual: "⊈",
        NotSucceeds: "⊁",
        NotSucceedsEqual: "⪰̸",
        NotSucceedsSlantEqual: "⋡",
        NotSucceedsTilde: "≿̸",
        NotSuperset: "⊃⃒",
        NotSupersetEqual: "⊉",
        NotTilde: "≁",
        NotTildeEqual: "≄",
        NotTildeFullEqual: "≇",
        NotTildeTilde: "≉",
        NotVerticalBar: "∤",
        npar: "∦",
        nparallel: "∦",
        nparsl: "⫽⃥",
        npart: "∂̸",
        npolint: "⨔",
        npr: "⊀",
        nprcue: "⋠",
        npre: "⪯̸",
        nprec: "⊀",
        npreceq: "⪯̸",
        nrarr: "↛",
        nrArr: "⇏",
        nrarrc: "⤳̸",
        nrarrw: "↝̸",
        nrightarrow: "↛",
        nRightarrow: "⇏",
        nrtri: "⋫",
        nrtrie: "⋭",
        nsc: "⊁",
        nsccue: "⋡",
        nsce: "⪰̸",
        nscr: "𝓃",
        Nscr: "𝒩",
        nshortmid: "∤",
        nshortparallel: "∦",
        nsim: "≁",
        nsime: "≄",
        nsimeq: "≄",
        nsmid: "∤",
        nspar: "∦",
        nsqsube: "⋢",
        nsqsupe: "⋣",
        nsub: "⊄",
        nsube: "⊈",
        nsubE: "⫅̸",
        nsubset: "⊂⃒",
        nsubseteq: "⊈",
        nsubseteqq: "⫅̸",
        nsucc: "⊁",
        nsucceq: "⪰̸",
        nsup: "⊅",
        nsupe: "⊉",
        nsupE: "⫆̸",
        nsupset: "⊃⃒",
        nsupseteq: "⊉",
        nsupseteqq: "⫆̸",
        ntgl: "≹",
        ntilde: "ñ",
        Ntilde: "Ñ",
        ntlg: "≸",
        ntriangleleft: "⋪",
        ntrianglelefteq: "⋬",
        ntriangleright: "⋫",
        ntrianglerighteq: "⋭",
        nu: "ν",
        Nu: "Ν",
        num: "#",
        numero: "№",
        numsp: " ",
        nvap: "≍⃒",
        nvdash: "⊬",
        nvDash: "⊭",
        nVdash: "⊮",
        nVDash: "⊯",
        nvge: "≥⃒",
        nvgt: ">⃒",
        nvHarr: "⤄",
        nvinfin: "⧞",
        nvlArr: "⤂",
        nvle: "≤⃒",
        nvlt: "<⃒",
        nvltrie: "⊴⃒",
        nvrArr: "⤃",
        nvrtrie: "⊵⃒",
        nvsim: "∼⃒",
        nwarhk: "⤣",
        nwarr: "↖",
        nwArr: "⇖",
        nwarrow: "↖",
        nwnear: "⤧",
        oacute: "ó",
        Oacute: "Ó",
        oast: "⊛",
        ocir: "⊚",
        ocirc: "ô",
        Ocirc: "Ô",
        ocy: "о",
        Ocy: "О",
        odash: "⊝",
        odblac: "ő",
        Odblac: "Ő",
        odiv: "⨸",
        odot: "⊙",
        odsold: "⦼",
        oelig: "œ",
        OElig: "Œ",
        ofcir: "⦿",
        ofr: "𝔬",
        Ofr: "𝔒",
        ogon: "˛",
        ograve: "ò",
        Ograve: "Ò",
        ogt: "⧁",
        ohbar: "⦵",
        ohm: "Ω",
        oint: "∮",
        olarr: "↺",
        olcir: "⦾",
        olcross: "⦻",
        oline: "‾",
        olt: "⧀",
        omacr: "ō",
        Omacr: "Ō",
        omega: "ω",
        Omega: "Ω",
        omicron: "ο",
        Omicron: "Ο",
        omid: "⦶",
        ominus: "⊖",
        oopf: "𝕠",
        Oopf: "𝕆",
        opar: "⦷",
        OpenCurlyDoubleQuote: "“",
        OpenCurlyQuote: "‘",
        operp: "⦹",
        oplus: "⊕",
        or: "∨",
        Or: "⩔",
        orarr: "↻",
        ord: "⩝",
        order: "ℴ",
        orderof: "ℴ",
        ordf: "ª",
        ordm: "º",
        origof: "⊶",
        oror: "⩖",
        orslope: "⩗",
        orv: "⩛",
        oS: "Ⓢ",
        oscr: "ℴ",
        Oscr: "𝒪",
        oslash: "ø",
        Oslash: "Ø",
        osol: "⊘",
        otilde: "õ",
        Otilde: "Õ",
        otimes: "⊗",
        Otimes: "⨷",
        otimesas: "⨶",
        ouml: "ö",
        Ouml: "Ö",
        ovbar: "⌽",
        OverBar: "‾",
        OverBrace: "⏞",
        OverBracket: "⎴",
        OverParenthesis: "⏜",
        par: "∥",
        para: "¶",
        parallel: "∥",
        parsim: "⫳",
        parsl: "⫽",
        part: "∂",
        PartialD: "∂",
        pcy: "п",
        Pcy: "П",
        percnt: "%",
        period: ".",
        permil: "‰",
        perp: "⊥",
        pertenk: "‱",
        pfr: "𝔭",
        Pfr: "𝔓",
        phi: "φ",
        Phi: "Φ",
        phiv: "ϕ",
        phmmat: "ℳ",
        phone: "☎",
        pi: "π",
        Pi: "Π",
        pitchfork: "⋔",
        piv: "ϖ",
        planck: "ℏ",
        planckh: "ℎ",
        plankv: "ℏ",
        plus: "+",
        plusacir: "⨣",
        plusb: "⊞",
        pluscir: "⨢",
        plusdo: "∔",
        plusdu: "⨥",
        pluse: "⩲",
        PlusMinus: "±",
        plusmn: "±",
        plussim: "⨦",
        plustwo: "⨧",
        pm: "±",
        Poincareplane: "ℌ",
        pointint: "⨕",
        popf: "𝕡",
        Popf: "ℙ",
        pound: "£",
        pr: "≺",
        Pr: "⪻",
        prap: "⪷",
        prcue: "≼",
        pre: "⪯",
        prE: "⪳",
        prec: "≺",
        precapprox: "⪷",
        preccurlyeq: "≼",
        Precedes: "≺",
        PrecedesEqual: "⪯",
        PrecedesSlantEqual: "≼",
        PrecedesTilde: "≾",
        preceq: "⪯",
        precnapprox: "⪹",
        precneqq: "⪵",
        precnsim: "⋨",
        precsim: "≾",
        prime: "′",
        Prime: "″",
        primes: "ℙ",
        prnap: "⪹",
        prnE: "⪵",
        prnsim: "⋨",
        prod: "∏",
        Product: "∏",
        profalar: "⌮",
        profline: "⌒",
        profsurf: "⌓",
        prop: "∝",
        Proportion: "∷",
        Proportional: "∝",
        propto: "∝",
        prsim: "≾",
        prurel: "⊰",
        pscr: "𝓅",
        Pscr: "𝒫",
        psi: "ψ",
        Psi: "Ψ",
        puncsp: " ",
        qfr: "𝔮",
        Qfr: "𝔔",
        qint: "⨌",
        qopf: "𝕢",
        Qopf: "ℚ",
        qprime: "⁗",
        qscr: "𝓆",
        Qscr: "𝒬",
        quaternions: "ℍ",
        quatint: "⨖",
        quest: "?",
        questeq: "≟",
        quot: '"',
        QUOT: '"',
        rAarr: "⇛",
        race: "∽̱",
        racute: "ŕ",
        Racute: "Ŕ",
        radic: "√",
        raemptyv: "⦳",
        rang: "⟩",
        Rang: "⟫",
        rangd: "⦒",
        range: "⦥",
        rangle: "⟩",
        raquo: "»",
        rarr: "→",
        rArr: "⇒",
        Rarr: "↠",
        rarrap: "⥵",
        rarrb: "⇥",
        rarrbfs: "⤠",
        rarrc: "⤳",
        rarrfs: "⤞",
        rarrhk: "↪",
        rarrlp: "↬",
        rarrpl: "⥅",
        rarrsim: "⥴",
        rarrtl: "↣",
        Rarrtl: "⤖",
        rarrw: "↝",
        ratail: "⤚",
        rAtail: "⤜",
        ratio: "∶",
        rationals: "ℚ",
        rbarr: "⤍",
        rBarr: "⤏",
        RBarr: "⤐",
        rbbrk: "❳",
        rbrace: "}",
        rbrack: "]",
        rbrke: "⦌",
        rbrksld: "⦎",
        rbrkslu: "⦐",
        rcaron: "ř",
        Rcaron: "Ř",
        rcedil: "ŗ",
        Rcedil: "Ŗ",
        rceil: "⌉",
        rcub: "}",
        rcy: "р",
        Rcy: "Р",
        rdca: "⤷",
        rdldhar: "⥩",
        rdquo: "”",
        rdquor: "”",
        rdsh: "↳",
        Re: "ℜ",
        real: "ℜ",
        realine: "ℛ",
        realpart: "ℜ",
        reals: "ℝ",
        rect: "▭",
        reg: "®",
        REG: "®",
        ReverseElement: "∋",
        ReverseEquilibrium: "⇋",
        ReverseUpEquilibrium: "⥯",
        rfisht: "⥽",
        rfloor: "⌋",
        rfr: "𝔯",
        Rfr: "ℜ",
        rHar: "⥤",
        rhard: "⇁",
        rharu: "⇀",
        rharul: "⥬",
        rho: "ρ",
        Rho: "Ρ",
        rhov: "ϱ",
        RightAngleBracket: "⟩",
        rightarrow: "→",
        Rightarrow: "⇒",
        RightArrow: "→",
        RightArrowBar: "⇥",
        RightArrowLeftArrow: "⇄",
        rightarrowtail: "↣",
        RightCeiling: "⌉",
        RightDoubleBracket: "⟧",
        RightDownTeeVector: "⥝",
        RightDownVector: "⇂",
        RightDownVectorBar: "⥕",
        RightFloor: "⌋",
        rightharpoondown: "⇁",
        rightharpoonup: "⇀",
        rightleftarrows: "⇄",
        rightleftharpoons: "⇌",
        rightrightarrows: "⇉",
        rightsquigarrow: "↝",
        RightTee: "⊢",
        RightTeeArrow: "↦",
        RightTeeVector: "⥛",
        rightthreetimes: "⋌",
        RightTriangle: "⊳",
        RightTriangleBar: "⧐",
        RightTriangleEqual: "⊵",
        RightUpDownVector: "⥏",
        RightUpTeeVector: "⥜",
        RightUpVector: "↾",
        RightUpVectorBar: "⥔",
        RightVector: "⇀",
        RightVectorBar: "⥓",
        ring: "˚",
        risingdotseq: "≓",
        rlarr: "⇄",
        rlhar: "⇌",
        rlm: "‏",
        rmoust: "⎱",
        rmoustache: "⎱",
        rnmid: "⫮",
        roang: "⟭",
        roarr: "⇾",
        robrk: "⟧",
        ropar: "⦆",
        ropf: "𝕣",
        Ropf: "ℝ",
        roplus: "⨮",
        rotimes: "⨵",
        RoundImplies: "⥰",
        rpar: ")",
        rpargt: "⦔",
        rppolint: "⨒",
        rrarr: "⇉",
        Rrightarrow: "⇛",
        rsaquo: "›",
        rscr: "𝓇",
        Rscr: "ℛ",
        rsh: "↱",
        Rsh: "↱",
        rsqb: "]",
        rsquo: "’",
        rsquor: "’",
        rthree: "⋌",
        rtimes: "⋊",
        rtri: "▹",
        rtrie: "⊵",
        rtrif: "▸",
        rtriltri: "⧎",
        RuleDelayed: "⧴",
        ruluhar: "⥨",
        rx: "℞",
        sacute: "ś",
        Sacute: "Ś",
        sbquo: "‚",
        sc: "≻",
        Sc: "⪼",
        scap: "⪸",
        scaron: "š",
        Scaron: "Š",
        sccue: "≽",
        sce: "⪰",
        scE: "⪴",
        scedil: "ş",
        Scedil: "Ş",
        scirc: "ŝ",
        Scirc: "Ŝ",
        scnap: "⪺",
        scnE: "⪶",
        scnsim: "⋩",
        scpolint: "⨓",
        scsim: "≿",
        scy: "с",
        Scy: "С",
        sdot: "⋅",
        sdotb: "⊡",
        sdote: "⩦",
        searhk: "⤥",
        searr: "↘",
        seArr: "⇘",
        searrow: "↘",
        sect: "§",
        semi: ";",
        seswar: "⤩",
        setminus: "∖",
        setmn: "∖",
        sext: "✶",
        sfr: "𝔰",
        Sfr: "𝔖",
        sfrown: "⌢",
        sharp: "♯",
        shchcy: "щ",
        SHCHcy: "Щ",
        shcy: "ш",
        SHcy: "Ш",
        ShortDownArrow: "↓",
        ShortLeftArrow: "←",
        shortmid: "∣",
        shortparallel: "∥",
        ShortRightArrow: "→",
        ShortUpArrow: "↑",
        shy: "­",
        sigma: "σ",
        Sigma: "Σ",
        sigmaf: "ς",
        sigmav: "ς",
        sim: "∼",
        simdot: "⩪",
        sime: "≃",
        simeq: "≃",
        simg: "⪞",
        simgE: "⪠",
        siml: "⪝",
        simlE: "⪟",
        simne: "≆",
        simplus: "⨤",
        simrarr: "⥲",
        slarr: "←",
        SmallCircle: "∘",
        smallsetminus: "∖",
        smashp: "⨳",
        smeparsl: "⧤",
        smid: "∣",
        smile: "⌣",
        smt: "⪪",
        smte: "⪬",
        smtes: "⪬︀",
        softcy: "ь",
        SOFTcy: "Ь",
        sol: "/",
        solb: "⧄",
        solbar: "⌿",
        sopf: "𝕤",
        Sopf: "𝕊",
        spades: "♠",
        spadesuit: "♠",
        spar: "∥",
        sqcap: "⊓",
        sqcaps: "⊓︀",
        sqcup: "⊔",
        sqcups: "⊔︀",
        Sqrt: "√",
        sqsub: "⊏",
        sqsube: "⊑",
        sqsubset: "⊏",
        sqsubseteq: "⊑",
        sqsup: "⊐",
        sqsupe: "⊒",
        sqsupset: "⊐",
        sqsupseteq: "⊒",
        squ: "□",
        square: "□",
        Square: "□",
        SquareIntersection: "⊓",
        SquareSubset: "⊏",
        SquareSubsetEqual: "⊑",
        SquareSuperset: "⊐",
        SquareSupersetEqual: "⊒",
        SquareUnion: "⊔",
        squarf: "▪",
        squf: "▪",
        srarr: "→",
        sscr: "𝓈",
        Sscr: "𝒮",
        ssetmn: "∖",
        ssmile: "⌣",
        sstarf: "⋆",
        star: "☆",
        Star: "⋆",
        starf: "★",
        straightepsilon: "ϵ",
        straightphi: "ϕ",
        strns: "¯",
        sub: "⊂",
        Sub: "⋐",
        subdot: "⪽",
        sube: "⊆",
        subE: "⫅",
        subedot: "⫃",
        submult: "⫁",
        subne: "⊊",
        subnE: "⫋",
        subplus: "⪿",
        subrarr: "⥹",
        subset: "⊂",
        Subset: "⋐",
        subseteq: "⊆",
        subseteqq: "⫅",
        SubsetEqual: "⊆",
        subsetneq: "⊊",
        subsetneqq: "⫋",
        subsim: "⫇",
        subsub: "⫕",
        subsup: "⫓",
        succ: "≻",
        succapprox: "⪸",
        succcurlyeq: "≽",
        Succeeds: "≻",
        SucceedsEqual: "⪰",
        SucceedsSlantEqual: "≽",
        SucceedsTilde: "≿",
        succeq: "⪰",
        succnapprox: "⪺",
        succneqq: "⪶",
        succnsim: "⋩",
        succsim: "≿",
        SuchThat: "∋",
        sum: "∑",
        Sum: "∑",
        sung: "♪",
        sup: "⊃",
        Sup: "⋑",
        sup1: "¹",
        sup2: "²",
        sup3: "³",
        supdot: "⪾",
        supdsub: "⫘",
        supe: "⊇",
        supE: "⫆",
        supedot: "⫄",
        Superset: "⊃",
        SupersetEqual: "⊇",
        suphsol: "⟉",
        suphsub: "⫗",
        suplarr: "⥻",
        supmult: "⫂",
        supne: "⊋",
        supnE: "⫌",
        supplus: "⫀",
        supset: "⊃",
        Supset: "⋑",
        supseteq: "⊇",
        supseteqq: "⫆",
        supsetneq: "⊋",
        supsetneqq: "⫌",
        supsim: "⫈",
        supsub: "⫔",
        supsup: "⫖",
        swarhk: "⤦",
        swarr: "↙",
        swArr: "⇙",
        swarrow: "↙",
        swnwar: "⤪",
        szlig: "ß",
        Tab: "\t",
        target: "⌖",
        tau: "τ",
        Tau: "Τ",
        tbrk: "⎴",
        tcaron: "ť",
        Tcaron: "Ť",
        tcedil: "ţ",
        Tcedil: "Ţ",
        tcy: "т",
        Tcy: "Т",
        tdot: "⃛",
        telrec: "⌕",
        tfr: "𝔱",
        Tfr: "𝔗",
        there4: "∴",
        therefore: "∴",
        Therefore: "∴",
        theta: "θ",
        Theta: "Θ",
        thetasym: "ϑ",
        thetav: "ϑ",
        thickapprox: "≈",
        thicksim: "∼",
        ThickSpace: "  ",
        thinsp: " ",
        ThinSpace: " ",
        thkap: "≈",
        thksim: "∼",
        thorn: "þ",
        THORN: "Þ",
        tilde: "˜",
        Tilde: "∼",
        TildeEqual: "≃",
        TildeFullEqual: "≅",
        TildeTilde: "≈",
        times: "×",
        timesb: "⊠",
        timesbar: "⨱",
        timesd: "⨰",
        tint: "∭",
        toea: "⤨",
        top: "⊤",
        topbot: "⌶",
        topcir: "⫱",
        topf: "𝕥",
        Topf: "𝕋",
        topfork: "⫚",
        tosa: "⤩",
        tprime: "‴",
        trade: "™",
        TRADE: "™",
        triangle: "▵",
        triangledown: "▿",
        triangleleft: "◃",
        trianglelefteq: "⊴",
        triangleq: "≜",
        triangleright: "▹",
        trianglerighteq: "⊵",
        tridot: "◬",
        trie: "≜",
        triminus: "⨺",
        TripleDot: "⃛",
        triplus: "⨹",
        trisb: "⧍",
        tritime: "⨻",
        trpezium: "⏢",
        tscr: "𝓉",
        Tscr: "𝒯",
        tscy: "ц",
        TScy: "Ц",
        tshcy: "ћ",
        TSHcy: "Ћ",
        tstrok: "ŧ",
        Tstrok: "Ŧ",
        twixt: "≬",
        twoheadleftarrow: "↞",
        twoheadrightarrow: "↠",
        uacute: "ú",
        Uacute: "Ú",
        uarr: "↑",
        uArr: "⇑",
        Uarr: "↟",
        Uarrocir: "⥉",
        ubrcy: "ў",
        Ubrcy: "Ў",
        ubreve: "ŭ",
        Ubreve: "Ŭ",
        ucirc: "û",
        Ucirc: "Û",
        ucy: "у",
        Ucy: "У",
        udarr: "⇅",
        udblac: "ű",
        Udblac: "Ű",
        udhar: "⥮",
        ufisht: "⥾",
        ufr: "𝔲",
        Ufr: "𝔘",
        ugrave: "ù",
        Ugrave: "Ù",
        uHar: "⥣",
        uharl: "↿",
        uharr: "↾",
        uhblk: "▀",
        ulcorn: "⌜",
        ulcorner: "⌜",
        ulcrop: "⌏",
        ultri: "◸",
        umacr: "ū",
        Umacr: "Ū",
        uml: "¨",
        UnderBar: "_",
        UnderBrace: "⏟",
        UnderBracket: "⎵",
        UnderParenthesis: "⏝",
        Union: "⋃",
        UnionPlus: "⊎",
        uogon: "ų",
        Uogon: "Ų",
        uopf: "𝕦",
        Uopf: "𝕌",
        uparrow: "↑",
        Uparrow: "⇑",
        UpArrow: "↑",
        UpArrowBar: "⤒",
        UpArrowDownArrow: "⇅",
        updownarrow: "↕",
        Updownarrow: "⇕",
        UpDownArrow: "↕",
        UpEquilibrium: "⥮",
        upharpoonleft: "↿",
        upharpoonright: "↾",
        uplus: "⊎",
        UpperLeftArrow: "↖",
        UpperRightArrow: "↗",
        upsi: "υ",
        Upsi: "ϒ",
        upsih: "ϒ",
        upsilon: "υ",
        Upsilon: "Υ",
        UpTee: "⊥",
        UpTeeArrow: "↥",
        upuparrows: "⇈",
        urcorn: "⌝",
        urcorner: "⌝",
        urcrop: "⌎",
        uring: "ů",
        Uring: "Ů",
        urtri: "◹",
        uscr: "𝓊",
        Uscr: "𝒰",
        utdot: "⋰",
        utilde: "ũ",
        Utilde: "Ũ",
        utri: "▵",
        utrif: "▴",
        uuarr: "⇈",
        uuml: "ü",
        Uuml: "Ü",
        uwangle: "⦧",
        vangrt: "⦜",
        varepsilon: "ϵ",
        varkappa: "ϰ",
        varnothing: "∅",
        varphi: "ϕ",
        varpi: "ϖ",
        varpropto: "∝",
        varr: "↕",
        vArr: "⇕",
        varrho: "ϱ",
        varsigma: "ς",
        varsubsetneq: "⊊︀",
        varsubsetneqq: "⫋︀",
        varsupsetneq: "⊋︀",
        varsupsetneqq: "⫌︀",
        vartheta: "ϑ",
        vartriangleleft: "⊲",
        vartriangleright: "⊳",
        vBar: "⫨",
        Vbar: "⫫",
        vBarv: "⫩",
        vcy: "в",
        Vcy: "В",
        vdash: "⊢",
        vDash: "⊨",
        Vdash: "⊩",
        VDash: "⊫",
        Vdashl: "⫦",
        vee: "∨",
        Vee: "⋁",
        veebar: "⊻",
        veeeq: "≚",
        vellip: "⋮",
        verbar: "|",
        Verbar: "‖",
        vert: "|",
        Vert: "‖",
        VerticalBar: "∣",
        VerticalLine: "|",
        VerticalSeparator: "❘",
        VerticalTilde: "≀",
        VeryThinSpace: " ",
        vfr: "𝔳",
        Vfr: "𝔙",
        vltri: "⊲",
        vnsub: "⊂⃒",
        vnsup: "⊃⃒",
        vopf: "𝕧",
        Vopf: "𝕍",
        vprop: "∝",
        vrtri: "⊳",
        vscr: "𝓋",
        Vscr: "𝒱",
        vsubne: "⊊︀",
        vsubnE: "⫋︀",
        vsupne: "⊋︀",
        vsupnE: "⫌︀",
        Vvdash: "⊪",
        vzigzag: "⦚",
        wcirc: "ŵ",
        Wcirc: "Ŵ",
        wedbar: "⩟",
        wedge: "∧",
        Wedge: "⋀",
        wedgeq: "≙",
        weierp: "℘",
        wfr: "𝔴",
        Wfr: "𝔚",
        wopf: "𝕨",
        Wopf: "𝕎",
        wp: "℘",
        wr: "≀",
        wreath: "≀",
        wscr: "𝓌",
        Wscr: "𝒲",
        xcap: "⋂",
        xcirc: "◯",
        xcup: "⋃",
        xdtri: "▽",
        xfr: "𝔵",
        Xfr: "𝔛",
        xharr: "⟷",
        xhArr: "⟺",
        xi: "ξ",
        Xi: "Ξ",
        xlarr: "⟵",
        xlArr: "⟸",
        xmap: "⟼",
        xnis: "⋻",
        xodot: "⨀",
        xopf: "𝕩",
        Xopf: "𝕏",
        xoplus: "⨁",
        xotime: "⨂",
        xrarr: "⟶",
        xrArr: "⟹",
        xscr: "𝓍",
        Xscr: "𝒳",
        xsqcup: "⨆",
        xuplus: "⨄",
        xutri: "△",
        xvee: "⋁",
        xwedge: "⋀",
        yacute: "ý",
        Yacute: "Ý",
        yacy: "я",
        YAcy: "Я",
        ycirc: "ŷ",
        Ycirc: "Ŷ",
        ycy: "ы",
        Ycy: "Ы",
        yen: "¥",
        yfr: "𝔶",
        Yfr: "𝔜",
        yicy: "ї",
        YIcy: "Ї",
        yopf: "𝕪",
        Yopf: "𝕐",
        yscr: "𝓎",
        Yscr: "𝒴",
        yucy: "ю",
        YUcy: "Ю",
        yuml: "ÿ",
        Yuml: "Ÿ",
        zacute: "ź",
        Zacute: "Ź",
        zcaron: "ž",
        Zcaron: "Ž",
        zcy: "з",
        Zcy: "З",
        zdot: "ż",
        Zdot: "Ż",
        zeetrf: "ℨ",
        ZeroWidthSpace: "​",
        zeta: "ζ",
        Zeta: "Ζ",
        zfr: "𝔷",
        Zfr: "ℨ",
        zhcy: "ж",
        ZHcy: "Ж",
        zigrarr: "⇝",
        zopf: "𝕫",
        Zopf: "ℤ",
        zscr: "𝓏",
        Zscr: "𝒵",
        zwj: "‍",
        zwnj: "‌"
    };
    var v9 = {
        aacute: "á",
        Aacute: "Á",
        acirc: "â",
        Acirc: "Â",
        acute: "´",
        aelig: "æ",
        AElig: "Æ",
        agrave: "à",
        Agrave: "À",
        amp: "&",
        AMP: "&",
        aring: "å",
        Aring: "Å",
        atilde: "ã",
        Atilde: "Ã",
        auml: "ä",
        Auml: "Ä",
        brvbar: "¦",
        ccedil: "ç",
        Ccedil: "Ç",
        cedil: "¸",
        cent: "¢",
        copy: "©",
        COPY: "©",
        curren: "¤",
        deg: "°",
        divide: "÷",
        eacute: "é",
        Eacute: "É",
        ecirc: "ê",
        Ecirc: "Ê",
        egrave: "è",
        Egrave: "È",
        eth: "ð",
        ETH: "Ð",
        euml: "ë",
        Euml: "Ë",
        frac12: "½",
        frac14: "¼",
        frac34: "¾",
        gt: ">",
        GT: ">",
        iacute: "í",
        Iacute: "Í",
        icirc: "î",
        Icirc: "Î",
        iexcl: "¡",
        igrave: "ì",
        Igrave: "Ì",
        iquest: "¿",
        iuml: "ï",
        Iuml: "Ï",
        laquo: "«",
        lt: "<",
        LT: "<",
        macr: "¯",
        micro: "µ",
        middot: "·",
        nbsp: " ",
        not: "¬",
        ntilde: "ñ",
        Ntilde: "Ñ",
        oacute: "ó",
        Oacute: "Ó",
        ocirc: "ô",
        Ocirc: "Ô",
        ograve: "ò",
        Ograve: "Ò",
        ordf: "ª",
        ordm: "º",
        oslash: "ø",
        Oslash: "Ø",
        otilde: "õ",
        Otilde: "Õ",
        ouml: "ö",
        Ouml: "Ö",
        para: "¶",
        plusmn: "±",
        pound: "£",
        quot: '"',
        QUOT: '"',
        raquo: "»",
        reg: "®",
        REG: "®",
        sect: "§",
        shy: "­",
        sup1: "¹",
        sup2: "²",
        sup3: "³",
        szlig: "ß",
        thorn: "þ",
        THORN: "Þ",
        times: "×",
        uacute: "ú",
        Uacute: "Ú",
        ucirc: "û",
        Ucirc: "Û",
        ugrave: "ù",
        Ugrave: "Ù",
        uml: "¨",
        uuml: "ü",
        Uuml: "Ü",
        yacute: "ý",
        Yacute: "Ý",
        yen: "¥",
        yuml: "ÿ"
    };
    var q4 = {
        0: "�",
        128: "€",
        130: "‚",
        131: "ƒ",
        132: "„",
        133: "…",
        134: "†",
        135: "‡",
        136: "ˆ",
        137: "‰",
        138: "Š",
        139: "‹",
        140: "Œ",
        142: "Ž",
        145: "‘",
        146: "’",
        147: "“",
        148: "”",
        149: "•",
        150: "–",
        151: "—",
        152: "˜",
        153: "™",
        154: "š",
        155: "›",
        156: "œ",
        158: "ž",
        159: "Ÿ"
    };
    var w16 = [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        127,
        128,
        129,
        130,
        131,
        132,
        133,
        134,
        135,
        136,
        137,
        138,
        139,
        140,
        141,
        142,
        143,
        144,
        145,
        146,
        147,
        148,
        149,
        150,
        151,
        152,
        153,
        154,
        155,
        156,
        157,
        158,
        159,
        64976,
        64977,
        64978,
        64979,
        64980,
        64981,
        64982,
        64983,
        64984,
        64985,
        64986,
        64987,
        64988,
        64989,
        64990,
        64991,
        64992,
        64993,
        64994,
        64995,
        64996,
        64997,
        64998,
        64999,
        65000,
        65001,
        65002,
        65003,
        65004,
        65005,
        65006,
        65007,
        65534,
        65535,
        131070,
        131071,
        196606,
        196607,
        262142,
        262143,
        327678,
        327679,
        393214,
        393215,
        458750,
        458751,
        524286,
        524287,
        589822,
        589823,
        655358,
        655359,
        720894,
        720895,
        786430,
        786431,
        851966,
        851967,
        917502,
        917503,
        983038,
        983039,
        1048574,
        1048575,
        1114110,
        1114111
    ];
    var D4 = String.fromCharCode;
    var y13 = {};
    var A4 = y13.hasOwnProperty;
    var has = function(r115, e114) {
        return A4.call(r115, e114);
    };
    var contains = function(r213, e25) {
        var a16 = -1;
        var t213 = r213.length;
        while(++a16 < t213)if (r213[a16] == e25) return true;
        return false;
    };
    var merge1 = function(r313, e34) {
        if (!r313) return e34;
        var a24 = {};
        var t313;
        for(t313 in e34)a24[t313] = has(r313, t313) ? r313[t313] : e34[t313];
        return a24;
    };
    var codePointToSymbol = function(r47, e42) {
        var a36 = "";
        if (r47 >= 55296 && r47 <= 57343 || r47 > 1114111) {
            e42 && parseError("character reference outside the permissible Unicode range");
            return "�";
        }
        if (has(q4, r47)) {
            e42 && parseError("disallowed character reference");
            return q4[r47];
        }
        e42 && contains(w16, r47) && parseError("disallowed character reference");
        if (r47 > 65535) {
            r47 -= 65536;
            a36 += D4(r47 >>> 10 & 1023 | 55296);
            r47 = 56320 | 1023 & r47;
        }
        a36 += D4(r47);
        return a36;
    };
    var hexEscape = function(r54) {
        return "&#x" + r54.toString(16).toUpperCase() + ";";
    };
    var decEscape = function(r62) {
        return "&#" + r62 + ";";
    };
    var parseError = function(r71) {
        throw Error("Parse error: " + r71);
    };
    var encode2 = function(r8, e51) {
        e51 = merge1(e51, encode2.options);
        var a44 = e51.strict;
        a44 && f15.test(r8) && parseError("forbidden code point");
        var t45 = e51.encodeEverything;
        var o26 = e51.useNamedReferences;
        var s34 = e51.allowUnsafeSymbols;
        var u6 = e51.decimal ? decEscape : hexEscape;
        var escapeBmpSymbol = function(r9) {
            return u6(r9.charCodeAt(0));
        };
        if (t45) {
            r8 = r8.replace(l15, function(r10) {
                return o26 && has(p113, r10) ? "&" + p113[r10] + ";" : escapeBmpSymbol(r10);
            });
            o26 && (r8 = r8.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;").replace(/&#x66;&#x6A;/g, "&fjlig;"));
            o26 && (r8 = r8.replace(n38, function(r) {
                return "&" + p113[r] + ";";
            }));
        } else if (o26) {
            s34 || (r8 = r8.replace(d13, function(r) {
                return "&" + p113[r] + ";";
            }));
            r8 = r8.replace(/&gt;\u20D2/g, "&nvgt;").replace(/&lt;\u20D2/g, "&nvlt;");
            r8 = r8.replace(n38, function(r) {
                return "&" + p113[r] + ";";
            });
        } else s34 || (r8 = r8.replace(d13, escapeBmpSymbol));
        return r8.replace(c112, function(r11) {
            var e6 = r11.charCodeAt(0);
            var a51 = r11.charCodeAt(1);
            var t52 = 1024 * (e6 - 55296) + a51 - 56320 + 65536;
            return u6(t52);
        }).replace(i17, escapeBmpSymbol);
    };
    encode2.options = {
        allowUnsafeSymbols: false,
        encodeEverything: false,
        strict: false,
        useNamedReferences: false,
        decimal: false
    };
    var decode2 = function(r12, e7) {
        e7 = merge1(e7, decode2.options);
        var a61 = e7.strict;
        a61 && m14.test(r12) && parseError("malformed character reference");
        return r12.replace(b13, function(r13, t6, o27, s35, u7, c20, l16, i, n) {
            var p26;
            var d7;
            var g7;
            var m15;
            var f9;
            var b6;
            if (t6) {
                f9 = t6;
                return h7[f9];
            }
            if (o27) {
                f9 = o27;
                b6 = s35;
                if (b6 && e7.isAttributeValue) {
                    a61 && "=" == b6 && parseError("`&` did not start a character reference");
                    return r13;
                }
                a61 && parseError("named character reference was not terminated by a semicolon");
                return v9[f9] + (b6 || "");
            }
            if (u7) {
                g7 = u7;
                d7 = c20;
                a61 && !d7 && parseError("character reference was not terminated by a semicolon");
                p26 = parseInt(g7, 10);
                return codePointToSymbol(p26, a61);
            }
            if (l16) {
                m15 = l16;
                d7 = i;
                a61 && !d7 && parseError("character reference was not terminated by a semicolon");
                p26 = parseInt(m15, 16);
                return codePointToSymbol(p26, a61);
            }
            a61 && parseError("named character reference was not terminated by a semicolon");
            return r13;
        });
    };
    decode2.options = {
        isAttributeValue: false,
        strict: false
    };
    var escape1 = function(r14) {
        return r14.replace(d13, function(r) {
            return g13[r];
        });
    };
    var E4 = {
        version: "1.2.0",
        encode: encode2,
        decode: decode2,
        escape: escape1,
        unescape: decode2
    };
    if (o113 && !o113.nodeType) if (s113) s113.exports = E4;
    else for(var x20 in E4)has(E4, x20) && (o113[x20] = E4[x20]);
    else t113.he = E4;
})(e5);
var t6 = a6.exports;
var e6 = "undefined" !== typeof globalThis ? globalThis : "undefined" !== typeof self ? self : global;
var t7 = {};
var a7 = "undefined" !== typeof window ? window : "undefined" !== typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? self : {};
var n6 = function(t114) {
    var a17 = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
    var n115 = 0;
    var r116 = {};
    var i18 = {
        manual: t114.Prism && t114.Prism.manual,
        disableWorkerMessageHandler: t114.Prism && t114.Prism.disableWorkerMessageHandler,
        util: {
            encode: function encode3(e115) {
                return e115 instanceof Token ? new Token(e115.type, encode3(e115.content), e115.alias) : Array.isArray(e115) ? e115.map(encode3) : e115.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
            },
            type: function(e26) {
                return Object.prototype.toString.call(e26).slice(8, -1);
            },
            objId: function(e35) {
                e35.__id || Object.defineProperty(e35, "__id", {
                    value: ++n115
                });
                return e35.__id;
            },
            clone: function deepClone(e43, t214) {
                t214 = t214 || {};
                var a25;
                var n214;
                switch(i18.util.type(e43)){
                    case "Object":
                        n214 = i18.util.objId(e43);
                        if (t214[n214]) return t214[n214];
                        a25 = {};
                        t214[n214] = a25;
                        for(var r214 in e43)e43.hasOwnProperty(r214) && (a25[r214] = deepClone(e43[r214], t214));
                        return a25;
                    case "Array":
                        n214 = i18.util.objId(e43);
                        if (t214[n214]) return t214[n214];
                        a25 = [];
                        t214[n214] = a25;
                        e43.forEach(function(e52, n) {
                            a25[n] = deepClone(e52, t214);
                        });
                        return a25;
                    default:
                        return e43;
                }
            },
            getLanguage: function(e61) {
                while(e61){
                    var t314 = a17.exec(e61.className);
                    if (t314) return t314[1].toLowerCase();
                    e61 = e61.parentElement;
                }
                return "none";
            },
            setLanguage: function(e7, t46) {
                e7.className = e7.className.replace(RegExp(a17, "gi"), "");
                e7.classList.add("language-" + t46);
            },
            currentScript: function() {
                if ("undefined" === typeof document) return null;
                if ("currentScript" in document && 1 < 2) return document.currentScript;
                try {
                    throw new Error;
                } catch (n39) {
                    var e8 = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(n39.stack) || [])[1];
                    if (e8) {
                        var t53 = document.getElementsByTagName("script");
                        for(var a in t53)if (t53[a].src == e8) return t53[a];
                    }
                    return null;
                }
            },
            isActive: function(e9, t61, a37) {
                var n43 = "no-" + t61;
                while(e9){
                    var r314 = e9.classList;
                    if (r314.contains(t61)) return true;
                    if (r314.contains(n43)) return false;
                    e9 = e9.parentElement;
                }
                return !!a37;
            }
        },
        languages: {
            plain: r116,
            plaintext: r116,
            text: r116,
            txt: r116,
            extend: function(e, t71) {
                var a45 = i18.util.clone(i18.languages[e]);
                for(var n in t71)a45[n] = t71[n];
                return a45;
            },
            insertBefore: function(t8, a52, n52, r48) {
                r48 = r48 || i18.languages;
                var s36 = r48[t8];
                var l17 = {};
                for(var o28 in s36)if (s36.hasOwnProperty(o28)) {
                    if (o28 == a52) for(var u8 in n52)n52.hasOwnProperty(u8) && (l17[u8] = n52[u8]);
                    n52.hasOwnProperty(o28) || (l17[o28] = s36[o28]);
                }
                var g8 = r48[t8];
                r48[t8] = l17;
                i18.languages.DFS(i18.languages, function(a62, n61) {
                    n61 === g8 && a62 != t8 && ((this || e6)[a62] = l17);
                });
                return l17;
            },
            DFS: function DFS(e10, t9, a71, n7) {
                n7 = n7 || {};
                var r = i18.util.objId;
                for(var s37 in e10)if (e10.hasOwnProperty(s37)) {
                    t9.call(e10, s37, e10[s37], a71 || s37);
                    var l18 = e10[s37];
                    var o29 = i18.util.type(l18);
                    if ("Object" !== o29 || n7[r(l18)]) {
                        if ("Array" === o29 && !n7[r(l18)]) {
                            n7[r(l18)] = true;
                            DFS(l18, t9, s37, n7);
                        }
                    } else {
                        n7[r(l18)] = true;
                        DFS(l18, t9, null, n7);
                    }
                }
            }
        },
        plugins: {},
        highlightAll: function(e11, t10) {
            i18.highlightAllUnder(document, e11, t10);
        },
        highlightAllUnder: function(e12, t11, a8) {
            var n8 = {
                callback: a8,
                container: e12,
                selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
            };
            i18.hooks.run("before-highlightall", n8);
            n8.elements = Array.prototype.slice.apply(n8.container.querySelectorAll(n8.selector));
            i18.hooks.run("before-all-elements-highlight", n8);
            for(var r55, s = 0; r55 = n8.elements[s++];)i18.highlightElement(r55, true === t11, n8.callback);
        },
        highlightElement: function(e13, a9, n9) {
            var r63 = i18.util.getLanguage(e13);
            var s38 = i18.languages[r63];
            i18.util.setLanguage(e13, r63);
            var l19 = e13.parentElement;
            l19 && "pre" === l19.nodeName.toLowerCase() && i18.util.setLanguage(l19, r63);
            var o30 = e13.textContent;
            var u9 = {
                element: e13,
                language: r63,
                grammar: s38,
                code: o30
            };
            function insertHighlightedCode(e14) {
                u9.highlightedCode = e14;
                i18.hooks.run("before-insert", u9);
                u9.element.innerHTML = u9.highlightedCode;
                i18.hooks.run("after-highlight", u9);
                i18.hooks.run("complete", u9);
                n9 && n9.call(u9.element);
            }
            i18.hooks.run("before-sanity-check", u9);
            l19 = u9.element.parentElement;
            l19 && "pre" === l19.nodeName.toLowerCase() && !l19.hasAttribute("tabindex") && l19.setAttribute("tabindex", "0");
            if (u9.code) {
                i18.hooks.run("before-highlight", u9);
                if (u9.grammar) if (a9 && t114.Worker) {
                    var g9 = new Worker(i18.filename);
                    g9.onmessage = function(e15) {
                        insertHighlightedCode(e15.data);
                    };
                    g9.postMessage(JSON.stringify({
                        language: u9.language,
                        code: u9.code,
                        immediateClose: true
                    }));
                } else insertHighlightedCode(i18.highlight(u9.code, u9.grammar, u9.language));
                else insertHighlightedCode(i18.util.encode(u9.code));
            } else {
                i18.hooks.run("complete", u9);
                n9 && n9.call(u9.element);
            }
        },
        highlight: function(e16, t12, a10) {
            var n10 = {
                code: e16,
                grammar: t12,
                language: a10
            };
            i18.hooks.run("before-tokenize", n10);
            n10.tokens = i18.tokenize(n10.code, n10.grammar);
            i18.hooks.run("after-tokenize", n10);
            return Token.stringify(i18.util.encode(n10.tokens), n10.language);
        },
        tokenize: function(e17, t13) {
            var a11 = t13.rest;
            if (a11) {
                for(var n in a11)t13[n] = a11[n];
                delete t13.rest;
            }
            var r72 = new LinkedList;
            addAfter(r72, r72.head, e17);
            matchGrammar(e17, r72, t13, r72.head, 0);
            return toArray(r72);
        },
        hooks: {
            all: {},
            add: function(e, t14) {
                var a12 = i18.hooks.all;
                a12[e] = a12[e] || [];
                a12[e].push(t14);
            },
            run: function(e, t15) {
                var a13 = i18.hooks.all[e];
                if (a13 && a13.length) for(var n11, r = 0; n11 = a13[r++];)n11(t15);
            }
        },
        Token: Token
    };
    t114.Prism = i18;
    function Token(t16, a14, n12, r8) {
        (this || e6).type = t16;
        (this || e6).content = a14;
        (this || e6).alias = n12;
        (this || e6).length = 0 | (r8 || "").length;
    }
    Token.stringify = function stringify(e18, t17) {
        if ("string" == typeof e18) return e18;
        if (Array.isArray(e18)) {
            var a15 = "";
            e18.forEach(function(e19) {
                a15 += stringify(e19, t17);
            });
            return a15;
        }
        var n13 = {
            type: e18.type,
            content: stringify(e18.content, t17),
            tag: "span",
            classes: [
                "token",
                e18.type
            ],
            attributes: {},
            language: t17
        };
        var r9 = e18.alias;
        r9 && (Array.isArray(r9) ? Array.prototype.push.apply(n13.classes, r9) : n13.classes.push(r9));
        i18.hooks.run("wrap", n13);
        var s39 = "";
        for(var l20 in n13.attributes)s39 += " " + l20 + '="' + (n13.attributes[l20] || "").replace(/"/g, "&quot;") + '"';
        return "<" + n13.tag + ' class="' + n13.classes.join(" ") + '"' + s39 + ">" + n13.content + "</" + n13.tag + ">";
    };
    function matchPattern(e20, t18, a16, n14) {
        e20.lastIndex = t18;
        var r10 = e20.exec(a16);
        if (r10 && n14 && r10[1]) {
            var i = r10[1].length;
            r10.index += i;
            r10[0] = r10[0].slice(i);
        }
        return r10;
    }
    function matchGrammar(e21, t19, a17, n15, r11, s40) {
        for(var l24 in a17)if (a17.hasOwnProperty(l24) && a17[l24]) {
            var o33 = a17[l24];
            o33 = Array.isArray(o33) ? o33 : [
                o33
            ];
            for(var u10 = 0; u10 < o33.length; ++u10){
                if (s40 && s40.cause == l24 + "," + u10) return;
                var g10 = o33[u10];
                var c25 = g10.inside;
                var d8 = !!g10.lookbehind;
                var p27 = !!g10.greedy;
                var h8 = g10.alias;
                if (p27 && !g10.pattern.global) {
                    var f10 = g10.pattern.toString().match(/[imsuy]*$/)[0];
                    g10.pattern = RegExp(g10.pattern.source, f10 + "g");
                }
                var m16 = g10.pattern || g10;
                for(var v10 = n15.next, b7 = r11; v10 !== t19.tail; b7 += v10.value.length, v10 = v10.next){
                    if (s40 && b7 >= s40.reach) break;
                    var y14 = v10.value;
                    if (t19.length > e21.length) return;
                    if (!(y14 instanceof Token)) {
                        var k5 = 1;
                        var F6;
                        if (p27) {
                            F6 = matchPattern(m16, b7, e21, d8);
                            if (!F6 || F6.index >= e21.length) break;
                            var x22 = F6.index;
                            var A5 = F6.index + F6[0].length;
                            var w17 = b7;
                            w17 += v10.value.length;
                            while(x22 >= w17){
                                v10 = v10.next;
                                w17 += v10.value.length;
                            }
                            w17 -= v10.value.length;
                            b7 = w17;
                            if (v10.value instanceof Token) continue;
                            for(var $4 = v10; $4 !== t19.tail && (w17 < A5 || "string" === typeof $4.value); $4 = $4.next){
                                k5++;
                                w17 += $4.value.length;
                            }
                            k5--;
                            y14 = e21.slice(b7, w17);
                            F6.index -= b7;
                        } else {
                            F6 = matchPattern(m16, 0, y14, d8);
                            if (!F6) continue;
                        }
                        x22 = F6.index;
                        var S5 = F6[0];
                        var E5 = y14.slice(0, x22);
                        var C4 = y14.slice(x22 + S5.length);
                        var _4 = b7 + y14.length;
                        s40 && _4 > s40.reach && (s40.reach = _4);
                        var j10 = v10.prev;
                        if (E5) {
                            j10 = addAfter(t19, j10, E5);
                            b7 += E5.length;
                        }
                        removeRange(t19, j10, k5);
                        var T4 = new Token(l24, c25 ? i18.tokenize(S5, c25) : S5, h8, S5);
                        v10 = addAfter(t19, j10, T4);
                        C4 && addAfter(t19, v10, C4);
                        if (k5 > 1) {
                            var L4 = {
                                cause: l24 + "," + u10,
                                reach: _4
                            };
                            matchGrammar(e21, t19, a17, v10.prev, b7, L4);
                            s40 && L4.reach > s40.reach && (s40.reach = L4.reach);
                        }
                    }
                }
            }
        }
    }
    function LinkedList() {
        var t20 = {
            value: null,
            prev: null,
            next: null
        };
        var a18 = {
            value: null,
            prev: t20,
            next: null
        };
        t20.next = a18;
        (this || e6).head = t20;
        (this || e6).tail = a18;
        (this || e6).length = 0;
    }
    function addAfter(e22, t21, a19) {
        var n16 = t21.next;
        var r12 = {
            value: a19,
            prev: t21,
            next: n16
        };
        t21.next = r12;
        n16.prev = r12;
        e22.length++;
        return r12;
    }
    function removeRange(e23, t22, a20) {
        var n17 = t22.next;
        for(var r13 = 0; r13 < a20 && n17 !== e23.tail; r13++)n17 = n17.next;
        t22.next = n17;
        n17.prev = t22;
        e23.length -= r13;
    }
    function toArray(e24) {
        var t23 = [];
        var a21 = e24.head.next;
        while(a21 !== e24.tail){
            t23.push(a21.value);
            a21 = a21.next;
        }
        return t23;
    }
    if (!t114.document) {
        if (!t114.addEventListener) return i18;
        i18.disableWorkerMessageHandler || t114.addEventListener("message", function(e25) {
            var a22 = JSON.parse(e25.data);
            var n18 = a22.language;
            var r14 = a22.code;
            var s42 = a22.immediateClose;
            t114.postMessage(i18.highlight(r14, i18.languages[n18], n18));
            s42 && t114.close();
        }, false);
        return i18;
    }
    var s114 = i18.util.currentScript();
    if (s114) {
        i18.filename = s114.src;
        s114.hasAttribute("data-manual") && (i18.manual = true);
    }
    function highlightAutomaticallyCallback() {
        i18.manual || i18.highlightAll();
    }
    if (!i18.manual) {
        var l110 = document.readyState;
        "loading" === l110 || "interactive" === l110 && s114 && s114.defer ? document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback) : window.requestAnimationFrame ? window.requestAnimationFrame(highlightAutomaticallyCallback) : window.setTimeout(highlightAutomaticallyCallback, 16);
    }
    return i18;
}(a7);
t7 && (t7 = n6);
"undefined" !== typeof e6 && (e6.Prism = n6);
n6.languages.markup = {
    comment: {
        pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
        greedy: true
    },
    prolog: {
        pattern: /<\?[\s\S]+?\?>/,
        greedy: true
    },
    doctype: {
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
        greedy: true,
        inside: {
            "internal-subset": {
                pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
                lookbehind: true,
                greedy: true,
                inside: null
            },
            string: {
                pattern: /"[^"]*"|'[^']*'/,
                greedy: true
            },
            punctuation: /^<!|>$|[[\]]/,
            "doctype-tag": /^DOCTYPE/i,
            name: /[^\s<>'"]+/
        }
    },
    cdata: {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        greedy: true
    },
    tag: {
        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
        greedy: true,
        inside: {
            tag: {
                pattern: /^<\/?[^\s>\/]+/,
                inside: {
                    punctuation: /^<\/?/,
                    namespace: /^[^\s>\/:]+:/
                }
            },
            "special-attr": [],
            "attr-value": {
                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
                inside: {
                    punctuation: [
                        {
                            pattern: /^=/,
                            alias: "attr-equals"
                        },
                        /"|'/
                    ]
                }
            },
            punctuation: /\/?>/,
            "attr-name": {
                pattern: /[^\s>\/]+/,
                inside: {
                    namespace: /^[^\s>\/:]+:/
                }
            }
        }
    },
    entity: [
        {
            pattern: /&[\da-z]{1,8};/i,
            alias: "named-entity"
        },
        /&#x?[\da-f]{1,8};/i
    ]
};
n6.languages.markup.tag.inside["attr-value"].inside.entity = n6.languages.markup.entity;
n6.languages.markup.doctype.inside["internal-subset"].inside = n6.languages.markup;
n6.hooks.add("wrap", function(e26) {
    "entity" === e26.type && (e26.attributes.title = e26.content.replace(/&amp;/, "&"));
});
Object.defineProperty(n6.languages.markup.tag, "addInlined", {
    value: function addInlined(e27, t) {
        var a23 = {};
        a23["language-" + t] = {
            pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
            lookbehind: true,
            inside: n6.languages[t]
        };
        a23.cdata = /^<!\[CDATA\[|\]\]>$/i;
        var r15 = {
            "included-cdata": {
                pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
                inside: a23
            }
        };
        r15["language-" + t] = {
            pattern: /[\s\S]+/,
            inside: n6.languages[t]
        };
        var i = {};
        i[e27] = {
            pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
                return e27;
            }), "i"),
            lookbehind: true,
            greedy: true,
            inside: r15
        };
        n6.languages.insertBefore("markup", "cdata", i);
    }
});
Object.defineProperty(n6.languages.markup.tag, "addAttribute", {
    value: function(e28, t24) {
        n6.languages.markup.tag.inside["special-attr"].push({
            pattern: RegExp(/(^|["'\s])/.source + "(?:" + e28 + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, "i"),
            lookbehind: true,
            inside: {
                "attr-name": /^[^\s=]+/,
                "attr-value": {
                    pattern: /=[\s\S]+/,
                    inside: {
                        value: {
                            pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                            lookbehind: true,
                            alias: [
                                t24,
                                "language-" + t24
                            ],
                            inside: n6.languages[t24]
                        },
                        punctuation: [
                            {
                                pattern: /^=/,
                                alias: "attr-equals"
                            },
                            /"|'/
                        ]
                    }
                }
            }
        });
    }
});
n6.languages.html = n6.languages.markup;
n6.languages.mathml = n6.languages.markup;
n6.languages.svg = n6.languages.markup;
n6.languages.xml = n6.languages.extend("markup", {});
n6.languages.ssml = n6.languages.xml;
n6.languages.atom = n6.languages.xml;
n6.languages.rss = n6.languages.xml;
(function(e29) {
    var t25 = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
    e29.languages.css = {
        comment: /\/\*[\s\S]*?\*\//,
        atrule: {
            pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
            inside: {
                rule: /^@[\w-]+/,
                "selector-function-argument": {
                    pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                    lookbehind: true,
                    alias: "selector"
                },
                keyword: {
                    pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                    lookbehind: true
                }
            }
        },
        url: {
            pattern: RegExp("\\burl\\((?:" + t25.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
            greedy: true,
            inside: {
                function: /^url/i,
                punctuation: /^\(|\)$/,
                string: {
                    pattern: RegExp("^" + t25.source + "$"),
                    alias: "url"
                }
            }
        },
        selector: {
            pattern: RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|" + t25.source + ")*(?=\\s*\\{)"),
            lookbehind: true
        },
        string: {
            pattern: t25,
            greedy: true
        },
        property: {
            pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
            lookbehind: true
        },
        important: /!important\b/i,
        function: {
            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
            lookbehind: true
        },
        punctuation: /[(){};:,]/
    };
    e29.languages.css.atrule.inside.rest = e29.languages.css;
    var a24 = e29.languages.markup;
    if (a24) {
        a24.tag.addInlined("style", "css");
        a24.tag.addAttribute("style", "css");
    }
})(n6);
n6.languages.clike = {
    comment: [
        {
            pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
            lookbehind: true,
            greedy: true
        },
        {
            pattern: /(^|[^\\:])\/\/.*/,
            lookbehind: true,
            greedy: true
        }
    ],
    string: {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
    },
    "class-name": {
        pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
            punctuation: /[.\\]/
        }
    },
    keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
    boolean: /\b(?:false|true)\b/,
    function: /\b\w+(?=\()/,
    number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    punctuation: /[{}[\];(),.:]/
};
n6.languages.javascript = n6.languages.extend("clike", {
    "class-name": [
        n6.languages.clike["class-name"],
        {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
            lookbehind: true
        }
    ],
    keyword: [
        {
            pattern: /((?:^|\})\s*)catch\b/,
            lookbehind: true
        },
        {
            pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
            lookbehind: true
        }
    ],
    function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    number: {
        pattern: RegExp(/(^|[^\w$])/.source + "(?:" + /NaN|Infinity/.source + "|" + /0[bB][01]+(?:_[01]+)*n?/.source + "|" + /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + /\d+(?:_\d+)*n/.source + "|" + /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source + ")" + /(?![\w$])/.source),
        lookbehind: true
    },
    operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});
n6.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
n6.languages.insertBefore("javascript", "keyword", {
    regex: {
        pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
        lookbehind: true,
        greedy: true,
        inside: {
            "regex-source": {
                pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
                lookbehind: true,
                alias: "language-regex",
                inside: n6.languages.regex
            },
            "regex-delimiter": /^\/|\/$/,
            "regex-flags": /^[a-z]+$/
        }
    },
    "function-variable": {
        pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
        alias: "function"
    },
    parameter: [
        {
            pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
            lookbehind: true,
            inside: n6.languages.javascript
        },
        {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
            lookbehind: true,
            inside: n6.languages.javascript
        },
        {
            pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
            lookbehind: true,
            inside: n6.languages.javascript
        },
        {
            pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
            lookbehind: true,
            inside: n6.languages.javascript
        }
    ],
    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});
n6.languages.insertBefore("javascript", "string", {
    hashbang: {
        pattern: /^#!.*/,
        greedy: true,
        alias: "comment"
    },
    "template-string": {
        pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
        greedy: true,
        inside: {
            "template-punctuation": {
                pattern: /^`|`$/,
                alias: "string"
            },
            interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
                lookbehind: true,
                inside: {
                    "interpolation-punctuation": {
                        pattern: /^\$\{|\}$/,
                        alias: "punctuation"
                    },
                    rest: n6.languages.javascript
                }
            },
            string: /[\s\S]+/
        }
    },
    "string-property": {
        pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
        lookbehind: true,
        greedy: true,
        alias: "property"
    }
});
n6.languages.insertBefore("javascript", "operator", {
    "literal-property": {
        pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
        lookbehind: true,
        alias: "property"
    }
});
if (n6.languages.markup) {
    n6.languages.markup.tag.addInlined("script", "javascript");
    n6.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, "javascript");
}
n6.languages.js = n6.languages.javascript;
(function() {
    if ("undefined" !== typeof n6 && "undefined" !== typeof document) {
        Element.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);
        var t264 = "Loading…";
        var FAILURE_MESSAGE = function(e30, t28) {
            return "✖ Error " + e30 + " while fetching file: " + t28;
        };
        var a25 = "✖ Error: File does not exist or is empty";
        var r16 = {
            js: "javascript",
            py: "python",
            rb: "ruby",
            ps1: "powershell",
            psm1: "powershell",
            sh: "bash",
            bat: "batch",
            h: "c",
            tex: "latex"
        };
        var i = "data-src-status";
        var s213 = "loading";
        var l25 = "loaded";
        var o114 = "failed";
        var u16 = "pre[data-src]:not([" + i + '="' + l25 + '"]):not([' + i + '="' + s213 + '"])';
        n6.hooks.add("before-highlightall", function(e31) {
            e31.selector += ", " + u16;
        });
        n6.hooks.add("before-sanity-check", function(e32) {
            var a27 = e32.element;
            if (a27.matches(u16)) {
                e32.code = "";
                a27.setAttribute(i, s213);
                var g14 = a27.appendChild(document.createElement("CODE"));
                g14.textContent = t264;
                var c26 = a27.getAttribute("data-src");
                var d9 = e32.language;
                if ("none" === d9) {
                    var p28 = (/\.(\w+)$/.exec(c26) || [
                        ,
                        "none"
                    ])[1];
                    d9 = r16[p28] || p28;
                }
                n6.util.setLanguage(g14, d9);
                n6.util.setLanguage(a27, d9);
                var h9 = n6.plugins.autoloader;
                h9 && h9.loadLanguages(d9);
                loadFile(c26, function(e33) {
                    a27.setAttribute(i, l25);
                    var t29 = parseRange(a27.getAttribute("data-range"));
                    if (t29) {
                        var r17 = e33.split(/\r\n?|\n/g);
                        var s43 = t29[0];
                        var o34 = null == t29[1] ? r17.length : t29[1];
                        s43 < 0 && (s43 += r17.length);
                        s43 = Math.max(0, Math.min(s43 - 1, r17.length));
                        o34 < 0 && (o34 += r17.length);
                        o34 = Math.max(0, Math.min(o34, r17.length));
                        e33 = r17.slice(s43, o34).join("\n");
                        a27.hasAttribute("data-start") || a27.setAttribute("data-start", String(s43 + 1));
                    }
                    g14.textContent = e33;
                    n6.highlightElement(g14);
                }, function(e34) {
                    a27.setAttribute(i, o114);
                    g14.textContent = e34;
                });
            }
        });
        n6.plugins.fileHighlight = {
            highlight: function highlight(e35) {
                var t30 = (e35 || document).querySelectorAll(u16);
                for(var a28, r = 0; a28 = t30[r++];)n6.highlightElement(a28);
            }
        };
        var g15 = false;
        n6.fileHighlight = function() {
            if (!g15) {
                console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.");
                g15 = true;
            }
            n6.plugins.fileHighlight.highlight.apply(this || e6, arguments);
        };
    }
    function loadFile(e36, t31, n19) {
        var r18 = new XMLHttpRequest;
        r18.open("GET", e36, true);
        r18.onreadystatechange = function() {
            4 == r18.readyState && (r18.status < 400 && r18.responseText ? t31(r18.responseText) : r18.status >= 400 ? n19(FAILURE_MESSAGE(r18.status, r18.statusText)) : n19(a25));
        };
        r18.send(null);
    }
    function parseRange(e37) {
        var t32 = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(e37 || "");
        if (t32) {
            var a29 = Number(t32[1]);
            var n20 = t32[2];
            var r19 = t32[3];
            return n20 ? r19 ? [
                a29,
                Number(r19)
            ] : [
                a29,
                void 0
            ] : [
                a29,
                a29
            ];
        }
    }
})();
var r8 = t7;
class Renderer1 extends marked.Renderer {
    heading(text, level, raw, slugger) {
        const slug = slugger.slug(raw);
        return `<h${level} id="${slug}"><a class="anchor" aria-hidden="true" tabindex="-1" href="#${slug}"><svg class="octicon octicon-link" viewBox="0 0 16 16" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a>${text}</h${level}>`;
    }
    code(code, language) {
        language = language.split(",")[0];
        const grammar = Object.hasOwnProperty.call(r8.languages, language) ? r8.languages[language] : undefined;
        if (grammar === undefined) {
            return `<pre><code>${t6.escape(code)}</code></pre>`;
        }
        const html = r8.highlight(code, grammar, language);
        return `<div class="highlight highlight-source-${language}"><pre>${html}</pre></div>`;
    }
    link(href, title, text) {
        if (href.startsWith("#")) {
            return `<a href="${href}" title="${title}">${text}</a>`;
        }
        return `<a href="${href}" title="${title}" rel="noopener noreferrer">${text}</a>`;
    }
}
const pageServingHeaders = {
    "content-type": "text/html; charset=UTF-8",
    "Cache-Control": "s-maxage=1500, public, immutable, stale-while-revalidate=1501",
    Link: `<https://ga.jspm.io>; rel="preconnect",<https://fonts.googleapis.com>; rel="preconnect", <https://ga.jspm.io/npm:normalize.css@8.0.1/normalize.css>; rel="preload"; as="style", <https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Bebas+Neue&family=Major+Mono+Display&family=Playfair+Display:ital,wght@0,400;0,700;0,900;1,700&family=Source+Code+Pro&family=Vollkorn&family=Inter:wght@200;400;800&display=swap>; rel="preload"; as="style"`
};
function renderMarkdownContent(markdown, opts = {}) {
    markdown = emojify(markdown);
    return marked(markdown, {
        gfm: true,
        renderer: new Renderer1()
    });
}
const FEATURED_PACKAGES = [
    {
        name: "svelte",
        version: "3.46.2",
        description: "Cybernetically enhanced web apps"
    },
    {
        name: "lit",
        version: "2.1.1",
        description: "A library for building fast, lightweight web components"
    },
    {
        name: "preact",
        version: "10.6.4",
        description: "Fast 3kb React-compatible Virtual DOM library."
    },
    {
        name: "vue",
        version: "2.6.14",
        description: "Reactive, component-oriented view layer for modern web interfaces."
    },
    {
        name: "react",
        version: "17.0.2",
        description: "React is a JavaScript library for building user interfaces."
    },
    {
        name: "lodash",
        version: "4.17.21",
        description: "Lodash modular utilities."
    },
    {
        name: "@babel/core",
        version: "7.16.7",
        description: "Babel compiler core."
    },
    {
        name: "rollup",
        version: "2.64.0",
        description: "Next-generation ES module bundler"
    },
    {
        name: "@jspm/generator",
        version: "1.0.0-beta.22",
        description: 'Package Import Map Generation Tool"'
    },
    {
        name: "@jspm/import-map",
        version: "0.3.3",
        description: "Package Import Map Utility"
    },
    {
        name: "xstate",
        version: "4.27.0",
        description: "Finite State Machines and Statecharts for the Modern Web."
    }
];
const importMeta = {
    url: "file:///Users/shukla001/@jspm/jspm-packages/server.jsx",
    main: import.meta.main
};
const staticResources = {
    "/style.css": {
        path: "./style.css",
        contentType: "text/css; charset=utf-8"
    },
    "/dom-main.js": {
        path: "./lib/dom-main.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/dom-main.js.map": {
        path: "./lib/dom-main.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/statehash.js": {
        path: "./lib/statehash.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/statehash.js.map": {
        path: "./lib/statehash.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/header.js": {
        path: "./lib/header.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/header.js.map": {
        path: "./lib/header.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/exports.js": {
        path: "./lib/exports.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/exports.js.map": {
        path: "./lib/exports.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/logo.js": {
        path: "./lib/logo.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/logo.js.map": {
        path: "./lib/logo.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/search.js": {
        path: "./lib/search.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/search.js.map": {
        path: "./lib/search.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/nav.js": {
        path: "./lib/nav.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/nav.js.map": {
        path: "./lib/nav.js.map",
        contentType: "application/javascript; charset=utf-8"
    },
    "/importmap-generator.js": {
        path: "./lib/importmap-generator.js",
        contentType: "application/javascript; charset=utf-8"
    },
    "/importmap-generator.js.map": {
        path: "./lib/importmap-generator.js.map",
        contentType: "application/javascript; charset=utf-8"
    }
};
async function generateHTML({ template , body , head , footer  } = {
    template: "./lib/shell.html"
}) {
    const content = await Deno.readTextFile(template);
    const [START, AFTER_HEADER_BEFORE_CONTENT, DOM_SCRIPT, END] = content.split(/<!-- __[A-Z]*__ -->/i);
    return [
        START,
        head.join("\n"),
        AFTER_HEADER_BEFORE_CONTENT,
        body,
        DOM_SCRIPT,
        footer.join("\n"),
        END, 
    ].join("\n");
}
function removeLeadingSlash(path26) {
    if (path26.startsWith("/")) {
        return path26.slice(1);
    }
    return path26;
}
function removeTrailingSlash(path27) {
    if (path27.endsWith("/")) {
        return path27.slice(0, -1);
    }
    return path27;
}
function removeSlashes(path28) {
    return removeTrailingSlash(removeLeadingSlash(path28));
}
async function requestHandler(request) {
    try {
        const { pathname , searchParams  } = new URL(request.url);
        const NPM_PROVIDER_URL = "https://ga.jspm.io/npm:";
        const npmPackage = searchParams.get("q");
        if (npmPackage) {
            const npmPackageProbe = await fetch(`${NPM_PROVIDER_URL}${npmPackage}`);
            const npmPackageVersion = await npmPackageProbe.text();
            if (npmPackageVersion) {
                return new Response(npmPackage, {
                    status: 302,
                    headers: {
                        "Location": `/package/${npmPackage}@${npmPackageVersion}`
                    }
                });
            }
        }
        const pathSegments = removeSlashes(pathname).split("/");
        const staticResource = staticResources[`/${pathSegments[pathSegments.length - 1]}`];
        if (staticResource) {
            const response = await Deno.readFile(staticResource.path);
            return new Response(response, {
                headers: {
                    "content-type": staticResource.contentType
                }
            });
        }
        if (pathname === "/") {
            const indexPage = gt(Ct(Home, {
                packages: FEATURED_PACKAGES
            }));
            const { body , head , footer  } = Lt.SSR(indexPage);
            const html = await generateHTML({
                template: "./lib/shell.html",
                body,
                head,
                footer
            });
            return new Response(html, {
                headers: pageServingHeaders
            });
        }
        const BASE_PATH = "/package/";
        const maybeReadmeFiles = [
            "README.md",
            "readme.md"
        ];
        if (pathname.startsWith(BASE_PATH)) {
            const [, packageName] = pathname.split(BASE_PATH);
            if (packageName) {
                const baseURL = `${NPM_PROVIDER_URL}${packageName}`;
                const filesToFetch = [
                    "package.json",
                    ...maybeReadmeFiles
                ];
                const [jspmPackage, README, readme] = await Promise.all(filesToFetch.map((file)=>fetch(`${baseURL}/${file}`)
                ));
                const { name , description , keywords , version: version5 , homepage , license , files , exports ,  } = await jspmPackage.json();
                const readmeFileContent = await [
                    README,
                    readme
                ].find((readmeFile)=>readmeFile.status === 200 || readmeFile.status === 304
                ).text();
                try {
                    const readmeHTML = renderMarkdownContent(readmeFileContent);
                    const filteredExport = Object.keys(exports).filter((expt)=>!expt.endsWith("!cjs") && !expt.endsWith("/") && expt.indexOf("*") === -1
                    ).sort();
                    const app = gt(Ct(Package, {
                        name: name,
                        description: description,
                        version: version5,
                        homepage: homepage,
                        license: license,
                        files: files,
                        exports: filteredExport,
                        readme: readmeHTML,
                        keywords: keywords
                    }));
                    const { body , head , footer  } = Lt.SSR(app);
                    const html = await generateHTML({
                        template: "./lib/shell.html",
                        body,
                        head,
                        footer
                    });
                    return new Response(html, {
                        headers: pageServingHeaders
                    });
                } catch (e27) {
                    console.error(`Failed in generating package-page ${name}@${version5}`);
                    console.error(e27);
                    return new Response("500", {
                        status: 500
                    });
                }
            }
        }
        return new Response("404", {
            status: 404
        });
    } catch (error) {
        return new Response(error.message || error.toString(), {
            status: 500
        });
    }
}
if (importMeta?.main) {
    const timestamp = Date.now();
    const humanReadableDateTime = new Intl.DateTimeFormat("default", {
        dateStyle: "full",
        timeStyle: "long"
    }).format(timestamp);
    console.log("Current Date: ", humanReadableDateTime);
    console.info(`Server Listening on http://localhost:8000`);
    serve(requestHandler);
}
